// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import type * as serializers from "../../../../../index";
import { AdmittingDiagnosis } from "./AdmittingDiagnosis";
import { ConditionInformation } from "./ConditionInformation";
import { DiagnosisRelatedGroup } from "./DiagnosisRelatedGroup";
import { ExternalCauseOfInjury } from "./ExternalCauseOfInjury";
import { OccurrenceInformation } from "./OccurrenceInformation";
import { OccurrenceSpanInformation } from "./OccurrenceSpanInformation";
import { OtherDiagnosisInformation } from "./OtherDiagnosisInformation";
import { OtherProcedureInformation } from "./OtherProcedureInformation";
import { PatientReasonForVisit } from "./PatientReasonForVisit";
import { PrincipalDiagnosis } from "./PrincipalDiagnosis";
import { PrincipalProcedureInformation } from "./PrincipalProcedureInformation";
import { TreatmentCodeInformation } from "./TreatmentCodeInformation";
import { ValueInformation } from "./ValueInformation";

export const HealthCareCodeInformationGetAllResponse: core.serialization.ObjectSchema<
    serializers.healthCareCodeInformation.v1.HealthCareCodeInformationGetAllResponse.Raw,
    CandidApi.healthCareCodeInformation.v1.HealthCareCodeInformationGetAllResponse
> = core.serialization.object({
    principalDiagnosis: core.serialization.property("principal_diagnosis", PrincipalDiagnosis.optional()),
    otherDiagnosisInformation: core.serialization.property(
        "other_diagnosis_information",
        core.serialization.list(OtherDiagnosisInformation),
    ),
    admittingDiagnosis: core.serialization.property("admitting_diagnosis", AdmittingDiagnosis.optional()),
    patientReasonsForVisit: core.serialization.property(
        "patient_reasons_for_visit",
        core.serialization.list(PatientReasonForVisit),
    ),
    externalCausesOfInjury: core.serialization.property(
        "external_causes_of_injury",
        core.serialization.list(ExternalCauseOfInjury),
    ),
    diagnosisRelatedGroups: core.serialization.property("diagnosis_related_groups", DiagnosisRelatedGroup.optional()),
    principalProcedure: core.serialization.property("principal_procedure", PrincipalProcedureInformation.optional()),
    otherProcedureInformation: core.serialization.property(
        "other_procedure_information",
        core.serialization.list(OtherProcedureInformation),
    ),
    occurrenceSpanInformation: core.serialization.property(
        "occurrence_span_information",
        core.serialization.list(OccurrenceSpanInformation),
    ),
    occurrenceInformation: core.serialization.property(
        "occurrence_information",
        core.serialization.list(OccurrenceInformation),
    ),
    treatmentCodeInformation: core.serialization.property(
        "treatment_code_information",
        core.serialization.list(TreatmentCodeInformation),
    ),
    valueInformation: core.serialization.property("value_information", core.serialization.list(ValueInformation)),
    conditionInformation: core.serialization.property(
        "condition_information",
        core.serialization.list(ConditionInformation),
    ),
});

export declare namespace HealthCareCodeInformationGetAllResponse {
    export interface Raw {
        principal_diagnosis?: PrincipalDiagnosis.Raw | null;
        other_diagnosis_information: OtherDiagnosisInformation.Raw[];
        admitting_diagnosis?: AdmittingDiagnosis.Raw | null;
        patient_reasons_for_visit: PatientReasonForVisit.Raw[];
        external_causes_of_injury: ExternalCauseOfInjury.Raw[];
        diagnosis_related_groups?: DiagnosisRelatedGroup.Raw | null;
        principal_procedure?: PrincipalProcedureInformation.Raw | null;
        other_procedure_information: OtherProcedureInformation.Raw[];
        occurrence_span_information: OccurrenceSpanInformation.Raw[];
        occurrence_information: OccurrenceInformation.Raw[];
        treatment_code_information: TreatmentCodeInformation.Raw[];
        value_information: ValueInformation.Raw[];
        condition_information: ConditionInformation.Raw[];
    }
}
