/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const InsuranceTypes: core.serialization.Schema<
    serializers.contracts.v2.InsuranceTypes.Raw,
    CandidApi.contracts.v2.InsuranceTypes
> = core.serialization
    .union("type", {
        allApply: core.serialization.object({}),
        noneApply: core.serialization.object({}),
        theseApply: core.serialization.object({
            value: core.serialization.list(
                core.serialization.lazy(async () => (await import("../../../../..")).InsuranceTypeCode)
            ),
        }),
    })
    .transform<CandidApi.contracts.v2.InsuranceTypes>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace InsuranceTypes {
    type Raw = InsuranceTypes.AllApply | InsuranceTypes.NoneApply | InsuranceTypes.TheseApply;

    interface AllApply {
        type: "allApply";
    }

    interface NoneApply {
        type: "noneApply";
    }

    interface TheseApply {
        type: "theseApply";
        value: serializers.InsuranceTypeCode.Raw[];
    }
}
