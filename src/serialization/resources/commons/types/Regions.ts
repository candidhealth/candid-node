/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { CandidApi } from "";
import * as core from "../../../../core";

export const Regions: core.serialization.Schema<serializers.Regions.Raw, CandidApi.Regions> = core.serialization
    .union("type", {
        states: core.serialization.lazyObject(async () => (await import("../../..")).RegionStates),
        national: core.serialization.lazyObject(async () => (await import("../../..")).RegionNational),
    })
    .transform<CandidApi.Regions>({
        transform: (value) => {
            switch (value.type) {
                case "states":
                    return CandidApi.Regions.states(value);
                case "national":
                    return CandidApi.Regions.national(value);
                default:
                    return CandidApi.Regions._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Regions {
    type Raw = Regions.States | Regions.National;

    interface States extends serializers.RegionStates.Raw {
        type: "states";
    }

    interface National extends serializers.RegionNational.Raw {
        type: "national";
    }
}
