/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../index";
import * as CandidApi from "../../../../../../../api/index";
import * as core from "../../../../../../../core";
import { PriorAuthorizationNumber } from "../../types/PriorAuthorizationNumber";
import { EncounterExternalId } from "../../../../../commons/types/EncounterExternalId";
import { Date_ } from "../../../../../commons/types/Date_";
import { DiagnosisId } from "../../../../../diagnoses/types/DiagnosisId";
import { TagId } from "../../../../../tags/types/TagId";
import { ClinicalNoteCategoryCreate } from "../../types/ClinicalNoteCategoryCreate";
import { StreetAddressLongZip } from "../../../../../commons/types/StreetAddressLongZip";
import { BillableStatusType } from "../../types/BillableStatusType";
import { ResponsiblePartyType } from "../../types/ResponsiblePartyType";
import { SynchronicityType } from "../../types/SynchronicityType";
import { FacilityTypeCode } from "../../../../../commons/types/FacilityTypeCode";
import { SubscriberCreate } from "../../../../../individual/types/SubscriberCreate";
import { ServiceAuthorizationExceptionCode } from "../../types/ServiceAuthorizationExceptionCode";
import { DelayReasonCode } from "../../../../../commons/types/DelayReasonCode";

export const EncounterUpdate: core.serialization.Schema<
    serializers.encounters.v4.EncounterUpdate.Raw,
    CandidApi.encounters.v4.EncounterUpdate
> = core.serialization.object({
    priorAuthorizationNumber: core.serialization.property(
        "prior_authorization_number",
        PriorAuthorizationNumber.optional()
    ),
    externalId: core.serialization.property("external_id", EncounterExternalId.optional()),
    dateOfService: core.serialization.property("date_of_service", Date_.optional()),
    diagnosisIds: core.serialization.property("diagnosis_ids", core.serialization.list(DiagnosisId).optional()),
    tagIds: core.serialization.property("tag_ids", core.serialization.list(TagId).optional()),
    clinicalNotes: core.serialization.property(
        "clinical_notes",
        core.serialization.list(ClinicalNoteCategoryCreate).optional()
    ),
    payToAddress: core.serialization.property("pay_to_address", StreetAddressLongZip.optional()),
    billableStatus: core.serialization.property("billable_status", BillableStatusType.optional()),
    responsibleParty: core.serialization.property("responsible_party", ResponsiblePartyType.optional()),
    providerAcceptsAssignment: core.serialization.property(
        "provider_accepts_assignment",
        core.serialization.boolean().optional()
    ),
    benefitsAssignedToProvider: core.serialization.property(
        "benefits_assigned_to_provider",
        core.serialization.boolean().optional()
    ),
    synchronicity: SynchronicityType.optional(),
    placeOfServiceCode: core.serialization.property("place_of_service_code", FacilityTypeCode.optional()),
    appointmentType: core.serialization.property("appointment_type", core.serialization.string().optional()),
    endDateOfService: core.serialization.property("end_date_of_service", Date_.optional()),
    subscriberPrimary: core.serialization.property("subscriber_primary", SubscriberCreate.optional()),
    subscriberSecondary: core.serialization.property("subscriber_secondary", SubscriberCreate.optional()),
    additionalInformation: core.serialization.property(
        "additional_information",
        core.serialization.string().optional()
    ),
    serviceAuthorizationExceptionCode: core.serialization.property(
        "service_authorization_exception_code",
        ServiceAuthorizationExceptionCode.optional()
    ),
    admissionDate: core.serialization.property("admission_date", Date_.optional()),
    dischargeDate: core.serialization.property("discharge_date", Date_.optional()),
    onsetOfCurrentIllnessOrSymptomDate: core.serialization.property(
        "onset_of_current_illness_or_symptom_date",
        Date_.optional()
    ),
    lastMenstrualPeriodDate: core.serialization.property("last_menstrual_period_date", Date_.optional()),
    delayReasonCode: core.serialization.property("delay_reason_code", DelayReasonCode.optional()),
    patientAuthorizedRelease: core.serialization.property(
        "patient_authorized_release",
        core.serialization.boolean().optional()
    ),
});

export declare namespace EncounterUpdate {
    interface Raw {
        prior_authorization_number?: PriorAuthorizationNumber.Raw | null;
        external_id?: EncounterExternalId.Raw | null;
        date_of_service?: Date_.Raw | null;
        diagnosis_ids?: DiagnosisId.Raw[] | null;
        tag_ids?: TagId.Raw[] | null;
        clinical_notes?: ClinicalNoteCategoryCreate.Raw[] | null;
        pay_to_address?: StreetAddressLongZip.Raw | null;
        billable_status?: BillableStatusType.Raw | null;
        responsible_party?: ResponsiblePartyType.Raw | null;
        provider_accepts_assignment?: boolean | null;
        benefits_assigned_to_provider?: boolean | null;
        synchronicity?: SynchronicityType.Raw | null;
        place_of_service_code?: FacilityTypeCode.Raw | null;
        appointment_type?: string | null;
        end_date_of_service?: Date_.Raw | null;
        subscriber_primary?: SubscriberCreate.Raw | null;
        subscriber_secondary?: SubscriberCreate.Raw | null;
        additional_information?: string | null;
        service_authorization_exception_code?: ServiceAuthorizationExceptionCode.Raw | null;
        admission_date?: Date_.Raw | null;
        discharge_date?: Date_.Raw | null;
        onset_of_current_illness_or_symptom_date?: Date_.Raw | null;
        last_menstrual_period_date?: Date_.Raw | null;
        delay_reason_code?: DelayReasonCode.Raw | null;
        patient_authorized_release?: boolean | null;
    }
}
