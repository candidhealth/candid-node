/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../index";
import * as CandidApi from "../../../../../../../api/index";
import * as core from "../../../../../../../core";
import { EpsdtReferral } from "../../types/EpsdtReferral";
import { ClinicalNoteCategoryCreate } from "../../types/ClinicalNoteCategoryCreate";
import { ClaimSupplementalInformation } from "../../types/ClaimSupplementalInformation";
import { SchemaInstance } from "../../../../../customSchemas/resources/v1/types/SchemaInstance";
import { Medication } from "../../types/Medication";
import { GuarantorUpdate } from "../../../../../guarantor/resources/v1/types/GuarantorUpdate";
import { SubscriberCreate } from "../../../../../individual/types/SubscriberCreate";
import { StreetAddressLongZip } from "../../../../../commons/types/StreetAddressLongZip";
import { DiagnosisId } from "../../../../../diagnoses/types/DiagnosisId";
import { InitialReferringProviderUpdate } from "../../../../../encounterProviders/resources/v2/types/InitialReferringProviderUpdate";
import { ReferringProviderUpdate } from "../../../../../encounterProviders/resources/v2/types/ReferringProviderUpdate";
import { PatientUpdate } from "../../../../../individual/types/PatientUpdate";
import { RenderingProviderUpdate } from "../../../../../encounterProviders/resources/v2/types/RenderingProviderUpdate";
import { EncounterServiceFacilityUpdate } from "../../../../../serviceFacility/types/EncounterServiceFacilityUpdate";
import { SupervisingProviderUpdate } from "../../../../../encounterProviders/resources/v2/types/SupervisingProviderUpdate";
import { BillingProviderUpdate } from "../../../../../encounterProviders/resources/v2/types/BillingProviderUpdate";
import { FacilityTypeCode } from "../../../../../commons/types/FacilityTypeCode";
import { EncounterOptional } from "../../types/EncounterOptional";

export const EncounterUpdate: core.serialization.Schema<
    serializers.encounters.v4.EncounterUpdate.Raw,
    CandidApi.encounters.v4.EncounterUpdate
> = core.serialization
    .object({
        epsdtReferral: core.serialization.property("epsdt_referral", EpsdtReferral.optional()),
        clinicalNotes: core.serialization.property(
            "clinical_notes",
            core.serialization.list(ClinicalNoteCategoryCreate).optional(),
        ),
        claimSupplementalInformation: core.serialization.property(
            "claim_supplemental_information",
            core.serialization.list(ClaimSupplementalInformation).optional(),
        ),
        schemaInstances: core.serialization.property(
            "schema_instances",
            core.serialization.list(SchemaInstance).optional(),
        ),
        existingMedications: core.serialization.property(
            "existing_medications",
            core.serialization.list(Medication).optional(),
        ),
        guarantor: GuarantorUpdate.optional(),
        subscriberPrimary: core.serialization.property("subscriber_primary", SubscriberCreate.optional()),
        subscriberSecondary: core.serialization.property("subscriber_secondary", SubscriberCreate.optional()),
        subscriberTertiary: core.serialization.property("subscriber_tertiary", SubscriberCreate.optional()),
        payToAddress: core.serialization.property("pay_to_address", StreetAddressLongZip.optional()),
        diagnosisIds: core.serialization.property("diagnosis_ids", core.serialization.list(DiagnosisId).optional()),
        initialReferringProvider: core.serialization.property(
            "initial_referring_provider",
            InitialReferringProviderUpdate.optional(),
        ),
        referringProvider: core.serialization.property("referring_provider", ReferringProviderUpdate.optional()),
        patient: PatientUpdate.optional(),
        renderingProvider: core.serialization.property("rendering_provider", RenderingProviderUpdate.optional()),
        serviceFacility: core.serialization.property("service_facility", EncounterServiceFacilityUpdate.optional()),
        supervisingProvider: core.serialization.property("supervising_provider", SupervisingProviderUpdate.optional()),
        billingProvider: core.serialization.property("billing_provider", BillingProviderUpdate.optional()),
        placeOfServiceCodeAsSubmitted: core.serialization.property(
            "place_of_service_code_as_submitted",
            FacilityTypeCode.optional(),
        ),
    })
    .extend(EncounterOptional);

export declare namespace EncounterUpdate {
    export interface Raw extends EncounterOptional.Raw {
        epsdt_referral?: EpsdtReferral.Raw | null;
        clinical_notes?: ClinicalNoteCategoryCreate.Raw[] | null;
        claim_supplemental_information?: ClaimSupplementalInformation.Raw[] | null;
        schema_instances?: SchemaInstance.Raw[] | null;
        existing_medications?: Medication.Raw[] | null;
        guarantor?: GuarantorUpdate.Raw | null;
        subscriber_primary?: SubscriberCreate.Raw | null;
        subscriber_secondary?: SubscriberCreate.Raw | null;
        subscriber_tertiary?: SubscriberCreate.Raw | null;
        pay_to_address?: StreetAddressLongZip.Raw | null;
        diagnosis_ids?: DiagnosisId.Raw[] | null;
        initial_referring_provider?: InitialReferringProviderUpdate.Raw | null;
        referring_provider?: ReferringProviderUpdate.Raw | null;
        patient?: PatientUpdate.Raw | null;
        rendering_provider?: RenderingProviderUpdate.Raw | null;
        service_facility?: EncounterServiceFacilityUpdate.Raw | null;
        supervising_provider?: SupervisingProviderUpdate.Raw | null;
        billing_provider?: BillingProviderUpdate.Raw | null;
        place_of_service_code_as_submitted?: FacilityTypeCode.Raw | null;
    }
}
