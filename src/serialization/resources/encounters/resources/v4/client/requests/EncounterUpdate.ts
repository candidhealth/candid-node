/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../index";
import * as CandidApi from "../../../../../../../api/index";
import * as core from "../../../../../../../core";
import { DiagnosisId } from "../../../../../diagnoses/types/DiagnosisId";
import { FacilityTypeCode } from "../../../../../commons/types/FacilityTypeCode";
import { EncounterOptional } from "../../types/EncounterOptional";

export const EncounterUpdate: core.serialization.Schema<
    serializers.encounters.v4.EncounterUpdate.Raw,
    CandidApi.encounters.v4.EncounterUpdate
> = core.serialization
    .object({
        diagnosisIds: core.serialization.property("diagnosis_ids", core.serialization.list(DiagnosisId).optional()),
        placeOfServiceCodeAsSubmitted: core.serialization.property(
            "place_of_service_code_as_submitted",
            FacilityTypeCode.optional()
        ),
    })
    .extend(EncounterOptional);

export declare namespace EncounterUpdate {
    interface Raw extends EncounterOptional.Raw {
        diagnosis_ids?: DiagnosisId.Raw[] | null;
        place_of_service_code_as_submitted?: FacilityTypeCode.Raw | null;
    }
}
