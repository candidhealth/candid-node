/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { EncounterExternalIdUniquenessErrorType } from "../types/EncounterExternalIdUniquenessErrorType";
import { EncounterPatientControlNumberUniquenessErrorType } from "../types/EncounterPatientControlNumberUniquenessErrorType";
import { EntityNotFoundErrorMessage } from "../../../../commons/types/EntityNotFoundErrorMessage";
import { UnauthorizedErrorMessage } from "../../../../commons/types/UnauthorizedErrorMessage";
import { EncounterGuarantorMissingContactInfoErrorType } from "../types/EncounterGuarantorMissingContactInfoErrorType";
import { RequestValidationError } from "../../../../commons/types/RequestValidationError";
import { CashPayPayerErrorMessage } from "../types/CashPayPayerErrorMessage";
import { SchemaInstanceValidationFailure } from "../types/SchemaInstanceValidationFailure";
import { InvalidTagNamesErrorType } from "../types/InvalidTagNamesErrorType";
import { PayerPlanGroupPayerDoesNotMatchInsuranceCardError } from "../types/PayerPlanGroupPayerDoesNotMatchInsuranceCardError";
import { EncounterRenderingOrAttendingProviderRequiredError } from "../types/EncounterRenderingOrAttendingProviderRequiredError";

export const Error: core.serialization.Schema<
    serializers.encounters.v4.createUniversal.Error.Raw,
    CandidApi.encounters.v4.createUniversal.Error
> = core.serialization
    .union("errorName", {
        EncounterExternalIdUniquenessError: core.serialization.object({
            content: EncounterExternalIdUniquenessErrorType,
        }),
        EncounterPatientControlNumberUniquenessError: core.serialization.object({
            content: EncounterPatientControlNumberUniquenessErrorType,
        }),
        EntityNotFoundError: core.serialization.object({
            content: EntityNotFoundErrorMessage,
        }),
        UnauthorizedError: core.serialization.object({
            content: UnauthorizedErrorMessage,
        }),
        EncounterGuarantorMissingContactInfoError: core.serialization.object({
            content: EncounterGuarantorMissingContactInfoErrorType,
        }),
        HttpRequestValidationsError: core.serialization.object({
            content: core.serialization.list(RequestValidationError),
        }),
        CashPayPayerError: core.serialization.object({
            content: CashPayPayerErrorMessage,
        }),
        SchemaInstanceValidationHttpFailure: core.serialization.object({
            content: SchemaInstanceValidationFailure,
        }),
        InvalidTagNamesError: core.serialization.object({
            content: InvalidTagNamesErrorType,
        }),
        HttpRequestValidationError: core.serialization.object({
            content: RequestValidationError,
        }),
        PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError: core.serialization.object({
            content: PayerPlanGroupPayerDoesNotMatchInsuranceCardError,
        }),
        EncounterRenderingOrAttendingProviderRequired: core.serialization.object({
            content: EncounterRenderingOrAttendingProviderRequiredError,
        }),
    })
    .transform<CandidApi.encounters.v4.createUniversal.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "EncounterExternalIdUniquenessError":
                    return CandidApi.encounters.v4.createUniversal.Error.encounterExternalIdUniquenessError(
                        value.content,
                    );
                case "EncounterPatientControlNumberUniquenessError":
                    return CandidApi.encounters.v4.createUniversal.Error.encounterPatientControlNumberUniquenessError(
                        value.content,
                    );
                case "EntityNotFoundError":
                    return CandidApi.encounters.v4.createUniversal.Error.entityNotFoundError(value.content);
                case "UnauthorizedError":
                    return CandidApi.encounters.v4.createUniversal.Error.unauthorizedError(value.content);
                case "EncounterGuarantorMissingContactInfoError":
                    return CandidApi.encounters.v4.createUniversal.Error.encounterGuarantorMissingContactInfoError(
                        value.content,
                    );
                case "HttpRequestValidationsError":
                    return CandidApi.encounters.v4.createUniversal.Error.httpRequestValidationsError(value.content);
                case "CashPayPayerError":
                    return CandidApi.encounters.v4.createUniversal.Error.cashPayPayerError(value.content);
                case "SchemaInstanceValidationHttpFailure":
                    return CandidApi.encounters.v4.createUniversal.Error.schemaInstanceValidationHttpFailure(
                        value.content,
                    );
                case "InvalidTagNamesError":
                    return CandidApi.encounters.v4.createUniversal.Error.invalidTagNamesError(value.content);
                case "HttpRequestValidationError":
                    return CandidApi.encounters.v4.createUniversal.Error.httpRequestValidationError(value.content);
                case "PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError":
                    return CandidApi.encounters.v4.createUniversal.Error.payerPlanGroupPayerDoesNotMatchInsuranceCardHttpError(
                        value.content,
                    );
                case "EncounterRenderingOrAttendingProviderRequired":
                    return CandidApi.encounters.v4.createUniversal.Error.encounterRenderingOrAttendingProviderRequired(
                        value.content,
                    );
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    export type Raw =
        | Error.EncounterExternalIdUniquenessError
        | Error.EncounterPatientControlNumberUniquenessError
        | Error.EntityNotFoundError
        | Error.UnauthorizedError
        | Error.EncounterGuarantorMissingContactInfoError
        | Error.HttpRequestValidationsError
        | Error.CashPayPayerError
        | Error.SchemaInstanceValidationHttpFailure
        | Error.InvalidTagNamesError
        | Error.HttpRequestValidationError
        | Error.PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError
        | Error.EncounterRenderingOrAttendingProviderRequired;

    export interface EncounterExternalIdUniquenessError {
        errorName: "EncounterExternalIdUniquenessError";
        content: EncounterExternalIdUniquenessErrorType.Raw;
    }

    export interface EncounterPatientControlNumberUniquenessError {
        errorName: "EncounterPatientControlNumberUniquenessError";
        content: EncounterPatientControlNumberUniquenessErrorType.Raw;
    }

    export interface EntityNotFoundError {
        errorName: "EntityNotFoundError";
        content: EntityNotFoundErrorMessage.Raw;
    }

    export interface UnauthorizedError {
        errorName: "UnauthorizedError";
        content: UnauthorizedErrorMessage.Raw;
    }

    export interface EncounterGuarantorMissingContactInfoError {
        errorName: "EncounterGuarantorMissingContactInfoError";
        content: EncounterGuarantorMissingContactInfoErrorType.Raw;
    }

    export interface HttpRequestValidationsError {
        errorName: "HttpRequestValidationsError";
        content: RequestValidationError.Raw[];
    }

    export interface CashPayPayerError {
        errorName: "CashPayPayerError";
        content: CashPayPayerErrorMessage.Raw;
    }

    export interface SchemaInstanceValidationHttpFailure {
        errorName: "SchemaInstanceValidationHttpFailure";
        content: SchemaInstanceValidationFailure.Raw;
    }

    export interface InvalidTagNamesError {
        errorName: "InvalidTagNamesError";
        content: InvalidTagNamesErrorType.Raw;
    }

    export interface HttpRequestValidationError {
        errorName: "HttpRequestValidationError";
        content: RequestValidationError.Raw;
    }

    export interface PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError {
        errorName: "PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError";
        content: PayerPlanGroupPayerDoesNotMatchInsuranceCardError.Raw;
    }

    export interface EncounterRenderingOrAttendingProviderRequired {
        errorName: "EncounterRenderingOrAttendingProviderRequired";
        content: EncounterRenderingOrAttendingProviderRequiredError.Raw;
    }
}
