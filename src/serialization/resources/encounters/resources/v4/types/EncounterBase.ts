/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const EncounterBase: core.serialization.ObjectSchema<
    serializers.encounters.v4.EncounterBase.Raw,
    CandidApi.encounters.v4.EncounterBase
> = core.serialization.object({
    externalId: core.serialization.property(
        "external_id",
        core.serialization.lazy(async () => (await import("../../../../..")).EncounterExternalId).optional()
    ),
    dateOfService: core.serialization.property(
        "date_of_service",
        core.serialization.lazy(async () => (await import("../../../../..")).Date_)
    ),
    endDateOfService: core.serialization.property(
        "end_date_of_service",
        core.serialization.lazy(async () => (await import("../../../../..")).Date_).optional()
    ),
    priorAuthorizationNumber: core.serialization.property(
        "prior_authorization_number",
        core.serialization
            .lazy(async () => (await import("../../../../..")).encounters.v4.PriorAuthorizationNumber)
            .optional()
    ),
    patientAuthorizedRelease: core.serialization.property("patient_authorized_release", core.serialization.boolean()),
    benefitsAssignedToProvider: core.serialization.property(
        "benefits_assigned_to_provider",
        core.serialization.boolean()
    ),
    providerAcceptsAssignment: core.serialization.property("provider_accepts_assignment", core.serialization.boolean()),
    appointmentType: core.serialization.property("appointment_type", core.serialization.string().optional()),
    doNotBill: core.serialization.property("do_not_bill", core.serialization.boolean().optional()),
    existingMedications: core.serialization.property(
        "existing_medications",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).encounters.v4.Medication))
            .optional()
    ),
    vitals: core.serialization.lazyObject(async () => (await import("../../../../..")).encounters.v4.Vitals).optional(),
    interventions: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../../../..")).encounters.v4.Intervention))
        .optional(),
    payToAddress: core.serialization.property(
        "pay_to_address",
        core.serialization.lazyObject(async () => (await import("../../../../..")).StreetAddressLongZip).optional()
    ),
    synchronicity: core.serialization
        .lazy(async () => (await import("../../../../..")).encounters.v4.SynchronicityType)
        .optional(),
});

export declare namespace EncounterBase {
    interface Raw {
        external_id?: serializers.EncounterExternalId.Raw | null;
        date_of_service: serializers.Date_.Raw;
        end_date_of_service?: serializers.Date_.Raw | null;
        prior_authorization_number?: serializers.encounters.v4.PriorAuthorizationNumber.Raw | null;
        patient_authorized_release: boolean;
        benefits_assigned_to_provider: boolean;
        provider_accepts_assignment: boolean;
        appointment_type?: string | null;
        do_not_bill?: boolean | null;
        existing_medications?: serializers.encounters.v4.Medication.Raw[] | null;
        vitals?: serializers.encounters.v4.Vitals.Raw | null;
        interventions?: serializers.encounters.v4.Intervention.Raw[] | null;
        pay_to_address?: serializers.StreetAddressLongZip.Raw | null;
        synchronicity?: serializers.encounters.v4.SynchronicityType.Raw | null;
    }
}
