/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { EncounterExternalId } from "../../../../commons/types/EncounterExternalId";
import { PriorAuthorizationNumber } from "./PriorAuthorizationNumber";
import { Medication } from "./Medication";
import { Vitals } from "./Vitals";
import { Intervention } from "./Intervention";
import { StreetAddressLongZip } from "../../../../commons/types/StreetAddressLongZip";
import { SynchronicityType } from "./SynchronicityType";
import { BillableStatusType } from "./BillableStatusType";
import { ResponsiblePartyType } from "./ResponsiblePartyType";
import { ServiceAuthorizationExceptionCode } from "./ServiceAuthorizationExceptionCode";
import { Date_ } from "../../../../commons/types/Date_";
import { DelayReasonCode } from "../../../../commons/types/DelayReasonCode";

export const EncounterBase: core.serialization.ObjectSchema<
    serializers.encounters.v4.EncounterBase.Raw,
    CandidApi.encounters.v4.EncounterBase
> = core.serialization.object({
    externalId: core.serialization.property("external_id", EncounterExternalId),
    priorAuthorizationNumber: core.serialization.property(
        "prior_authorization_number",
        PriorAuthorizationNumber.optional()
    ),
    patientAuthorizedRelease: core.serialization.property("patient_authorized_release", core.serialization.boolean()),
    benefitsAssignedToProvider: core.serialization.property(
        "benefits_assigned_to_provider",
        core.serialization.boolean()
    ),
    providerAcceptsAssignment: core.serialization.property("provider_accepts_assignment", core.serialization.boolean()),
    appointmentType: core.serialization.property("appointment_type", core.serialization.string().optional()),
    existingMedications: core.serialization.property(
        "existing_medications",
        core.serialization.list(Medication).optional()
    ),
    vitals: Vitals.optional(),
    interventions: core.serialization.list(Intervention).optional(),
    payToAddress: core.serialization.property("pay_to_address", StreetAddressLongZip.optional()),
    synchronicity: SynchronicityType.optional(),
    billableStatus: core.serialization.property("billable_status", BillableStatusType),
    responsibleParty: core.serialization.property("responsible_party", ResponsiblePartyType),
    additionalInformation: core.serialization.property(
        "additional_information",
        core.serialization.string().optional()
    ),
    serviceAuthorizationExceptionCode: core.serialization.property(
        "service_authorization_exception_code",
        ServiceAuthorizationExceptionCode.optional()
    ),
    admissionDate: core.serialization.property("admission_date", Date_.optional()),
    dischargeDate: core.serialization.property("discharge_date", Date_.optional()),
    onsetOfCurrentIllnessOrSymptomDate: core.serialization.property(
        "onset_of_current_illness_or_symptom_date",
        Date_.optional()
    ),
    lastMenstrualPeriodDate: core.serialization.property("last_menstrual_period_date", Date_.optional()),
    delayReasonCode: core.serialization.property("delay_reason_code", DelayReasonCode.optional()),
});

export declare namespace EncounterBase {
    interface Raw {
        external_id: EncounterExternalId.Raw;
        prior_authorization_number?: PriorAuthorizationNumber.Raw | null;
        patient_authorized_release: boolean;
        benefits_assigned_to_provider: boolean;
        provider_accepts_assignment: boolean;
        appointment_type?: string | null;
        existing_medications?: Medication.Raw[] | null;
        vitals?: Vitals.Raw | null;
        interventions?: Intervention.Raw[] | null;
        pay_to_address?: StreetAddressLongZip.Raw | null;
        synchronicity?: SynchronicityType.Raw | null;
        billable_status: BillableStatusType.Raw;
        responsible_party: ResponsiblePartyType.Raw;
        additional_information?: string | null;
        service_authorization_exception_code?: ServiceAuthorizationExceptionCode.Raw | null;
        admission_date?: Date_.Raw | null;
        discharge_date?: Date_.Raw | null;
        onset_of_current_illness_or_symptom_date?: Date_.Raw | null;
        last_menstrual_period_date?: Date_.Raw | null;
        delay_reason_code?: DelayReasonCode.Raw | null;
    }
}
