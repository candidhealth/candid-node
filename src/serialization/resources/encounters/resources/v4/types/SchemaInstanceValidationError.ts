/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { MultipleInstancesForSchemaError } from "./MultipleInstancesForSchemaError";
import { ValueDoesNotMatchKeyTypeError } from "./ValueDoesNotMatchKeyTypeError";
import { KeyDoesNotExistError } from "./KeyDoesNotExistError";
import { SchemaDoesNotExistError } from "./SchemaDoesNotExistError";
import { SchemaUnauthorizedAccessError } from "./SchemaUnauthorizedAccessError";

export const SchemaInstanceValidationError: core.serialization.Schema<
    serializers.encounters.v4.SchemaInstanceValidationError.Raw,
    CandidApi.encounters.v4.SchemaInstanceValidationError
> = core.serialization
    .union("type", {
        multiple_instances_for_schema: MultipleInstancesForSchemaError,
        value_does_not_match_key_type: ValueDoesNotMatchKeyTypeError,
        key_does_not_exist: KeyDoesNotExistError,
        schema_does_not_exist: SchemaDoesNotExistError,
        schema_unauthorized_access: SchemaUnauthorizedAccessError,
    })
    .transform<CandidApi.encounters.v4.SchemaInstanceValidationError>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaInstanceValidationError {
    type Raw =
        | SchemaInstanceValidationError.MultipleInstancesForSchema
        | SchemaInstanceValidationError.ValueDoesNotMatchKeyType
        | SchemaInstanceValidationError.KeyDoesNotExist
        | SchemaInstanceValidationError.SchemaDoesNotExist
        | SchemaInstanceValidationError.SchemaUnauthorizedAccess;

    interface MultipleInstancesForSchema extends MultipleInstancesForSchemaError.Raw {
        type: "multiple_instances_for_schema";
    }

    interface ValueDoesNotMatchKeyType extends ValueDoesNotMatchKeyTypeError.Raw {
        type: "value_does_not_match_key_type";
    }

    interface KeyDoesNotExist extends KeyDoesNotExistError.Raw {
        type: "key_does_not_exist";
    }

    interface SchemaDoesNotExist extends SchemaDoesNotExistError.Raw {
        type: "schema_does_not_exist";
    }

    interface SchemaUnauthorizedAccess extends SchemaUnauthorizedAccessError.Raw {
        type: "schema_unauthorized_access";
    }
}
