// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import type * as serializers from "../../../../../index";
import { BillingNote } from "../../../../billingNotes/resources/v2/types/BillingNote";
import { Claim } from "../../../../claims/types/Claim";
import { ChargeCaptureClaimCreationId } from "../../../../commons/types/ChargeCaptureClaimCreationId";
import { EncounterId } from "../../../../commons/types/EncounterId";
import { FacilityTypeCode } from "../../../../commons/types/FacilityTypeCode";
import { LinkUrl } from "../../../../commons/types/LinkUrl";
import { NextResponsibleParty } from "../../../../commons/types/NextResponsibleParty";
import { State } from "../../../../commons/types/State";
import { WorkQueueId } from "../../../../commons/types/WorkQueueId";
import { SchemaInstance } from "../../../../customSchemas/resources/v1/types/SchemaInstance";
import { Diagnosis } from "../../../../diagnoses/types/Diagnosis";
import { EncounterProvider } from "../../../../encounterProviders/resources/v2/types/EncounterProvider";
import { Guarantor } from "../../../../guarantor/resources/v1/types/Guarantor";
import { Patient } from "../../../../individual/types/Patient";
import { Subscriber } from "../../../../individual/types/Subscriber";
import { PatientPayment } from "../../../../patientPayments/resources/v3/types/PatientPayment";
import { EncounterServiceFacility } from "../../../../serviceFacility/types/EncounterServiceFacility";
import { Tag } from "../../../../tags/types/Tag";
import { PatientDischargeStatusCode } from "../../../../x12/resources/v1/types/PatientDischargeStatusCode";
import { PointOfOriginForAdmissionOrVisitCode } from "../../../../x12/resources/v1/types/PointOfOriginForAdmissionOrVisitCode";
import { TypeOfAdmissionOrVisitCode } from "../../../../x12/resources/v1/types/TypeOfAdmissionOrVisitCode";
import { TypeOfBillComposite } from "../../../../x12/resources/v1/types/TypeOfBillComposite";
import { ClaimSupplementalInformation } from "./ClaimSupplementalInformation";
import { ClinicalNoteCategory } from "./ClinicalNoteCategory";
import { CodingAttributionType } from "./CodingAttributionType";
import { EncounterBase } from "./EncounterBase";
import { EncounterOwnerOfNextActionType } from "./EncounterOwnerOfNextActionType";
import { EncounterSubmissionExpectation } from "./EncounterSubmissionExpectation";
import { EncounterSubmissionOriginType } from "./EncounterSubmissionOriginType";
import { EpsdtReferral } from "./EpsdtReferral";
import { PatientHistoryCategory } from "./PatientHistoryCategory";
import { PriorAuthorizationNumber } from "./PriorAuthorizationNumber";
import { ResponsiblePartyType } from "./ResponsiblePartyType";

export const Encounter: core.serialization.ObjectSchema<
    serializers.encounters.v4.Encounter.Raw,
    CandidApi.encounters.v4.Encounter
> = core.serialization
    .object({
        accidentStateOrProvinceCode: core.serialization.property("accident_state_or_province_code", State.optional()),
        claimCreationId: core.serialization.property("claim_creation_id", ChargeCaptureClaimCreationId.optional()),
        patientControlNumber: core.serialization.property(
            "patient_control_number",
            core.serialization.string().optional(),
        ),
        encounterId: core.serialization.property("encounter_id", EncounterId),
        claims: core.serialization.list(Claim),
        patient: Patient,
        guarantor: Guarantor.optional(),
        billingProvider: core.serialization.property("billing_provider", EncounterProvider),
        renderingProvider: core.serialization.property("rendering_provider", EncounterProvider),
        attendingProvider: core.serialization.property("attending_provider", EncounterProvider.optional()),
        admissionHour: core.serialization.property("admission_hour", core.serialization.number().optional()),
        admissionTypeCode: core.serialization.property("admission_type_code", TypeOfAdmissionOrVisitCode.optional()),
        admissionSourceCode: core.serialization.property(
            "admission_source_code",
            PointOfOriginForAdmissionOrVisitCode.optional(),
        ),
        dischargeHour: core.serialization.property("discharge_hour", core.serialization.number().optional()),
        dischargeStatus: core.serialization.property("discharge_status", PatientDischargeStatusCode.optional()),
        operatingProvider: core.serialization.property("operating_provider", EncounterProvider.optional()),
        otherOperatingProvider: core.serialization.property("other_operating_provider", EncounterProvider.optional()),
        submissionExpectation: core.serialization.property(
            "submission_expectation",
            EncounterSubmissionExpectation.optional(),
        ),
        typeOfBill: core.serialization.property("type_of_bill", TypeOfBillComposite.optional()),
        referringProvider: core.serialization.property("referring_provider", EncounterProvider.optional()),
        initialReferringProvider: core.serialization.property(
            "initial_referring_provider",
            EncounterProvider.optional(),
        ),
        supervisingProvider: core.serialization.property("supervising_provider", EncounterProvider.optional()),
        serviceFacility: core.serialization.property("service_facility", EncounterServiceFacility),
        subscriberPrimary: core.serialization.property("subscriber_primary", Subscriber.optional()),
        subscriberSecondary: core.serialization.property("subscriber_secondary", Subscriber.optional()),
        subscriberTertiary: core.serialization.property("subscriber_tertiary", Subscriber.optional()),
        priorAuthorizationNumber: core.serialization.property(
            "prior_authorization_number",
            PriorAuthorizationNumber.optional(),
        ),
        responsibleParty: core.serialization.property("responsible_party", ResponsiblePartyType),
        url: LinkUrl,
        diagnoses: core.serialization.list(Diagnosis),
        clinicalNotes: core.serialization.property("clinical_notes", core.serialization.list(ClinicalNoteCategory)),
        billingNotes: core.serialization.property("billing_notes", core.serialization.list(BillingNote).optional()),
        placeOfServiceCode: core.serialization.property("place_of_service_code", FacilityTypeCode.optional()),
        placeOfServiceCodeAsSubmitted: core.serialization.property(
            "place_of_service_code_as_submitted",
            FacilityTypeCode.optional(),
        ),
        patientHistories: core.serialization.property(
            "patient_histories",
            core.serialization.list(PatientHistoryCategory),
        ),
        patientPayments: core.serialization.property("patient_payments", core.serialization.list(PatientPayment)),
        tags: core.serialization.list(Tag),
        codingAttribution: core.serialization.property("coding_attribution", CodingAttributionType.optional()),
        workQueueId: core.serialization.property("work_queue_id", WorkQueueId.optional()),
        workQueueMembershipActivatedAt: core.serialization.property(
            "work_queue_membership_activated_at",
            core.serialization.date().optional(),
        ),
        ownerOfNextAction: core.serialization.property("owner_of_next_action", EncounterOwnerOfNextActionType),
        submissionOrigin: core.serialization.property("submission_origin", EncounterSubmissionOriginType),
        schemaInstances: core.serialization.property("schema_instances", core.serialization.list(SchemaInstance)),
        referralNumber: core.serialization.property("referral_number", core.serialization.string().optional()),
        epsdtReferral: core.serialization.property("epsdt_referral", EpsdtReferral.optional()),
        claimSupplementalInformation: core.serialization.property(
            "claim_supplemental_information",
            core.serialization.list(ClaimSupplementalInformation).optional(),
        ),
        secondaryPayerCarrierCode: core.serialization.property(
            "secondary_payer_carrier_code",
            core.serialization.string().optional(),
        ),
        lastSubmittedAt: core.serialization.property("last_submitted_at", core.serialization.date().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date()),
        nextResponsibleParty: core.serialization.property("next_responsible_party", NextResponsibleParty.optional()),
    })
    .extend(EncounterBase);

export declare namespace Encounter {
    export interface Raw extends EncounterBase.Raw {
        accident_state_or_province_code?: State.Raw | null;
        claim_creation_id?: ChargeCaptureClaimCreationId.Raw | null;
        patient_control_number?: string | null;
        encounter_id: EncounterId.Raw;
        claims: Claim.Raw[];
        patient: Patient.Raw;
        guarantor?: Guarantor.Raw | null;
        billing_provider: EncounterProvider.Raw;
        rendering_provider: EncounterProvider.Raw;
        attending_provider?: EncounterProvider.Raw | null;
        admission_hour?: number | null;
        admission_type_code?: TypeOfAdmissionOrVisitCode.Raw | null;
        admission_source_code?: PointOfOriginForAdmissionOrVisitCode.Raw | null;
        discharge_hour?: number | null;
        discharge_status?: PatientDischargeStatusCode.Raw | null;
        operating_provider?: EncounterProvider.Raw | null;
        other_operating_provider?: EncounterProvider.Raw | null;
        submission_expectation?: EncounterSubmissionExpectation.Raw | null;
        type_of_bill?: TypeOfBillComposite.Raw | null;
        referring_provider?: EncounterProvider.Raw | null;
        initial_referring_provider?: EncounterProvider.Raw | null;
        supervising_provider?: EncounterProvider.Raw | null;
        service_facility: EncounterServiceFacility.Raw;
        subscriber_primary?: Subscriber.Raw | null;
        subscriber_secondary?: Subscriber.Raw | null;
        subscriber_tertiary?: Subscriber.Raw | null;
        prior_authorization_number?: PriorAuthorizationNumber.Raw | null;
        responsible_party: ResponsiblePartyType.Raw;
        url: LinkUrl.Raw;
        diagnoses: Diagnosis.Raw[];
        clinical_notes: ClinicalNoteCategory.Raw[];
        billing_notes?: BillingNote.Raw[] | null;
        place_of_service_code?: FacilityTypeCode.Raw | null;
        place_of_service_code_as_submitted?: FacilityTypeCode.Raw | null;
        patient_histories: PatientHistoryCategory.Raw[];
        patient_payments: PatientPayment.Raw[];
        tags: Tag.Raw[];
        coding_attribution?: CodingAttributionType.Raw | null;
        work_queue_id?: WorkQueueId.Raw | null;
        work_queue_membership_activated_at?: string | null;
        owner_of_next_action: EncounterOwnerOfNextActionType.Raw;
        submission_origin: EncounterSubmissionOriginType.Raw;
        schema_instances: SchemaInstance.Raw[];
        referral_number?: string | null;
        epsdt_referral?: EpsdtReferral.Raw | null;
        claim_supplemental_information?: ClaimSupplementalInformation.Raw[] | null;
        secondary_payer_carrier_code?: string | null;
        last_submitted_at?: string | null;
        created_at: string;
        next_responsible_party?: NextResponsibleParty.Raw | null;
    }
}
