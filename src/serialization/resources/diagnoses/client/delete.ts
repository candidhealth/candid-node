// This file was auto-generated by Fern from our API Definition.

import * as CandidApi from "../../../../api/index";
import * as core from "../../../../core";
import type * as serializers from "../../../index";
import { DiagnosisNotFoundError } from "../types/DiagnosisNotFoundError";
import { ServiceLinesMustHaveAtLeastOneDiagnosisError } from "../types/ServiceLinesMustHaveAtLeastOneDiagnosisError";

export const Error: core.serialization.Schema<
    serializers.diagnoses.delete.Error.Raw,
    CandidApi.diagnoses.delete.Error
> = core.serialization
    .union("errorName", {
        DiagnosisNotFoundHTTPError: core.serialization.object({
            content: DiagnosisNotFoundError,
        }),
        ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError: core.serialization.object({
            content: ServiceLinesMustHaveAtLeastOneDiagnosisError,
        }),
    })
    .transform<CandidApi.diagnoses.delete.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "DiagnosisNotFoundHTTPError":
                    return CandidApi.diagnoses.delete.Error.diagnosisNotFoundHttpError(value.content);
                case "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError":
                    return CandidApi.diagnoses.delete.Error.serviceLinesMustHaveAtLeastOneDiagnosisHttpError(
                        value.content,
                    );
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    export type Raw = Error.DiagnosisNotFoundHttpError | Error.ServiceLinesMustHaveAtLeastOneDiagnosisHttpError;

    export interface DiagnosisNotFoundHttpError {
        errorName: "DiagnosisNotFoundHTTPError";
        content: DiagnosisNotFoundError.Raw;
    }

    export interface ServiceLinesMustHaveAtLeastOneDiagnosisHttpError {
        errorName: "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError";
        content: ServiceLinesMustHaveAtLeastOneDiagnosisError.Raw;
    }
}
