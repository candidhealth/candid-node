// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import type * as serializers from "../../../../../index";
import { BillingProviderCommercialLicenseType } from "../../../../commons/types/BillingProviderCommercialLicenseType";
import { StreetAddressShortZipOptional } from "../../../../commons/types/StreetAddressShortZipOptional";
import { EncounterProviderBase } from "./EncounterProviderBase";

export const BillingProviderUpdateWithOptionalAddress: core.serialization.ObjectSchema<
    serializers.encounterProviders.v2.BillingProviderUpdateWithOptionalAddress.Raw,
    CandidApi.encounterProviders.v2.BillingProviderUpdateWithOptionalAddress
> = core.serialization
    .object({
        address: StreetAddressShortZipOptional.optional(),
        taxId: core.serialization.property("tax_id", core.serialization.string().optional()),
        npi: core.serialization.string().optional(),
        taxonomyCode: core.serialization.property("taxonomy_code", core.serialization.string().optional()),
        providerCommercialLicenseType: core.serialization.property(
            "provider_commercial_license_type",
            BillingProviderCommercialLicenseType.optional(),
        ),
    })
    .extend(EncounterProviderBase);

export declare namespace BillingProviderUpdateWithOptionalAddress {
    export interface Raw extends EncounterProviderBase.Raw {
        address?: StreetAddressShortZipOptional.Raw | null;
        tax_id?: string | null;
        npi?: string | null;
        taxonomy_code?: string | null;
        provider_commercial_license_type?: BillingProviderCommercialLicenseType.Raw | null;
    }
}
