/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { MatchPayer } from "./MatchPayer";
import { MatchGeo } from "./MatchGeo";
import { MatchProvider } from "./MatchProvider";
import { MatchDate } from "./MatchDate";
import { MatchCptCode } from "./MatchCptCode";
import { MatchModifiers } from "./MatchModifiers";
import { MatchLicenseType } from "./MatchLicenseType";
import { MatchFacilityTypeCode } from "./MatchFacilityTypeCode";
import { MatchNetworkTypes } from "./MatchNetworkTypes";

export const DimensionMatch: core.serialization.ObjectSchema<
    serializers.feeSchedules.v3.DimensionMatch.Raw,
    CandidApi.feeSchedules.v3.DimensionMatch
> = core.serialization.object({
    payer: MatchPayer,
    geography: MatchGeo,
    organizationBillingProvider: core.serialization.property("organization_billing_provider", MatchProvider),
    dateOfService: core.serialization.property("date_of_service", MatchDate),
    cptCode: core.serialization.property("cpt_code", MatchCptCode),
    modifiers: MatchModifiers,
    licenseType: core.serialization.property("license_type", MatchLicenseType),
    facilityTypeCode: core.serialization.property("facility_type_code", MatchFacilityTypeCode),
    networkTypes: core.serialization.property("network_types", MatchNetworkTypes),
});

export declare namespace DimensionMatch {
    export interface Raw {
        payer: MatchPayer.Raw;
        geography: MatchGeo.Raw;
        organization_billing_provider: MatchProvider.Raw;
        date_of_service: MatchDate.Raw;
        cpt_code: MatchCptCode.Raw;
        modifiers: MatchModifiers.Raw;
        license_type: MatchLicenseType.Raw;
        facility_type_code: MatchFacilityTypeCode.Raw;
        network_types: MatchNetworkTypes.Raw;
    }
}
