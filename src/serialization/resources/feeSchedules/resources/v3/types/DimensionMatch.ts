/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const DimensionMatch: core.serialization.ObjectSchema<
    serializers.feeSchedules.v3.DimensionMatch.Raw,
    CandidApi.feeSchedules.v3.DimensionMatch
> = core.serialization.object({
    payer: core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchPayer),
    geography: core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchGeo),
    organizationBillingProvider: core.serialization.property(
        "organization_billing_provider",
        core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchProvider)
    ),
    dateOfService: core.serialization.property(
        "date_of_service",
        core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchDate)
    ),
    cptCode: core.serialization.property(
        "cpt_code",
        core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchCptCode)
    ),
    modifiers: core.serialization.lazyObject(
        async () => (await import("../../../../..")).feeSchedules.v3.MatchModifiers
    ),
    licenseType: core.serialization.property(
        "license_type",
        core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchLicenseType)
    ),
    facilityTypeCode: core.serialization.property(
        "facility_type_code",
        core.serialization.lazyObject(
            async () => (await import("../../../../..")).feeSchedules.v3.MatchFacilityTypeCode
        )
    ),
    networkTypes: core.serialization.property(
        "network_types",
        core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.MatchNetworkTypes)
    ),
});

export declare namespace DimensionMatch {
    interface Raw {
        payer: serializers.feeSchedules.v3.MatchPayer.Raw;
        geography: serializers.feeSchedules.v3.MatchGeo.Raw;
        organization_billing_provider: serializers.feeSchedules.v3.MatchProvider.Raw;
        date_of_service: serializers.feeSchedules.v3.MatchDate.Raw;
        cpt_code: serializers.feeSchedules.v3.MatchCptCode.Raw;
        modifiers: serializers.feeSchedules.v3.MatchModifiers.Raw;
        license_type: serializers.feeSchedules.v3.MatchLicenseType.Raw;
        facility_type_code: serializers.feeSchedules.v3.MatchFacilityTypeCode.Raw;
        network_types: serializers.feeSchedules.v3.MatchNetworkTypes.Raw;
    }
}
