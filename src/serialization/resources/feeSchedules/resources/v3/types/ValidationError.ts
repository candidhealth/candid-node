/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const ValidationError: core.serialization.Schema<
    serializers.feeSchedules.v3.ValidationError.Raw,
    CandidApi.feeSchedules.v3.ValidationError
> = core.serialization
    .union("type", {
        overlapping_rate_entries: core.serialization.lazyObject(
            async () => (await import("../../../../..")).feeSchedules.v3.OverlappingRateEntriesError
        ),
        version_conflict: core.serialization.lazyObject(
            async () => (await import("../../../../..")).EntityConflictErrorMessage
        ),
        organization_provider_not_found: core.serialization.lazyObject(
            async () => (await import("../../../../..")).EntityNotFoundErrorMessage
        ),
        duplicate_rate: core.serialization.object({}),
        empty_entries: core.serialization.object({}),
    })
    .transform<CandidApi.feeSchedules.v3.ValidationError>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ValidationError {
    type Raw =
        | ValidationError.OverlappingRateEntries
        | ValidationError.VersionConflict
        | ValidationError.OrganizationProviderNotFound
        | ValidationError.DuplicateRate
        | ValidationError.EmptyEntries;

    interface OverlappingRateEntries extends serializers.feeSchedules.v3.OverlappingRateEntriesError.Raw {
        type: "overlapping_rate_entries";
    }

    interface VersionConflict extends serializers.EntityConflictErrorMessage.Raw {
        type: "version_conflict";
    }

    interface OrganizationProviderNotFound extends serializers.EntityNotFoundErrorMessage.Raw {
        type: "organization_provider_not_found";
    }

    interface DuplicateRate {
        type: "duplicate_rate";
    }

    interface EmptyEntries {
        type: "empty_entries";
    }
}
