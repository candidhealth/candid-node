/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const Response: core.serialization.Schema<
    serializers.feeSchedules.v3.uploadFeeSchedule.Response.Raw,
    CandidApi.feeSchedules.v3.Rate[]
> = core.serialization.list(
    core.serialization.lazyObject(async () => (await import("../../../../..")).feeSchedules.v3.Rate)
);

export declare namespace Response {
    type Raw = serializers.feeSchedules.v3.Rate.Raw[];
}

export const Error: core.serialization.Schema<
    serializers.feeSchedules.v3.uploadFeeSchedule.Error.Raw,
    CandidApi.feeSchedules.v3.uploadFeeSchedule.Error
> = core.serialization
    .union("errorName", {
        FeeScheduleValidationHttpError: core.serialization.object({
            content: core.serialization.list(
                core.serialization.lazyObject(
                    async () => (await import("../../../../..")).feeSchedules.v3.RateUploadWithPossibleErrors
                )
            ),
        }),
    })
    .transform<CandidApi.feeSchedules.v3.uploadFeeSchedule.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "FeeScheduleValidationHttpError":
                    return CandidApi.feeSchedules.v3.uploadFeeSchedule.Error.feeScheduleValidationHttpError(
                        value.content
                    );
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw = Error.FeeScheduleValidationHttpError;

    interface FeeScheduleValidationHttpError {
        errorName: "FeeScheduleValidationHttpError";
        content: serializers.feeSchedules.v3.RateUploadWithPossibleErrors.Raw[];
    }
}
