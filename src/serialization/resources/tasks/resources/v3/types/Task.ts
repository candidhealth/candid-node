/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const Task: core.serialization.ObjectSchema<serializers.tasks.v3.Task.Raw, CandidApi.tasks.v3.Task> =
    core.serialization.object({
        taskId: core.serialization.property(
            "task_id",
            core.serialization.lazy(async () => (await import("../../../../..")).TaskId)
        ),
        encounterId: core.serialization.property(
            "encounter_id",
            core.serialization.lazy(async () => (await import("../../../../..")).EncounterId)
        ),
        taskType: core.serialization.property(
            "task_type",
            core.serialization.lazy(async () => (await import("../../../../..")).tasks.TaskType)
        ),
        description: core.serialization.string(),
        blocksClaimSubmission: core.serialization.property("blocks_claim_submission", core.serialization.boolean()),
        externalId: core.serialization.property("external_id", core.serialization.string()),
        patientName: core.serialization.property("patient_name", core.serialization.string()),
        patientExternalId: core.serialization.property("patient_external_id", core.serialization.string()),
        payerName: core.serialization.property("payer_name", core.serialization.string().optional()),
        payerId: core.serialization.property("payer_id", core.serialization.string().optional()),
        status: core.serialization.lazy(async () => (await import("../../../../..")).tasks.TaskStatus),
        notes: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).tasks.v3.TaskNote)
        ),
        createdAt: core.serialization.property("created_at", core.serialization.date()),
        updatedAt: core.serialization.property("updated_at", core.serialization.date()),
        aggUpdatedAt: core.serialization.property("agg_updated_at", core.serialization.date()),
        dateOfService: core.serialization.property("date_of_service", core.serialization.string()),
        assignments: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).tasks.v3.TaskAssignment)
        ),
        category: core.serialization.lazy(async () => (await import("../../../../..")).tasks.TaskCategory).optional(),
    });

export declare namespace Task {
    interface Raw {
        task_id: serializers.TaskId.Raw;
        encounter_id: serializers.EncounterId.Raw;
        task_type: serializers.tasks.TaskType.Raw;
        description: string;
        blocks_claim_submission: boolean;
        external_id: string;
        patient_name: string;
        patient_external_id: string;
        payer_name?: string | null;
        payer_id?: string | null;
        status: serializers.tasks.TaskStatus.Raw;
        notes: serializers.tasks.v3.TaskNote.Raw[];
        created_at: string;
        updated_at: string;
        agg_updated_at: string;
        date_of_service: string;
        assignments: serializers.tasks.v3.TaskAssignment.Raw[];
        category?: serializers.tasks.TaskCategory.Raw | null;
    }
}
