/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const TaskCreateV3: core.serialization.ObjectSchema<
    serializers.tasks.v3.TaskCreateV3.Raw,
    CandidApi.tasks.v3.TaskCreateV3
> = core.serialization.object({
    encounterId: core.serialization.property(
        "encounter_id",
        core.serialization.lazy(async () => (await import("../../../../..")).EncounterId)
    ),
    taskType: core.serialization.property(
        "task_type",
        core.serialization.lazy(async () => (await import("../../../../..")).tasks.TaskType)
    ),
    description: core.serialization.string(),
    blocksClaimSubmission: core.serialization.property(
        "blocks_claim_submission",
        core.serialization.boolean().optional()
    ),
    assigneeUserId: core.serialization.property(
        "assignee_user_id",
        core.serialization.lazy(async () => (await import("../../../../..")).UserId).optional()
    ),
    category: core.serialization.lazy(async () => (await import("../../../../..")).tasks.TaskCategory).optional(),
    workQueueId: core.serialization.property(
        "work_queue_id",
        core.serialization.lazy(async () => (await import("../../../../..")).WorkQueueId)
    ),
});

export declare namespace TaskCreateV3 {
    interface Raw {
        encounter_id: serializers.EncounterId.Raw;
        task_type: serializers.tasks.TaskType.Raw;
        description: string;
        blocks_claim_submission?: boolean | null;
        assignee_user_id?: serializers.UserId.Raw | null;
        category?: serializers.tasks.TaskCategory.Raw | null;
        work_queue_id: serializers.WorkQueueId.Raw;
    }
}
