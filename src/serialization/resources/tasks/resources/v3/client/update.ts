/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { EntityNotFoundErrorMessage } from "../../../../commons/types/EntityNotFoundErrorMessage";
import { UnauthorizedErrorMessage } from "../../../../commons/types/UnauthorizedErrorMessage";
import { TaskUpdatedToDeprecatedStatusErrorType } from "../types/TaskUpdatedToDeprecatedStatusErrorType";

export const Error: core.serialization.Schema<serializers.tasks.v3.update.Error.Raw, CandidApi.tasks.v3.update.Error> =
    core.serialization
        .union("errorName", {
            EntityNotFoundError: core.serialization.object({
                content: EntityNotFoundErrorMessage,
            }),
            UnauthorizedError: core.serialization.object({
                content: UnauthorizedErrorMessage,
            }),
            TaskUpdatedToDeprecatedStatusError: core.serialization.object({
                content: TaskUpdatedToDeprecatedStatusErrorType,
            }),
        })
        .transform<CandidApi.tasks.v3.update.Error>({
            transform: (value) => {
                switch (value.errorName) {
                    case "EntityNotFoundError":
                        return CandidApi.tasks.v3.update.Error.entityNotFoundError(value.content);
                    case "UnauthorizedError":
                        return CandidApi.tasks.v3.update.Error.unauthorizedError(value.content);
                    case "TaskUpdatedToDeprecatedStatusError":
                        return CandidApi.tasks.v3.update.Error.taskUpdatedToDeprecatedStatusError(value.content);
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace Error {
    type Raw = Error.EntityNotFoundError | Error.UnauthorizedError | Error.TaskUpdatedToDeprecatedStatusError;

    interface EntityNotFoundError {
        errorName: "EntityNotFoundError";
        content: EntityNotFoundErrorMessage.Raw;
    }

    interface UnauthorizedError {
        errorName: "UnauthorizedError";
        content: UnauthorizedErrorMessage.Raw;
    }

    interface TaskUpdatedToDeprecatedStatusError {
        errorName: "TaskUpdatedToDeprecatedStatusError";
        content: TaskUpdatedToDeprecatedStatusErrorType.Raw;
    }
}
