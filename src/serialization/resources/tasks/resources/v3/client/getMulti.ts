/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const Error: core.serialization.Schema<
    serializers.tasks.v3.getMulti.Error.Raw,
    CandidApi.tasks.v3.getMulti.Error
> = core.serialization
    .union("errorName", {
        UnprocessableEntityError: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import("../../../../..")).UnprocessableEntityErrorMessage
            ),
        }),
    })
    .transform<CandidApi.tasks.v3.getMulti.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "UnprocessableEntityError":
                    return CandidApi.tasks.v3.getMulti.Error.unprocessableEntityError(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw = Error.UnprocessableEntityError;

    interface UnprocessableEntityError {
        errorName: "UnprocessableEntityError";
        content: serializers.UnprocessableEntityErrorMessage.Raw;
    }
}
