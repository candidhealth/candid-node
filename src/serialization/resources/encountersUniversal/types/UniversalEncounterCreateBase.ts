/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as CandidApi from "../../../../api/index";
import * as core from "../../../../core";
import { PatientCreate } from "../../individual/types/PatientCreate";
import { ReferringProvider } from "../../encounterProviders/resources/v2/types/ReferringProvider";
import { InitialReferringProvider } from "../../encounterProviders/resources/v2/types/InitialReferringProvider";
import { SupervisingProvider } from "../../encounterProviders/resources/v2/types/SupervisingProvider";
import { EncounterServiceFacilityBase } from "../../serviceFacility/types/EncounterServiceFacilityBase";
import { SubscriberCreate } from "../../individual/types/SubscriberCreate";
import { PriorAuthorizationNumber } from "../../encounters/resources/v4/types/PriorAuthorizationNumber";
import { ResponsiblePartyType } from "../../encounters/resources/v4/types/ResponsiblePartyType";
import { ClinicalNoteCategoryCreate } from "../../encounters/resources/v4/types/ClinicalNoteCategoryCreate";
import { BillingNoteBase } from "../../billingNotes/resources/v2/types/BillingNoteBase";
import { PatientHistoryCategory } from "../../encounters/resources/v4/types/PatientHistoryCategory";
import { GuarantorCreate } from "../../guarantor/resources/v1/types/GuarantorCreate";
import { ExternalClaimSubmissionCreate } from "../../claimSubmission/resources/v1/types/ExternalClaimSubmissionCreate";
import { TagId } from "../../tags/types/TagId";
import { SchemaInstance } from "../../customSchemas/resources/v1/types/SchemaInstance";
import { EpsdtReferral } from "../../encounters/resources/v4/types/EpsdtReferral";
import { ClaimSupplementalInformation } from "../../encounters/resources/v4/types/ClaimSupplementalInformation";
import { EncounterBase } from "../../encounters/resources/v4/types/EncounterBase";

export const UniversalEncounterCreateBase: core.serialization.ObjectSchema<
    serializers.encountersUniversal.UniversalEncounterCreateBase.Raw,
    CandidApi.encountersUniversal.UniversalEncounterCreateBase
> = core.serialization
    .object({
        patient: PatientCreate,
        referringProvider: core.serialization.property("referring_provider", ReferringProvider.optional()),
        initialReferringProvider: core.serialization.property(
            "initial_referring_provider",
            InitialReferringProvider.optional(),
        ),
        supervisingProvider: core.serialization.property("supervising_provider", SupervisingProvider.optional()),
        serviceFacility: core.serialization.property("service_facility", EncounterServiceFacilityBase.optional()),
        subscriberPrimary: core.serialization.property("subscriber_primary", SubscriberCreate.optional()),
        subscriberSecondary: core.serialization.property("subscriber_secondary", SubscriberCreate.optional()),
        subscriberTertiary: core.serialization.property("subscriber_tertiary", SubscriberCreate.optional()),
        priorAuthorizationNumber: core.serialization.property(
            "prior_authorization_number",
            PriorAuthorizationNumber.optional(),
        ),
        responsibleParty: core.serialization.property("responsible_party", ResponsiblePartyType),
        clinicalNotes: core.serialization.property(
            "clinical_notes",
            core.serialization.list(ClinicalNoteCategoryCreate).optional(),
        ),
        billingNotes: core.serialization.property("billing_notes", core.serialization.list(BillingNoteBase).optional()),
        patientHistories: core.serialization.property(
            "patient_histories",
            core.serialization.list(PatientHistoryCategory).optional(),
        ),
        guarantor: GuarantorCreate.optional(),
        externalClaimSubmission: core.serialization.property(
            "external_claim_submission",
            ExternalClaimSubmissionCreate.optional(),
        ),
        tagIds: core.serialization.property("tag_ids", core.serialization.list(TagId).optional()),
        schemaInstances: core.serialization.property(
            "schema_instances",
            core.serialization.list(SchemaInstance).optional(),
        ),
        referralNumber: core.serialization.property("referral_number", core.serialization.string().optional()),
        epsdtReferral: core.serialization.property("epsdt_referral", EpsdtReferral.optional()),
        claimSupplementalInformation: core.serialization.property(
            "claim_supplemental_information",
            core.serialization.list(ClaimSupplementalInformation).optional(),
        ),
        secondaryPayerCarrierCode: core.serialization.property(
            "secondary_payer_carrier_code",
            core.serialization.string().optional(),
        ),
    })
    .extend(EncounterBase);

export declare namespace UniversalEncounterCreateBase {
    export interface Raw extends EncounterBase.Raw {
        patient: PatientCreate.Raw;
        referring_provider?: ReferringProvider.Raw | null;
        initial_referring_provider?: InitialReferringProvider.Raw | null;
        supervising_provider?: SupervisingProvider.Raw | null;
        service_facility?: EncounterServiceFacilityBase.Raw | null;
        subscriber_primary?: SubscriberCreate.Raw | null;
        subscriber_secondary?: SubscriberCreate.Raw | null;
        subscriber_tertiary?: SubscriberCreate.Raw | null;
        prior_authorization_number?: PriorAuthorizationNumber.Raw | null;
        responsible_party: ResponsiblePartyType.Raw;
        clinical_notes?: ClinicalNoteCategoryCreate.Raw[] | null;
        billing_notes?: BillingNoteBase.Raw[] | null;
        patient_histories?: PatientHistoryCategory.Raw[] | null;
        guarantor?: GuarantorCreate.Raw | null;
        external_claim_submission?: ExternalClaimSubmissionCreate.Raw | null;
        tag_ids?: TagId.Raw[] | null;
        schema_instances?: SchemaInstance.Raw[] | null;
        referral_number?: string | null;
        epsdt_referral?: EpsdtReferral.Raw | null;
        claim_supplemental_information?: ClaimSupplementalInformation.Raw[] | null;
        secondary_payer_carrier_code?: string | null;
    }
}
