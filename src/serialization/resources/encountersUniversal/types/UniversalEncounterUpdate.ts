/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as CandidApi from "../../../../api/index";
import * as core from "../../../../core";
import { HealthCareCodeInformationUpdate } from "../../healthCareCodeInformation/resources/v1/types/HealthCareCodeInformationUpdate";
import { RenderingProviderUpdate } from "../../encounterProviders/resources/v2/types/RenderingProviderUpdate";
import { TypeOfAdmissionOrVisitCode } from "../../x12/resources/v1/types/TypeOfAdmissionOrVisitCode";
import { PointOfOriginForAdmissionOrVisitCode } from "../../x12/resources/v1/types/PointOfOriginForAdmissionOrVisitCode";
import { PatientDischargeStatusCode } from "../../x12/resources/v1/types/PatientDischargeStatusCode";
import { TypeOfBillCompositeUpdate } from "../../x12/resources/v1/types/TypeOfBillCompositeUpdate";
import { State } from "../../commons/types/State";
import { EncounterSubmissionExpectation } from "../../encounters/resources/v4/types/EncounterSubmissionExpectation";
import { UniversalEncounterUpdateBase } from "./UniversalEncounterUpdateBase";

export const UniversalEncounterUpdate: core.serialization.ObjectSchema<
    serializers.encountersUniversal.UniversalEncounterUpdate.Raw,
    CandidApi.encountersUniversal.UniversalEncounterUpdate
> = core.serialization
    .object({
        healthCareCodeInformation: core.serialization.property(
            "health_care_code_information",
            HealthCareCodeInformationUpdate.optional(),
        ),
        attendingProvider: core.serialization.property("attending_provider", RenderingProviderUpdate.optional()),
        admissionHour: core.serialization.property("admission_hour", core.serialization.number().optional()),
        admissionTypeCode: core.serialization.property("admission_type_code", TypeOfAdmissionOrVisitCode.optional()),
        admissionSourceCode: core.serialization.property(
            "admission_source_code",
            PointOfOriginForAdmissionOrVisitCode.optional(),
        ),
        dischargeHour: core.serialization.property("discharge_hour", core.serialization.number().optional()),
        dischargeStatus: core.serialization.property("discharge_status", PatientDischargeStatusCode.optional()),
        operatingProvider: core.serialization.property("operating_provider", RenderingProviderUpdate.optional()),
        otherOperatingProvider: core.serialization.property(
            "other_operating_provider",
            RenderingProviderUpdate.optional(),
        ),
        typeOfBill: core.serialization.property("type_of_bill", TypeOfBillCompositeUpdate.optional()),
        accidentStateOrProvinceCode: core.serialization.property("accident_state_or_province_code", State.optional()),
        submissionExpectation: core.serialization.property(
            "submission_expectation",
            EncounterSubmissionExpectation.optional(),
        ),
    })
    .extend(UniversalEncounterUpdateBase);

export declare namespace UniversalEncounterUpdate {
    export interface Raw extends UniversalEncounterUpdateBase.Raw {
        health_care_code_information?: HealthCareCodeInformationUpdate.Raw | null;
        attending_provider?: RenderingProviderUpdate.Raw | null;
        admission_hour?: number | null;
        admission_type_code?: TypeOfAdmissionOrVisitCode.Raw | null;
        admission_source_code?: PointOfOriginForAdmissionOrVisitCode.Raw | null;
        discharge_hour?: number | null;
        discharge_status?: PatientDischargeStatusCode.Raw | null;
        operating_provider?: RenderingProviderUpdate.Raw | null;
        other_operating_provider?: RenderingProviderUpdate.Raw | null;
        type_of_bill?: TypeOfBillCompositeUpdate.Raw | null;
        accident_state_or_province_code?: State.Raw | null;
        submission_expectation?: EncounterSubmissionExpectation.Raw | null;
    }
}
