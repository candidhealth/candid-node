// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../api/index";
import * as core from "../../../../core";
import type * as serializers from "../../../index";
import { BillingNoteBase } from "../../billingNotes/resources/v2/types/BillingNoteBase";
import { ExternalClaimSubmissionCreate } from "../../claimSubmission/resources/v1/types/ExternalClaimSubmissionCreate";
import { PreEncounterAppointmentId } from "../../commons/types/PreEncounterAppointmentId";
import { PreEncounterPatientId } from "../../commons/types/PreEncounterPatientId";
import { SchemaInstance } from "../../customSchemas/resources/v1/types/SchemaInstance";
import { BillingProvider } from "../../encounterProviders/resources/v2/types/BillingProvider";
import { InitialReferringProvider } from "../../encounterProviders/resources/v2/types/InitialReferringProvider";
import { SupervisingProvider } from "../../encounterProviders/resources/v2/types/SupervisingProvider";
import { ClinicalNoteCategoryCreate } from "../../encounters/resources/v4/types/ClinicalNoteCategoryCreate";
import { EncounterBase } from "../../encounters/resources/v4/types/EncounterBase";
import { PatientHistoryCategory } from "../../encounters/resources/v4/types/PatientHistoryCategory";
import { EncounterServiceFacilityBase } from "../../serviceFacility/types/EncounterServiceFacilityBase";
import { TagId } from "../../tags/types/TagId";

export const UniversalEncounterCreateFromPreEncounterBase: core.serialization.ObjectSchema<
    serializers.encountersUniversal.UniversalEncounterCreateFromPreEncounterBase.Raw,
    CandidApi.encountersUniversal.UniversalEncounterCreateFromPreEncounterBase
> = core.serialization
    .object({
        preEncounterPatientId: core.serialization.property("pre_encounter_patient_id", PreEncounterPatientId),
        preEncounterAppointmentIds: core.serialization.property(
            "pre_encounter_appointment_ids",
            core.serialization.list(PreEncounterAppointmentId),
        ),
        billingProvider: core.serialization.property("billing_provider", BillingProvider),
        initialReferringProvider: core.serialization.property(
            "initial_referring_provider",
            InitialReferringProvider.optional(),
        ),
        supervisingProvider: core.serialization.property("supervising_provider", SupervisingProvider.optional()),
        serviceFacility: core.serialization.property("service_facility", EncounterServiceFacilityBase.optional()),
        clinicalNotes: core.serialization.property(
            "clinical_notes",
            core.serialization.list(ClinicalNoteCategoryCreate).optional(),
        ),
        billingNotes: core.serialization.property("billing_notes", core.serialization.list(BillingNoteBase).optional()),
        patientHistories: core.serialization.property(
            "patient_histories",
            core.serialization.list(PatientHistoryCategory).optional(),
        ),
        externalClaimSubmission: core.serialization.property(
            "external_claim_submission",
            ExternalClaimSubmissionCreate.optional(),
        ),
        tagIds: core.serialization.property("tag_ids", core.serialization.list(TagId).optional()),
        schemaInstances: core.serialization.property(
            "schema_instances",
            core.serialization.list(SchemaInstance).optional(),
        ),
    })
    .extend(EncounterBase);

export declare namespace UniversalEncounterCreateFromPreEncounterBase {
    export interface Raw extends EncounterBase.Raw {
        pre_encounter_patient_id: PreEncounterPatientId.Raw;
        pre_encounter_appointment_ids: PreEncounterAppointmentId.Raw[];
        billing_provider: BillingProvider.Raw;
        initial_referring_provider?: InitialReferringProvider.Raw | null;
        supervising_provider?: SupervisingProvider.Raw | null;
        service_facility?: EncounterServiceFacilityBase.Raw | null;
        clinical_notes?: ClinicalNoteCategoryCreate.Raw[] | null;
        billing_notes?: BillingNoteBase.Raw[] | null;
        patient_histories?: PatientHistoryCategory.Raw[] | null;
        external_claim_submission?: ExternalClaimSubmissionCreate.Raw | null;
        tag_ids?: TagId.Raw[] | null;
        schema_instances?: SchemaInstance.Raw[] | null;
    }
}
