/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { EntityNotFoundErrorMessage } from "../../../../commons/types/EntityNotFoundErrorMessage";
import { OrganizationNotAuthorizedErrorMessage } from "../../../../commons/types/OrganizationNotAuthorizedErrorMessage";
import { RequestValidationError } from "../../../../commons/types/RequestValidationError";
import { UnauthorizedErrorMessage } from "../../../../commons/types/UnauthorizedErrorMessage";

export const Error: core.serialization.Schema<
    serializers.billingNotes.v2.update.Error.Raw,
    CandidApi.billingNotes.v2.update.Error
> = core.serialization
    .union("errorName", {
        EntityNotFoundError: core.serialization.object({
            content: EntityNotFoundErrorMessage,
        }),
        OrganizationNotAuthorizedError: core.serialization.object({
            content: OrganizationNotAuthorizedErrorMessage,
        }),
        HttpRequestValidationError: core.serialization.object({
            content: RequestValidationError,
        }),
        UnauthorizedError: core.serialization.object({
            content: UnauthorizedErrorMessage,
        }),
    })
    .transform<CandidApi.billingNotes.v2.update.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "EntityNotFoundError":
                    return CandidApi.billingNotes.v2.update.Error.entityNotFoundError(value.content);
                case "OrganizationNotAuthorizedError":
                    return CandidApi.billingNotes.v2.update.Error.organizationNotAuthorizedError(value.content);
                case "HttpRequestValidationError":
                    return CandidApi.billingNotes.v2.update.Error.httpRequestValidationError(value.content);
                case "UnauthorizedError":
                    return CandidApi.billingNotes.v2.update.Error.unauthorizedError(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    export type Raw =
        | Error.EntityNotFoundError
        | Error.OrganizationNotAuthorizedError
        | Error.HttpRequestValidationError
        | Error.UnauthorizedError;

    export interface EntityNotFoundError {
        errorName: "EntityNotFoundError";
        content: EntityNotFoundErrorMessage.Raw;
    }

    export interface OrganizationNotAuthorizedError {
        errorName: "OrganizationNotAuthorizedError";
        content: OrganizationNotAuthorizedErrorMessage.Raw;
    }

    export interface HttpRequestValidationError {
        errorName: "HttpRequestValidationError";
        content: RequestValidationError.Raw;
    }

    export interface UnauthorizedError {
        errorName: "UnauthorizedError";
        content: UnauthorizedErrorMessage.Raw;
    }
}
