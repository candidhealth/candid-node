/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { RequestValidationError } from "../../../../commons/types/RequestValidationError";
import { EncounterExternalIdUniquenessErrorType } from "../../../../encounters/resources/v4/types/EncounterExternalIdUniquenessErrorType";
import { EncounterPatientControlNumberUniquenessErrorType } from "../../../../encounters/resources/v4/types/EncounterPatientControlNumberUniquenessErrorType";
import { EntityNotFoundErrorMessage } from "../../../../commons/types/EntityNotFoundErrorMessage";
import { SchemaInstanceValidationFailure } from "../../../../encounters/resources/v4/types/SchemaInstanceValidationFailure";

export const Error: core.serialization.Schema<
    serializers.medicationDispense.v1.create.Error.Raw,
    CandidApi.medicationDispense.v1.create.Error
> = core.serialization
    .union("errorName", {
        HttpRequestValidationError: core.serialization.object({
            content: RequestValidationError,
        }),
        EncounterExternalIdUniquenessError: core.serialization.object({
            content: EncounterExternalIdUniquenessErrorType,
        }),
        EncounterPatientControlNumberUniquenessError: core.serialization.object({
            content: EncounterPatientControlNumberUniquenessErrorType,
        }),
        EntityNotFoundError: core.serialization.object({
            content: EntityNotFoundErrorMessage,
        }),
        SchemaInstanceValidationHttpFailure: core.serialization.object({
            content: SchemaInstanceValidationFailure,
        }),
    })
    .transform<CandidApi.medicationDispense.v1.create.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "HttpRequestValidationError":
                    return CandidApi.medicationDispense.v1.create.Error.httpRequestValidationError(value.content);
                case "EncounterExternalIdUniquenessError":
                    return CandidApi.medicationDispense.v1.create.Error.encounterExternalIdUniquenessError(
                        value.content
                    );
                case "EncounterPatientControlNumberUniquenessError":
                    return CandidApi.medicationDispense.v1.create.Error.encounterPatientControlNumberUniquenessError(
                        value.content
                    );
                case "EntityNotFoundError":
                    return CandidApi.medicationDispense.v1.create.Error.entityNotFoundError(value.content);
                case "SchemaInstanceValidationHttpFailure":
                    return CandidApi.medicationDispense.v1.create.Error.schemaInstanceValidationHttpFailure(
                        value.content
                    );
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw =
        | Error.HttpRequestValidationError
        | Error.EncounterExternalIdUniquenessError
        | Error.EncounterPatientControlNumberUniquenessError
        | Error.EntityNotFoundError
        | Error.SchemaInstanceValidationHttpFailure;

    interface HttpRequestValidationError {
        errorName: "HttpRequestValidationError";
        content: RequestValidationError.Raw;
    }

    interface EncounterExternalIdUniquenessError {
        errorName: "EncounterExternalIdUniquenessError";
        content: EncounterExternalIdUniquenessErrorType.Raw;
    }

    interface EncounterPatientControlNumberUniquenessError {
        errorName: "EncounterPatientControlNumberUniquenessError";
        content: EncounterPatientControlNumberUniquenessErrorType.Raw;
    }

    interface EntityNotFoundError {
        errorName: "EntityNotFoundError";
        content: EntityNotFoundErrorMessage.Raw;
    }

    interface SchemaInstanceValidationHttpFailure {
        errorName: "SchemaInstanceValidationHttpFailure";
        content: SchemaInstanceValidationFailure.Raw;
    }
}
