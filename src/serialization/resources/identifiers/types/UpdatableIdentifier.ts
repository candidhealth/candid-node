/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as CandidApi from "../../../../api";
import * as core from "../../../../core";

export const UpdatableIdentifier: core.serialization.Schema<
    serializers.UpdatableIdentifier.Raw,
    CandidApi.UpdatableIdentifier
> = core.serialization
    .union("type", {
        add: core.serialization.lazyObject(async () => (await import("../../..")).IdentifierCreate),
        update: core.serialization.lazyObject(async () => (await import("../../..")).IdentifierUpdate),
        remove: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).IdentifierId),
        }),
    })
    .transform<CandidApi.UpdatableIdentifier>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UpdatableIdentifier {
    type Raw = UpdatableIdentifier.Add | UpdatableIdentifier.Update | UpdatableIdentifier.Remove;

    interface Add extends serializers.IdentifierCreate.Raw {
        type: "add";
    }

    interface Update extends serializers.IdentifierUpdate.Raw {
        type: "update";
    }

    interface Remove {
        type: "remove";
        value: serializers.IdentifierId.Raw;
    }
}
