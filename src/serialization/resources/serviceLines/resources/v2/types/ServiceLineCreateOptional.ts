// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import type * as serializers from "../../../../../index";
import { Decimal } from "../../../../commons/types/Decimal";
import { FacilityTypeCode } from "../../../../commons/types/FacilityTypeCode";
import { ProcedureModifier } from "../../../../commons/types/ProcedureModifier";
import { ServiceLineUnits } from "../../../../commons/types/ServiceLineUnits";
import { OrderingProviderOptional } from "../../../../encounterProviders/resources/v2/types/OrderingProviderOptional";
import { DrugIdentificationOptional } from "./DrugIdentificationOptional";
import { TestResultOptional } from "./TestResultOptional";

export const ServiceLineCreateOptional: core.serialization.ObjectSchema<
    serializers.serviceLines.v2.ServiceLineCreateOptional.Raw,
    CandidApi.serviceLines.v2.ServiceLineCreateOptional
> = core.serialization.object({
    modifiers: core.serialization.list(ProcedureModifier).optional(),
    hasEpsdtIndicator: core.serialization.property("has_epsdt_indicator", core.serialization.boolean().optional()),
    hasFamilyPlanningIndicator: core.serialization.property(
        "has_family_planning_indicator",
        core.serialization.boolean().optional(),
    ),
    procedureCode: core.serialization.property("procedure_code", core.serialization.string().optional()),
    quantity: Decimal.optional(),
    units: ServiceLineUnits.optional(),
    chargeAmountCents: core.serialization.property("charge_amount_cents", core.serialization.number().optional()),
    diagnosisPointers: core.serialization.property(
        "diagnosis_pointers",
        core.serialization.list(core.serialization.number()).optional(),
    ),
    drugIdentification: core.serialization.property("drug_identification", DrugIdentificationOptional.optional()),
    placeOfServiceCode: core.serialization.property("place_of_service_code", FacilityTypeCode.optional()),
    description: core.serialization.string().optional(),
    dateOfService: core.serialization.property("date_of_service", core.serialization.string().optional()),
    endDateOfService: core.serialization.property("end_date_of_service", core.serialization.string().optional()),
    orderingProvider: core.serialization.property("ordering_provider", OrderingProviderOptional.optional()),
    testResults: core.serialization.property("test_results", core.serialization.list(TestResultOptional).optional()),
    note: core.serialization.string().optional(),
    revenueCode: core.serialization.property("revenue_code", core.serialization.string().optional()),
});

export declare namespace ServiceLineCreateOptional {
    export interface Raw {
        modifiers?: ProcedureModifier.Raw[] | null;
        has_epsdt_indicator?: boolean | null;
        has_family_planning_indicator?: boolean | null;
        procedure_code?: string | null;
        quantity?: Decimal.Raw | null;
        units?: ServiceLineUnits.Raw | null;
        charge_amount_cents?: number | null;
        diagnosis_pointers?: number[] | null;
        drug_identification?: DrugIdentificationOptional.Raw | null;
        place_of_service_code?: FacilityTypeCode.Raw | null;
        description?: string | null;
        date_of_service?: string | null;
        end_date_of_service?: string | null;
        ordering_provider?: OrderingProviderOptional.Raw | null;
        test_results?: TestResultOptional.Raw[] | null;
        note?: string | null;
        revenue_code?: string | null;
    }
}
