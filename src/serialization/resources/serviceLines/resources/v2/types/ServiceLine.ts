/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const ServiceLine: core.serialization.ObjectSchema<
    serializers.serviceLines.v2.ServiceLine.Raw,
    CandidApi.serviceLines.v2.ServiceLine
> = core.serialization.object({
    modifiers: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../../../..")).ProcedureModifier))
        .optional(),
    chargeAmountCents: core.serialization.property("charge_amount_cents", core.serialization.number().optional()),
    allowedAmountCents: core.serialization.property("allowed_amount_cents", core.serialization.number().optional()),
    insuranceBalanceCents: core.serialization.property(
        "insurance_balance_cents",
        core.serialization.number().optional()
    ),
    patientBalanceCents: core.serialization.property("patient_balance_cents", core.serialization.number().optional()),
    paidAmountCents: core.serialization.property("paid_amount_cents", core.serialization.number().optional()),
    patientResponsibilityCents: core.serialization.property(
        "patient_responsibility_cents",
        core.serialization.number().optional()
    ),
    diagnosisIdZero: core.serialization.property(
        "diagnosis_id_zero",
        core.serialization.lazy(async () => (await import("../../../../..")).DiagnosisId).optional()
    ),
    diagnosisIdOne: core.serialization.property(
        "diagnosis_id_one",
        core.serialization.lazy(async () => (await import("../../../../..")).DiagnosisId).optional()
    ),
    diagnosisIdTwo: core.serialization.property(
        "diagnosis_id_two",
        core.serialization.lazy(async () => (await import("../../../../..")).DiagnosisId).optional()
    ),
    diagnosisIdThree: core.serialization.property(
        "diagnosis_id_three",
        core.serialization.lazy(async () => (await import("../../../../..")).DiagnosisId).optional()
    ),
    serviceLineEraData: core.serialization.property(
        "service_line_era_data",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).serviceLines.v2.ServiceLineEraData)
            .optional()
    ),
    serviceLineManualAdjustments: core.serialization.property(
        "service_line_manual_adjustments",
        core.serialization
            .list(
                core.serialization.lazyObject(
                    async () => (await import("../../../../..")).serviceLines.v2.ServiceLineAdjustment
                )
            )
            .optional()
    ),
    relatedInvoices: core.serialization.property(
        "related_invoices",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).Invoice))
            .optional()
    ),
    denialReason: core.serialization.property(
        "denial_reason",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).serviceLines.v2.ServiceLineDenialReason)
            .optional()
    ),
    placeOfServiceCode: core.serialization.property(
        "place_of_service_code",
        core.serialization.lazy(async () => (await import("../../../../..")).FacilityTypeCode).optional()
    ),
    serviceLineId: core.serialization.property(
        "service_line_id",
        core.serialization.lazy(async () => (await import("../../../../..")).ServiceLineId)
    ),
    procedureCode: core.serialization.property("procedure_code", core.serialization.string()),
    quantity: core.serialization.lazy(async () => (await import("../../../../..")).Decimal),
    units: core.serialization.lazy(async () => (await import("../../../../..")).ServiceLineUnits),
    claimId: core.serialization.property(
        "claim_id",
        core.serialization.lazy(async () => (await import("../../../../..")).ClaimId)
    ),
    dateOfServiceRange: core.serialization.property(
        "date_of_service_range",
        core.serialization.lazyObject(async () => (await import("../../../../..")).DateRangeOptionalEnd)
    ),
});

export declare namespace ServiceLine {
    interface Raw {
        modifiers?: serializers.ProcedureModifier.Raw[] | null;
        charge_amount_cents?: number | null;
        allowed_amount_cents?: number | null;
        insurance_balance_cents?: number | null;
        patient_balance_cents?: number | null;
        paid_amount_cents?: number | null;
        patient_responsibility_cents?: number | null;
        diagnosis_id_zero?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_one?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_two?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_three?: serializers.DiagnosisId.Raw | null;
        service_line_era_data?: serializers.serviceLines.v2.ServiceLineEraData.Raw | null;
        service_line_manual_adjustments?: serializers.serviceLines.v2.ServiceLineAdjustment.Raw[] | null;
        related_invoices?: serializers.Invoice.Raw[] | null;
        denial_reason?: serializers.serviceLines.v2.ServiceLineDenialReason.Raw | null;
        place_of_service_code?: serializers.FacilityTypeCode.Raw | null;
        service_line_id: serializers.ServiceLineId.Raw;
        procedure_code: string;
        quantity: serializers.Decimal.Raw;
        units: serializers.ServiceLineUnits.Raw;
        claim_id: serializers.ClaimId.Raw;
        date_of_service_range: serializers.DateRangeOptionalEnd.Raw;
    }
}
