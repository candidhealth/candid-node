/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as CandidApi from "../../../../api";
import * as core from "../../../../core";

export const ServiceLineBaseWithOptionals: core.serialization.ObjectSchema<
    serializers.ServiceLineBaseWithOptionals.Raw,
    CandidApi.ServiceLineBaseWithOptionals
> = core.serialization
    .object({
        chargeAmountCents: core.serialization.property("charge_amount_cents", core.serialization.number().optional()),
        allowedAmountCents: core.serialization.property("allowed_amount_cents", core.serialization.number().optional()),
        paidAmountCents: core.serialization.property("paid_amount_cents", core.serialization.number().optional()),
        patientResponsibilityCents: core.serialization.property(
            "patient_responsibility_cents",
            core.serialization.number().optional()
        ),
        diagnosisIdZero: core.serialization.property(
            "diagnosis_id_zero",
            core.serialization.lazy(async () => (await import("../../..")).DiagnosisId).optional()
        ),
        diagnosisIdOne: core.serialization.property(
            "diagnosis_id_one",
            core.serialization.lazy(async () => (await import("../../..")).DiagnosisId).optional()
        ),
        diagnosisIdTwo: core.serialization.property(
            "diagnosis_id_two",
            core.serialization.lazy(async () => (await import("../../..")).DiagnosisId).optional()
        ),
        diagnosisIdThree: core.serialization.property(
            "diagnosis_id_three",
            core.serialization.lazy(async () => (await import("../../..")).DiagnosisId).optional()
        ),
        serviceLineEraData: core.serialization.property(
            "service_line_era_data",
            core.serialization.lazyObject(async () => (await import("../../..")).ServiceLineEraData).optional()
        ),
        serviceLineManualAdjustments: core.serialization.property(
            "service_line_manual_adjustments",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).ServiceLineAdjustment))
                .optional()
        ),
        relatedInvoices: core.serialization.property(
            "related_invoices",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).Invoice))
                .optional()
        ),
        denialReason: core.serialization.property(
            "denial_reason",
            core.serialization.lazyObject(async () => (await import("../../..")).ServiceLineDenialReason).optional()
        ),
        placeOfServiceCode: core.serialization.property(
            "place_of_service_code",
            core.serialization.lazy(async () => (await import("../../..")).FacilityTypeCode).optional()
        ),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).ServiceLineBase));

export declare namespace ServiceLineBaseWithOptionals {
    interface Raw extends serializers.ServiceLineBase.Raw {
        charge_amount_cents?: number | null;
        allowed_amount_cents?: number | null;
        paid_amount_cents?: number | null;
        patient_responsibility_cents?: number | null;
        diagnosis_id_zero?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_one?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_two?: serializers.DiagnosisId.Raw | null;
        diagnosis_id_three?: serializers.DiagnosisId.Raw | null;
        service_line_era_data?: serializers.ServiceLineEraData.Raw | null;
        service_line_manual_adjustments?: serializers.ServiceLineAdjustment.Raw[] | null;
        related_invoices?: serializers.Invoice.Raw[] | null;
        denial_reason?: serializers.ServiceLineDenialReason.Raw | null;
        place_of_service_code?: serializers.FacilityTypeCode.Raw | null;
    }
}
