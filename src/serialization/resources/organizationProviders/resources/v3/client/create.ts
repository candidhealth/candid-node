/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as CandidApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const Error: core.serialization.Schema<
    serializers.organizationProviders.v3.create.Error.Raw,
    CandidApi.organizationProviders.v3.create.Error
> = core.serialization
    .union("errorName", {
        HttpRequestValidationError: core.serialization.object({
            content: core.serialization.lazyObject(async () => (await import("../../../../..")).RequestValidationError),
        }),
    })
    .transform<CandidApi.organizationProviders.v3.create.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "HttpRequestValidationError":
                    return CandidApi.organizationProviders.v3.create.Error.httpRequestValidationError(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw = Error.HttpRequestValidationError;

    interface HttpRequestValidationError {
        errorName: "HttpRequestValidationError";
        content: serializers.RequestValidationError.Raw;
    }
}
