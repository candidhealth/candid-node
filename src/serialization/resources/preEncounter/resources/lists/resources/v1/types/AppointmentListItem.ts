/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as CandidApi from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { Appointment } from "../../../../appointments/resources/v1/types/Appointment";
import { MutablePatientWithMrn } from "../../../../patients/resources/v1/types/MutablePatientWithMrn";
import { MutableCoverage } from "../../../../coverages/resources/v1/types/MutableCoverage";
import { UniversalServiceIdentifier } from "../../../../appointments/resources/v1/types/UniversalServiceIdentifier";

export const AppointmentListItem: core.serialization.ObjectSchema<
    serializers.preEncounter.lists.v1.AppointmentListItem.Raw,
    CandidApi.preEncounter.lists.v1.AppointmentListItem
> = core.serialization.object({
    appointment: Appointment,
    patient: MutablePatientWithMrn,
    primaryCoverage: core.serialization.property("primary_coverage", MutableCoverage.optional()),
    primaryServiceType: core.serialization.property("primary_service_type", UniversalServiceIdentifier.optional()),
});

export declare namespace AppointmentListItem {
    export interface Raw {
        appointment: Appointment.Raw;
        patient: MutablePatientWithMrn.Raw;
        primary_coverage?: MutableCoverage.Raw | null;
        primary_service_type?: UniversalServiceIdentifier.Raw | null;
    }
}
