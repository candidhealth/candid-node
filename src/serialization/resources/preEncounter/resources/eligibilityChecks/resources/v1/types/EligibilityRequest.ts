// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import type * as serializers from "../../../../../../../index";
import { MemberInfo } from "../../../../coverages/resources/v1/types/MemberInfo";
import { Encounter } from "./Encounter";
import { Provider } from "./Provider";

export const EligibilityRequest: core.serialization.ObjectSchema<
    serializers.preEncounter.eligibilityChecks.v1.EligibilityRequest.Raw,
    CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest
> = core.serialization.object({
    submitterTransactionIdentifier: core.serialization.property(
        "submitter_transaction_identifier",
        core.serialization.string().optional(),
    ),
    payerId: core.serialization.property("payer_id", core.serialization.string()),
    provider: Provider,
    subscriber: MemberInfo,
    dependent: MemberInfo.optional(),
    encounter: Encounter.optional(),
});

export declare namespace EligibilityRequest {
    export interface Raw {
        submitter_transaction_identifier?: string | null;
        payer_id: string;
        provider: Provider.Raw;
        subscriber: MemberInfo.Raw;
        dependent?: MemberInfo.Raw | null;
        encounter?: Encounter.Raw | null;
    }
}
