// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import type * as serializers from "../../../../../../../index";
import { PatientId } from "../../../../common/types/PatientId";
import { MutableCoverage } from "../../../../coverages/resources/v1/types/MutableCoverage";
import { MutablePatientWithMrn } from "../../../../patients/resources/v1/types/MutablePatientWithMrn";
import { AppointmentStatus } from "./AppointmentStatus";

export const Visit: core.serialization.ObjectSchema<
    serializers.preEncounter.appointments.v1.Visit.Raw,
    CandidApi.preEncounter.appointments.v1.Visit
> = core.serialization.object({
    patientId: core.serialization.property("patient_id", PatientId),
    patient: MutablePatientWithMrn,
    startTime: core.serialization.property("start_time", core.serialization.date()),
    status: AppointmentStatus,
    primaryCoverage: core.serialization.property("primary_coverage", MutableCoverage.optional()),
});

export declare namespace Visit {
    export interface Raw {
        patient_id: PatientId.Raw;
        patient: MutablePatientWithMrn.Raw;
        start_time: string;
        status: AppointmentStatus.Raw;
        primary_coverage?: MutableCoverage.Raw | null;
    }
}
