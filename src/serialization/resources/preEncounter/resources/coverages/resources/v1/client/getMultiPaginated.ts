/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as CandidApi from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { ErrorBase4Xx } from "../../../../common/types/ErrorBase4Xx";

export const Error: core.serialization.Schema<
    serializers.preEncounter.coverages.v1.getMultiPaginated.Error.Raw,
    CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error
> = core.serialization
    .union("errorName", {
        BadRequestError: core.serialization.object({
            content: ErrorBase4Xx,
        }),
    })
    .transform<CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "BadRequestError":
                    return CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error.badRequestError(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    export type Raw = Error.BadRequestError;

    export interface BadRequestError {
        errorName: "BadRequestError";
        content: ErrorBase4Xx.Raw;
    }
}
