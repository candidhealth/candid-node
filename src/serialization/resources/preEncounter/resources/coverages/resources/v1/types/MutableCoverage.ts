// This file was auto-generated by Fern from our API Definition.

import type * as CandidApi from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import type * as serializers from "../../../../../../../index";
import { PatientId } from "../../../../common/types/PatientId";
import { Relationship } from "../../../../common/types/Relationship";
import { EligibilityCheckMetadata } from "../../../../eligibilityChecks/resources/v1/types/EligibilityCheckMetadata";
import { CoverageBenefits } from "./CoverageBenefits";
import { CoverageStatus } from "./CoverageStatus";
import { InsurancePlan } from "./InsurancePlan";
import { LatestEligibilityCheck } from "./LatestEligibilityCheck";
import { Subscriber } from "./Subscriber";

export const MutableCoverage: core.serialization.ObjectSchema<
    serializers.preEncounter.coverages.v1.MutableCoverage.Raw,
    CandidApi.preEncounter.coverages.v1.MutableCoverage
> = core.serialization.object({
    status: CoverageStatus,
    subscriber: Subscriber,
    relationship: Relationship,
    patient: PatientId,
    insurancePlan: core.serialization.property("insurance_plan", InsurancePlan),
    verified: core.serialization.boolean(),
    eligibilityChecks: core.serialization.property(
        "eligibility_checks",
        core.serialization.list(EligibilityCheckMetadata).optional(),
    ),
    latestEligibilityCheck: core.serialization.property("latest_eligibility_check", LatestEligibilityCheck.optional()),
    benefits: CoverageBenefits.optional(),
});

export declare namespace MutableCoverage {
    export interface Raw {
        status: CoverageStatus.Raw;
        subscriber: Subscriber.Raw;
        relationship: Relationship.Raw;
        patient: PatientId.Raw;
        insurance_plan: InsurancePlan.Raw;
        verified: boolean;
        eligibility_checks?: EligibilityCheckMetadata.Raw[] | null;
        latest_eligibility_check?: LatestEligibilityCheck.Raw | null;
        benefits?: CoverageBenefits.Raw | null;
    }
}
