/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { PayerId } from "../../common/types/PayerId";
import { CoverageType } from "./CoverageType";
import { Period } from "../../common/types/Period";

export const InsurancePlan: core.serialization.ObjectSchema<
    serializers.preEncounter.InsurancePlan.Raw,
    CandidApi.preEncounter.InsurancePlan
> = core.serialization.object({
    memberId: core.serialization.string(),
    payerId: PayerId,
    payerName: core.serialization.string(),
    groupNumber: core.serialization.string().optional(),
    name: core.serialization.string().optional(),
    type: CoverageType.optional(),
    period: Period.optional(),
    insuranceCardImageLocator: core.serialization.string().optional(),
});

export declare namespace InsurancePlan {
    interface Raw {
        memberId: string;
        payerId: PayerId.Raw;
        payerName: string;
        groupNumber?: string | null;
        name?: string | null;
        type?: CoverageType.Raw | null;
        period?: Period.Raw | null;
        insuranceCardImageLocator?: string | null;
    }
}
