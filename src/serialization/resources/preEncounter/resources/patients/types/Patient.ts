/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { PatientId } from "./PatientId";
import { OrganizationId } from "../../common/types/OrganizationId";
import { UserId } from "../../common/types/UserId";
import { MutablePatient } from "./MutablePatient";

export const Patient: core.serialization.ObjectSchema<
    serializers.preEncounter.Patient.Raw,
    CandidApi.preEncounter.Patient
> = core.serialization
    .object({
        id: PatientId,
        organizationId: core.serialization.property("organization_id", OrganizationId),
        deactivated: core.serialization.boolean(),
        version: core.serialization.number(),
        updatedAt: core.serialization.date(),
        updatingUserId: UserId,
    })
    .extend(MutablePatient);

export declare namespace Patient {
    interface Raw extends MutablePatient.Raw {
        id: PatientId.Raw;
        organization_id: OrganizationId.Raw;
        deactivated: boolean;
        version: number;
        updatedAt: string;
        updatingUserId: UserId.Raw;
    }
}
