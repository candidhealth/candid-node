/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { HumanName } from "../../common/types/HumanName";
import { Gender } from "../../common/types/Gender";
import { MaritalStatus } from "./MaritalStatus";
import { Address } from "../../common/types/Address";
import { ContactPoint } from "../../common/types/ContactPoint";
import { ExternalProvenance } from "./ExternalProvenance";
import { Contact } from "./Contact";
import { ExternalProvider } from "./ExternalProvider";

export const MutablePatient: core.serialization.ObjectSchema<
    serializers.preEncounter.MutablePatient.Raw,
    CandidApi.preEncounter.MutablePatient
> = core.serialization.object({
    name: HumanName,
    otherNames: core.serialization.list(HumanName),
    gender: Gender,
    birthDate: core.serialization.string(),
    maritalStatus: MaritalStatus.optional(),
    deceased: core.serialization.date().optional(),
    multipleBirth: core.serialization.number().optional(),
    primaryAddress: Address,
    otherAddresses: core.serialization.list(Address),
    primaryTelecom: ContactPoint,
    otherTelecoms: core.serialization.list(ContactPoint),
    photo: core.serialization.string().optional(),
    language: core.serialization.string().optional(),
    externalProvenance: ExternalProvenance.optional(),
    contacts: core.serialization.list(Contact),
    generalPractitioners: core.serialization.list(ExternalProvider),
});

export declare namespace MutablePatient {
    interface Raw {
        name: HumanName.Raw;
        otherNames: HumanName.Raw[];
        gender: Gender.Raw;
        birthDate: string;
        maritalStatus?: MaritalStatus.Raw | null;
        deceased?: string | null;
        multipleBirth?: number | null;
        primaryAddress: Address.Raw;
        otherAddresses: Address.Raw[];
        primaryTelecom: ContactPoint.Raw;
        otherTelecoms: ContactPoint.Raw[];
        photo?: string | null;
        language?: string | null;
        externalProvenance?: ExternalProvenance.Raw | null;
        contacts: Contact.Raw[];
        generalPractitioners: ExternalProvider.Raw[];
    }
}
