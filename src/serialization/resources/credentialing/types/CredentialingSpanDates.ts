/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { CandidApi } from "";
import * as core from "../../../../core";

export const CredentialingSpanDates: core.serialization.Schema<
    serializers.CredentialingSpanDates.Raw,
    CandidApi.CredentialingSpanDates
> = core.serialization
    .union("type", {
        required_dates: core.serialization.lazyObject(
            async () => (await import("../../..")).RequiredCredentialingDates
        ),
        non_required_dates: core.serialization.lazyObject(
            async () => (await import("../../..")).NonRequiredCredentialingDates
        ),
    })
    .transform<CandidApi.CredentialingSpanDates>({
        transform: (value) => {
            switch (value.type) {
                case "required_dates":
                    return CandidApi.CredentialingSpanDates.requiredDates(value);
                case "non_required_dates":
                    return CandidApi.CredentialingSpanDates.nonRequiredDates(value);
                default:
                    return CandidApi.CredentialingSpanDates._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace CredentialingSpanDates {
    type Raw = CredentialingSpanDates.RequiredDates | CredentialingSpanDates.NonRequiredDates;

    interface RequiredDates extends serializers.RequiredCredentialingDates.Raw {
        type: "required_dates";
    }

    interface NonRequiredDates extends serializers.NonRequiredCredentialingDates.Raw {
        type: "non_required_dates";
    }
}
