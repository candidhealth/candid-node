/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as CandidApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { RequestValidationError } from "../../../../commons/types/RequestValidationError";
import { UnauthorizedErrorMessage } from "../../../../commons/types/UnauthorizedErrorMessage";

export const Error: core.serialization.Schema<
    serializers.credentialing.v2.createFacility.Error.Raw,
    CandidApi.credentialing.v2.createFacility.Error
> = core.serialization
    .union("errorName", {
        HttpRequestValidationsError: core.serialization.object({
            content: core.serialization.list(RequestValidationError),
        }),
        UnauthorizedError: core.serialization.object({
            content: UnauthorizedErrorMessage,
        }),
    })
    .transform<CandidApi.credentialing.v2.createFacility.Error>({
        transform: (value) => {
            switch (value.errorName) {
                case "HttpRequestValidationsError":
                    return CandidApi.credentialing.v2.createFacility.Error.httpRequestValidationsError(value.content);
                case "UnauthorizedError":
                    return CandidApi.credentialing.v2.createFacility.Error.unauthorizedError(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    export type Raw = Error.HttpRequestValidationsError | Error.UnauthorizedError;

    export interface HttpRequestValidationsError {
        errorName: "HttpRequestValidationsError";
        content: RequestValidationError.Raw[];
    }

    export interface UnauthorizedError {
        errorName: "UnauthorizedError";
        content: UnauthorizedErrorMessage.Raw;
    }
}
