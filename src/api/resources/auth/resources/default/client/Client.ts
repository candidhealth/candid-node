// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace Default {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Default {
    protected readonly _options: Default.Options;

    constructor(_options: Default.Options = {}) {
        this._options = _options;
    }

    /**
     * <Callout intent="info">
     * Candid Health SDKs automatically handle authentication workflows after configuring them with the `client_id` and
     * `client_secret`.
     * </Callout>
     *
     * Candid Health utilizes the [OAuth 2.0 bearer token authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) in our auth flow. You obtain the bearer token for all
     * subsequent API requests via the `/auth/v2/token` endpoint defined below, which requires you to provide your `client_id` and `client_secret`. Your `client_id` and `client_secret` can be [generated](https://support.joincandidhealth.com/hc/en-us/articles/23065219476244--Generating-Candid-API-Keys) from the "Users & Credentials" tab by your org admin.
     *
     * The `/auth/v2/token` endpoint accepts both `Content-Type: application/json` and `Content-Type: application/x-www-form-urlencoded`. The request body should contain the `client_id` and `client_secret` as follows:
     *
     * ```json
     * {
     *   "client_id": "YOUR_CLIENT_ID",
     *   "client_secret": "YOUR_CLIENT_SECRET"
     * }
     * ```
     * or as URL-encoded form data:
     *
     * ```
     * client_id=YOUR_CLIENT_ID&client_secret=YOUR_CLIENT_SECRET
     * ```
     *
     * The bearer token is a signed [JWT](https://jwt.io/). The public key for the JWT can be found [here](https://candidhealth.auth0.com/pem) for any verification workflows.
     *
     * The bearer token should be provided in the `Authorization` header for all subsequent API calls.
     *
     * <Callout intent="warning">
     * The bearer token expires 5 hours after it has been created. After it has expired, the client will receive an "HTTP 401
     * Unauthorized" error, at which point the client should generate a new token. It is important that tokens be reused between
     * requests; if the client attempts to generate a token too often, it will be rate-limited and will receive an `HTTP 429 Too Many Requests` error.
     * </Callout>
     *
     * @param {CandidApi.auth.default_.AuthGetTokenRequest} request
     * @param {Default.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.default.getToken({
     *         clientId: "YOUR_CLIENT_ID",
     *         clientSecret: "YOUR_CLIENT_SECRET"
     *     })
     */
    public getToken(
        request: CandidApi.auth.default_.AuthGetTokenRequest,
        requestOptions?: Default.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.auth.default_.AuthGetTokenResponse, CandidApi.auth.default_.getToken.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getToken(request, requestOptions));
    }

    private async __getToken(
        request: CandidApi.auth.default_.AuthGetTokenRequest,
        requestOptions?: Default.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.auth.default_.AuthGetTokenResponse, CandidApi.auth.default_.getToken.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/auth/v2/token",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.auth.default_.AuthGetTokenRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.auth.default_.AuthGetTokenResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.auth.default_.getToken.Error.Raw)?.errorName) {
                case "TooManyRequestsError":
                case "InvalidContentTypeError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.auth.default_.getToken.Error.parseOrThrow(
                                _response.error.body as serializers.auth.default_.getToken.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.auth.default_.getToken.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
