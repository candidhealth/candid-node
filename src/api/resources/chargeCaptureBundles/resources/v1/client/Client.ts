/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    constructor(protected readonly _options: V1.Options = {}) {}

    /**
     * @param {CandidApi.ChargeCaptureBundleId} chargeCaptureBundleId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.get(CandidApi.ChargeCaptureBundleId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async get(
        chargeCaptureBundleId: CandidApi.ChargeCaptureBundleId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundle,
            CandidApi.chargeCaptureBundles.v1.get.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_capture_bundle/v1/${encodeURIComponent(serializers.ChargeCaptureBundleId.jsonOrThrow(chargeCaptureBundleId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.3",
                "User-Agent": "candidhealth/0.42.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCaptureBundles.v1.ChargeCaptureBundle.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCaptureBundles.v1.get.Error._unknown(_response.error),
        };
    }

    /**
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.getSummary()
     */
    public async getSummary(
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundleSummary,
            CandidApi.chargeCaptureBundles.v1.getSummary.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_capture_bundle/v1/all/summary",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.3",
                "User-Agent": "candidhealth/0.42.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCaptureBundles.v1.ChargeCaptureBundleSummary.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCaptureBundles.v1.getSummary.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureBundleId} chargeCaptureBundleId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.resubmit(CandidApi.ChargeCaptureBundleId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async resubmit(
        chargeCaptureBundleId: CandidApi.ChargeCaptureBundleId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundle,
            CandidApi.chargeCaptureBundles.v1.resubmit.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_capture_bundle/v1/${encodeURIComponent(serializers.ChargeCaptureBundleId.jsonOrThrow(chargeCaptureBundleId))}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.3",
                "User-Agent": "candidhealth/0.42.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCaptureBundles.v1.ChargeCaptureBundle.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCaptureBundles.v1.resubmit.Error.Raw)?.errorName) {
                case "NotImplementedError":
                    return {
                        ok: false,
                        error: serializers.chargeCaptureBundles.v1.resubmit.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCaptureBundles.v1.resubmit.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCaptureBundles.v1.resubmit.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.chargeCaptureBundles.v1.GetAllChargeCaptureBundlesRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.getAll({
     *         limit: 1,
     *         sort: "created_at",
     *         sortDirection: "asc",
     *         pageToken: CandidApi.PageToken("eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9"),
     *         patientExternalId: "string",
     *         bundleStatus: "not-started",
     *         chargeStatus: "planned",
     *         chargeExternalId: "string",
     *         dateOfServiceMin: "2023-01-15",
     *         dateOfServiceMax: "2023-01-15",
     *         claimIds: CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         bundleIds: CandidApi.ChargeCaptureBundleId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         billingProviderNpis: "string",
     *         serviceFacilityName: "string",
     *         primaryPayerIds: "string",
     *         renderingProviderNpis: "string",
     *         renderingProviderNames: "string",
     *         supervisingProviderNpis: "string",
     *         supervisingProviderNames: "string",
     *         hasChargeCaptureUpdates: true
     *     })
     */
    public async getAll(
        request: CandidApi.chargeCaptureBundles.v1.GetAllChargeCaptureBundlesRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundlePage,
            CandidApi.chargeCaptureBundles.v1.getAll.Error
        >
    > {
        const {
            limit,
            sort,
            sortDirection,
            pageToken,
            patientExternalId,
            bundleStatus,
            chargeStatus,
            chargeExternalId,
            dateOfServiceMin,
            dateOfServiceMax,
            claimIds,
            bundleIds,
            billingProviderNpis,
            serviceFacilityName,
            primaryPayerIds,
            renderingProviderNpis,
            renderingProviderNames,
            supervisingProviderNpis,
            supervisingProviderNames,
            hasChargeCaptureUpdates,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (sort != null) {
            _queryParams["sort"] = serializers.chargeCaptureBundles.v1.ChargeCaptureBundleSortField.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sortDirection != null) {
            _queryParams["sort_direction"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (patientExternalId != null) {
            _queryParams["patient_external_id"] = patientExternalId;
        }

        if (bundleStatus != null) {
            _queryParams["bundle_status"] = serializers.chargeCaptureBundles.v1.ChargeCaptureBundleStatus.jsonOrThrow(
                bundleStatus,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (chargeStatus != null) {
            _queryParams["charge_status"] = serializers.chargeCapture.v1.ChargeCaptureStatus.jsonOrThrow(chargeStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (chargeExternalId != null) {
            _queryParams["charge_external_id"] = chargeExternalId;
        }

        if (dateOfServiceMin != null) {
            _queryParams["date_of_service_min"] = dateOfServiceMin;
        }

        if (dateOfServiceMax != null) {
            _queryParams["date_of_service_max"] = dateOfServiceMax;
        }

        if (claimIds != null) {
            if (Array.isArray(claimIds)) {
                _queryParams["claim_ids"] = claimIds.map((item) =>
                    serializers.EncounterId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_ids"] = claimIds;
            }
        }

        if (bundleIds != null) {
            if (Array.isArray(bundleIds)) {
                _queryParams["bundle_ids"] = bundleIds.map((item) =>
                    serializers.ChargeCaptureBundleId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["bundle_ids"] = bundleIds;
            }
        }

        if (billingProviderNpis != null) {
            if (Array.isArray(billingProviderNpis)) {
                _queryParams["billing_provider_npis"] = billingProviderNpis.map((item) => item);
            } else {
                _queryParams["billing_provider_npis"] = billingProviderNpis;
            }
        }

        if (serviceFacilityName != null) {
            _queryParams["service_facility_name"] = serviceFacilityName;
        }

        if (primaryPayerIds != null) {
            if (Array.isArray(primaryPayerIds)) {
                _queryParams["primary_payer_ids"] = primaryPayerIds.map((item) => item);
            } else {
                _queryParams["primary_payer_ids"] = primaryPayerIds;
            }
        }

        if (renderingProviderNpis != null) {
            if (Array.isArray(renderingProviderNpis)) {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis.map((item) => item);
            } else {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis;
            }
        }

        if (renderingProviderNames != null) {
            if (Array.isArray(renderingProviderNames)) {
                _queryParams["rendering_provider_names"] = renderingProviderNames.map((item) => item);
            } else {
                _queryParams["rendering_provider_names"] = renderingProviderNames;
            }
        }

        if (supervisingProviderNpis != null) {
            if (Array.isArray(supervisingProviderNpis)) {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis.map((item) => item);
            } else {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis;
            }
        }

        if (supervisingProviderNames != null) {
            if (Array.isArray(supervisingProviderNames)) {
                _queryParams["supervising_provider_names"] = supervisingProviderNames.map((item) => item);
            } else {
                _queryParams["supervising_provider_names"] = supervisingProviderNames;
            }
        }

        if (hasChargeCaptureUpdates != null) {
            _queryParams["has_charge_capture_updates"] = hasChargeCaptureUpdates.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_capture_bundle/v1",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.3",
                "User-Agent": "candidhealth/0.42.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCaptureBundles.v1.ChargeCaptureBundlePage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCaptureBundles.v1.getAll.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
