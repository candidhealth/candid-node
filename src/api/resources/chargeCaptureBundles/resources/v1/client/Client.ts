// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.ChargeCaptureClaimCreationId} chargeCaptureClaimCreationId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.get(CandidApi.ChargeCaptureClaimCreationId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        chargeCaptureClaimCreationId: CandidApi.ChargeCaptureClaimCreationId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreation,
            CandidApi.chargeCaptureBundles.v1.get.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(chargeCaptureClaimCreationId, requestOptions));
    }

    private async __get(
        chargeCaptureClaimCreationId: CandidApi.ChargeCaptureClaimCreationId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreation,
                CandidApi.chargeCaptureBundles.v1.get.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_capture_claim_creation/v1/${core.url.encodePathParam(serializers.ChargeCaptureClaimCreationId.jsonOrThrow(chargeCaptureClaimCreationId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.chargeCaptureBundles.v1.ChargeCaptureClaimCreation.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.chargeCaptureBundles.v1.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.getSummary()
     */
    public getSummary(
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreationSummary,
            CandidApi.chargeCaptureBundles.v1.getSummary.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getSummary(requestOptions));
    }

    private async __getSummary(
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreationSummary,
                CandidApi.chargeCaptureBundles.v1.getSummary.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_capture_claim_creation/v1/all/summary",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.chargeCaptureBundles.v1.ChargeCaptureClaimCreationSummary.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.chargeCaptureBundles.v1.getSummary.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {string} chargeCaptureBundleErrorId
     * @param {CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundleErrorResolution} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.resolveChargeCreationError("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    public resolveChargeCreationError(
        chargeCaptureBundleErrorId: string,
        request: CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundleErrorResolution = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<void, CandidApi.chargeCaptureBundles.v1.resolveChargeCreationError.Error>
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__resolveChargeCreationError(chargeCaptureBundleErrorId, request, requestOptions),
        );
    }

    private async __resolveChargeCreationError(
        chargeCaptureBundleErrorId: string,
        request: CandidApi.chargeCaptureBundles.v1.ChargeCaptureBundleErrorResolution = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, CandidApi.chargeCaptureBundles.v1.resolveChargeCreationError.Error>>
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_capture_claim_creation/v1/error/${core.url.encodePathParam(chargeCaptureBundleErrorId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.chargeCaptureBundles.v1.ChargeCaptureBundleErrorResolution.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.chargeCaptureBundles.v1.resolveChargeCreationError.Error.Raw)
                    ?.errorName
            ) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.chargeCaptureBundles.v1.resolveChargeCreationError.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.chargeCaptureBundles.v1.resolveChargeCreationError.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.chargeCaptureBundles.v1.resolveChargeCreationError.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.chargeCaptureBundles.v1.GetAllChargeCaptureClaimCreationsRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCaptureBundles.v1.getAll()
     */
    public getAll(
        request: CandidApi.chargeCaptureBundles.v1.GetAllChargeCaptureClaimCreationsRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreationPage,
            CandidApi.chargeCaptureBundles.v1.getAll.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAll(request, requestOptions));
    }

    private async __getAll(
        request: CandidApi.chargeCaptureBundles.v1.GetAllChargeCaptureClaimCreationsRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.chargeCaptureBundles.v1.ChargeCaptureClaimCreationPage,
                CandidApi.chargeCaptureBundles.v1.getAll.Error
            >
        >
    > {
        const {
            limit,
            sort,
            sortDirection,
            pageToken,
            patientExternalId,
            claimCreationStatus,
            chargeStatus,
            chargeExternalId,
            dateOfServiceMin,
            dateOfServiceMax,
            claimIds,
            claimCreationIds,
            billingProviderNpis,
            serviceFacilityName,
            primaryPayerIds,
            renderingProviderNpis,
            renderingProviderNames,
            supervisingProviderNpis,
            supervisingProviderNames,
            claimStatus,
            claimCreationCategory,
            tags,
            primaryPayerNames,
            patientNames,
            hasChargeCaptureUpdates,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (sort != null) {
            _queryParams.sort = serializers.chargeCaptureBundles.v1.ChargeCaptureClaimCreationSortField.jsonOrThrow(
                sort,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (sortDirection != null) {
            _queryParams.sort_direction = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (patientExternalId != null) {
            _queryParams.patient_external_id = patientExternalId;
        }

        if (claimCreationStatus != null) {
            _queryParams.claim_creation_status =
                serializers.chargeCaptureBundles.v1.ChargeCaptureClaimCreationStatus.jsonOrThrow(claimCreationStatus, {
                    unrecognizedObjectKeys: "strip",
                });
        }

        if (chargeStatus != null) {
            _queryParams.charge_status = serializers.chargeCapture.v1.ChargeCaptureStatus.jsonOrThrow(chargeStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (chargeExternalId != null) {
            _queryParams.charge_external_id = chargeExternalId;
        }

        if (dateOfServiceMin != null) {
            _queryParams.date_of_service_min = dateOfServiceMin;
        }

        if (dateOfServiceMax != null) {
            _queryParams.date_of_service_max = dateOfServiceMax;
        }

        if (claimIds != null) {
            if (Array.isArray(claimIds)) {
                _queryParams.claim_ids = claimIds.map((item) =>
                    serializers.EncounterId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams.claim_ids = claimIds;
            }
        }

        if (claimCreationIds != null) {
            if (Array.isArray(claimCreationIds)) {
                _queryParams.claim_creation_ids = claimCreationIds.map((item) =>
                    serializers.ChargeCaptureClaimCreationId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams.claim_creation_ids = claimCreationIds;
            }
        }

        if (billingProviderNpis != null) {
            if (Array.isArray(billingProviderNpis)) {
                _queryParams.billing_provider_npis = billingProviderNpis.map((item) => item);
            } else {
                _queryParams.billing_provider_npis = billingProviderNpis;
            }
        }

        if (serviceFacilityName != null) {
            _queryParams.service_facility_name = serviceFacilityName;
        }

        if (primaryPayerIds != null) {
            if (Array.isArray(primaryPayerIds)) {
                _queryParams.primary_payer_ids = primaryPayerIds.map((item) => item);
            } else {
                _queryParams.primary_payer_ids = primaryPayerIds;
            }
        }

        if (renderingProviderNpis != null) {
            if (Array.isArray(renderingProviderNpis)) {
                _queryParams.rendering_provider_npis = renderingProviderNpis.map((item) => item);
            } else {
                _queryParams.rendering_provider_npis = renderingProviderNpis;
            }
        }

        if (renderingProviderNames != null) {
            if (Array.isArray(renderingProviderNames)) {
                _queryParams.rendering_provider_names = renderingProviderNames.map((item) => item);
            } else {
                _queryParams.rendering_provider_names = renderingProviderNames;
            }
        }

        if (supervisingProviderNpis != null) {
            if (Array.isArray(supervisingProviderNpis)) {
                _queryParams.supervising_provider_npis = supervisingProviderNpis.map((item) => item);
            } else {
                _queryParams.supervising_provider_npis = supervisingProviderNpis;
            }
        }

        if (supervisingProviderNames != null) {
            if (Array.isArray(supervisingProviderNames)) {
                _queryParams.supervising_provider_names = supervisingProviderNames.map((item) => item);
            } else {
                _queryParams.supervising_provider_names = supervisingProviderNames;
            }
        }

        if (claimStatus != null) {
            _queryParams.claim_status = serializers.ClaimStatus.jsonOrThrow(claimStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (claimCreationCategory != null) {
            if (Array.isArray(claimCreationCategory)) {
                _queryParams.claim_creation_category = claimCreationCategory.map((item) => item);
            } else {
                _queryParams.claim_creation_category = claimCreationCategory;
            }
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                _queryParams.tags = tags.map((item) => item);
            } else {
                _queryParams.tags = tags;
            }
        }

        if (primaryPayerNames != null) {
            if (Array.isArray(primaryPayerNames)) {
                _queryParams.primary_payer_names = primaryPayerNames.map((item) => item);
            } else {
                _queryParams.primary_payer_names = primaryPayerNames;
            }
        }

        if (patientNames != null) {
            if (Array.isArray(patientNames)) {
                _queryParams.patient_names = patientNames.map((item) => item);
            } else {
                _queryParams.patient_names = patientNames;
            }
        }

        if (hasChargeCaptureUpdates != null) {
            _queryParams.has_charge_capture_updates = hasChargeCaptureUpdates.toString();
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_capture_claim_creation/v1",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.chargeCaptureBundles.v1.ChargeCaptureClaimCreationPage.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.chargeCaptureBundles.v1.getAll.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
