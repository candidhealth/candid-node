// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Computes the expected network status given the provided information.
     *
     * @param {CandidApi.expectedNetworkStatus.v1.ExpectedNetworkStatusRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.expectedNetworkStatus.v1.compute({
     *         subscriberPayerId: "subscriber_payer_id",
     *         subscriberPayerName: "subscriber_payer_name",
     *         billingProviderNpi: "billing_provider_npi",
     *         billingProviderTin: "billing_provider_tin",
     *         renderingProviderNpi: "rendering_provider_npi",
     *         contractedState: "AA",
     *         dateOfService: CandidApi.Date_("date_of_service")
     *     })
     */
    public compute(
        request: CandidApi.expectedNetworkStatus.v1.ExpectedNetworkStatusRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.expectedNetworkStatus.v1.ExpectedNetworkStatusResponse,
            CandidApi.expectedNetworkStatus.v1.compute.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__compute(request, requestOptions));
    }

    private async __compute(
        request: CandidApi.expectedNetworkStatus.v1.ExpectedNetworkStatusRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.expectedNetworkStatus.v1.ExpectedNetworkStatusResponse,
                CandidApi.expectedNetworkStatus.v1.compute.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/expected-network-status/v1",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.expectedNetworkStatus.v1.ExpectedNetworkStatusRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.expectedNetworkStatus.v1.ExpectedNetworkStatusResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.expectedNetworkStatus.v1.compute.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
