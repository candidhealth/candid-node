/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as CandidApi from "../../../../..";
import * as core from "../../../../../../core";

export type Error =
    | CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.ExpectedNetworkStatusCheckError
    | CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.OrganizationNotAuthorizedError
    | CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Unknown;

export declare namespace Error {
    interface ExpectedNetworkStatusCheckError extends _Utils {
        errorName: "ExpectedNetworkStatusCheckError";
        content: CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusCheckErrorMessage;
    }

    interface OrganizationNotAuthorizedError extends _Utils {
        errorName: "OrganizationNotAuthorizedError";
        content: CandidApi.OrganizationNotAuthorizedErrorMessage;
    }

    interface _Unknown extends _Utils {
        errorName: void;
        content: core.Fetcher.Error;
    }

    interface _Utils {
        _visit: <_Result>(
            visitor: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Visitor<_Result>
        ) => _Result;
    }

    interface _Visitor<_Result> {
        expectedNetworkStatusCheckError: (
            value: CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusCheckErrorMessage
        ) => _Result;
        organizationNotAuthorizedError: (value: CandidApi.OrganizationNotAuthorizedErrorMessage) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    expectedNetworkStatusCheckError: (
        value: CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusCheckErrorMessage
    ): CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.ExpectedNetworkStatusCheckError => {
        return {
            content: value,
            errorName: "ExpectedNetworkStatusCheckError",
            _visit: function <_Result>(
                this: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.ExpectedNetworkStatusCheckError,
                visitor: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Visitor<_Result>
            ) {
                return CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._visit(this, visitor);
            },
        };
    },

    organizationNotAuthorizedError: (
        value: CandidApi.OrganizationNotAuthorizedErrorMessage
    ): CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.OrganizationNotAuthorizedError => {
        return {
            content: value,
            errorName: "OrganizationNotAuthorizedError",
            _visit: function <_Result>(
                this: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error.OrganizationNotAuthorizedError,
                visitor: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Visitor<_Result>
            ) {
                return CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (
        fetcherError: core.Fetcher.Error
    ): CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Unknown,
                visitor: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Visitor<_Result>
            ) {
                return CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error,
        visitor: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._Visitor<_Result>
    ): _Result => {
        switch (value.errorName) {
            case "ExpectedNetworkStatusCheckError":
                return visitor.expectedNetworkStatusCheckError(value.content);
            case "OrganizationNotAuthorizedError":
                return visitor.organizationNotAuthorizedError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
