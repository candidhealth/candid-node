/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as serializers from "../../../../../../serialization/index";

export declare namespace V2 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class V2 {
    protected readonly _options: V2.Options;

    constructor(_options: V2.Options = {}) {
        this._options = _options;
    }

    /**
     * Computes the expected network status for a given rendering provider.
     * This endpoint is not available to all customers. Reach out to the Candid sales team
     * to discuss enabling this endpoint if it is not available for your organization.
     *
     * @param {CandidApi.organizationProviders.v2.OrganizationProviderId} renderingProviderId
     * @param {CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusRequestV2} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.expectedNetworkStatus.v2.computeForRenderingProvider(CandidApi.organizationProviders.v2.OrganizationProviderId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         serviceType: "new_patient_video_appt",
     *         placeOfServiceCode: "01",
     *         subscriberInformation: {
     *             payerUuid: CandidApi.payers.v3.PayerUuid("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *             memberId: "member_id",
     *             insuranceType: {
     *                 lineOfBusiness: "medicare",
     *                 insuranceTypeCodes: {
     *                     type: "insurance_type_code",
     *                     value: "01"
     *                 }
     *             }
     *         },
     *         patientAddress: {
     *             address1: "address1",
     *             city: "city",
     *             state: "AA",
     *             zipCode: "zip_code"
     *         },
     *         billingProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         dateOfService: "2023-01-15"
     *     })
     */
    public computeForRenderingProvider(
        renderingProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        request: CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusRequestV2,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusResponseV2,
            CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__computeForRenderingProvider(renderingProviderId, request, requestOptions),
        );
    }

    private async __computeForRenderingProvider(
        renderingProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        request: CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusRequestV2,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.expectedNetworkStatus.v2.ExpectedNetworkStatusResponseV2,
                CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/expected-network-status/v2/compute/${encodeURIComponent(serializers.organizationProviders.v2.OrganizationProviderId.jsonOrThrow(renderingProviderId))}`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.expectedNetworkStatus.v2.ExpectedNetworkStatusRequestV2.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.expectedNetworkStatus.v2.ExpectedNetworkStatusResponseV2.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.expectedNetworkStatus.v2.computeForRenderingProvider.Error.Raw)
                    ?.errorName
            ) {
                case "ExpectedNetworkStatusCheckError":
                case "OrganizationNotAuthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.expectedNetworkStatus.v2.computeForRenderingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.expectedNetworkStatus.v2.computeForRenderingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.expectedNetworkStatus.v2.computeForRenderingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Computes all the in network providers for a given set of inputs.
     * This endpoint is not available to all customers. Reach out to the Candid sales team
     * to discuss enabling this endpoint if it is not available for your organization.
     *
     * @param {CandidApi.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersRequest} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.expectedNetworkStatus.v2.computeAllInNetworkProviders({
     *         serviceType: "new_patient_video_appt",
     *         placeOfServiceCode: "01",
     *         subscriberInformation: {
     *             payerUuid: CandidApi.payers.v3.PayerUuid("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *             memberId: "member_id",
     *             insuranceType: {
     *                 lineOfBusiness: "medicare",
     *                 insuranceTypeCodes: {
     *                     type: "insurance_type_code",
     *                     value: "01"
     *                 }
     *             }
     *         },
     *         patientAddress: {
     *             address1: "address1",
     *             city: "city",
     *             state: "AA",
     *             zipCode: "zip_code"
     *         },
     *         billingProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         dateOfService: "2023-01-15"
     *     })
     */
    public computeAllInNetworkProviders(
        request: CandidApi.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersRequest,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersResponse,
            CandidApi.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__computeAllInNetworkProviders(request, requestOptions));
    }

    private async __computeAllInNetworkProviders(
        request: CandidApi.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersRequest,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersResponse,
                CandidApi.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/expected-network-status/v2/compute",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.expectedNetworkStatus.v2.ComputeAllInNetworkProvidersResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error.Raw)
                    ?.errorName
            ) {
                case "ExpectedNetworkStatusCheckError":
                case "OrganizationNotAuthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.expectedNetworkStatus.v2.computeAllInNetworkProviders.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
