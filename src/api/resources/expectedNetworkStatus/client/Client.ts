/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as CandidApi from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace ExpectedNetworkStatus {
    interface Options {
        environment: string;
        token: core.Supplier<core.BearerToken>;
    }
}

export class ExpectedNetworkStatus {
    constructor(protected readonly options: ExpectedNetworkStatus.Options) {}

    public async compute(
        request: CandidApi.ExpectedNetworkStatusRequest
    ): Promise<CandidApi.ExpectedNetworkStatusResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/expected-network-status/v1"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.2",
            },
            contentType: "application/json",
            body: await serializers.ExpectedNetworkStatusRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ExpectedNetworkStatusResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this.options.token)}`;
    }
}
