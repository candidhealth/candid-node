/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    constructor(protected readonly _options: V1.Options = {}) {}

    /**
     * @param {CandidApi.chargeCapture.v1.CreateChargeCaptureRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.create({
     *         data: {},
     *         chargeExternalId: "charge_external_id",
     *         patientExternalId: "patient_external_id",
     *         status: "planned"
     *     })
     */
    public async create(
        request: CandidApi.chargeCapture.v1.CreateChargeCaptureRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.create.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.CreateChargeCaptureRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCapture.v1.create.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                case "ChargeExternalIdConflictError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.create.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.create.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.create.Error._unknown(_response.error),
        };
    }

    /**
     * Create a Charge Capture from a pre-encounter patient and appointment. This endpoint is intended to be used by consumers who are managing
     * patients and appointments in the pre-encounter service and is currently under development. Consumers who are not taking advantage
     * of the pre-encounter service should use the standard create endpoint.
     *
     * At encounter creation time, information from the provided patient and appointment objects will be populated
     * where applicable. In particular, the following fields are populated from the patient and appointment objects:
     *   - Patient
     *   - Referring Provider
     *   - Subscriber Primary
     *   - Subscriber Secondary
     *   - Referral Number
     *   - Responsible Party
     *   - Guarantor
     *
     * Note that these fields should not be populated in the ChargeCaptureData property of this endpoint, as they will be overwritten at encounter creation time.
     *
     * Utilizing this endpoint opts you into automatic updating of the encounter when the patient or appointment is updated, assuming the
     * encounter has not already been submitted or adjudicated.
     *
     * @param {CandidApi.chargeCapture.v1.CreateChargeCaptureFromPreEncounterRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.createFromPreEncounterPatient({
     *         data: {},
     *         chargeExternalId: "charge_external_id",
     *         preEncounterPatientId: CandidApi.PreEncounterPatientId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         preEncounterAppointmentIds: [CandidApi.PreEncounterAppointmentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), CandidApi.PreEncounterAppointmentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")],
     *         status: "planned"
     *     })
     */
    public async createFromPreEncounterPatient(
        request: CandidApi.chargeCapture.v1.CreateChargeCaptureFromPreEncounterRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCapture.v1.ChargeCapture,
            CandidApi.chargeCapture.v1.createFromPreEncounterPatient.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1/create-from-pre-encounter",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.CreateChargeCaptureFromPreEncounterRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.chargeCapture.v1.createFromPreEncounterPatient.Error.Raw)
                    ?.errorName
            ) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                case "ChargeExternalIdConflictError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.createFromPreEncounterPatient.Error.parseOrThrow(
                            _response.error
                                .body as serializers.chargeCapture.v1.createFromPreEncounterPatient.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.createFromPreEncounterPatient.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureId} chargeCaptureId
     * @param {CandidApi.chargeCapture.v1.ChargeCaptureUpdate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.update(CandidApi.ChargeCaptureId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async update(
        chargeCaptureId: CandidApi.ChargeCaptureId,
        request: CandidApi.chargeCapture.v1.ChargeCaptureUpdate = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.update.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/${encodeURIComponent(serializers.ChargeCaptureId.jsonOrThrow(chargeCaptureId))}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.ChargeCaptureUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCapture.v1.update.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.update.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.update.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.update.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureId} chargeCaptureId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.get(CandidApi.ChargeCaptureId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async get(
        chargeCaptureId: CandidApi.ChargeCaptureId,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.get.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/${encodeURIComponent(serializers.ChargeCaptureId.jsonOrThrow(chargeCaptureId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.get.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.chargeCapture.v1.GetAllChargeCapturesRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.getAll()
     */
    public async getAll(
        request: CandidApi.chargeCapture.v1.GetAllChargeCapturesRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapturePage, CandidApi.chargeCapture.v1.getAll.Error>
    > {
        const {
            limit,
            sort,
            sortDirection,
            pageToken,
            patientExternalId,
            status,
            chargeExternalId,
            dateOfServiceMin,
            dateOfServiceMax,
            claimIds,
            claimCreationIds,
            billingProviderNpis,
            serviceFacilityName,
            primaryPayerIds,
            renderingProviderNpis,
            renderingProviderNames,
            supervisingProviderNpis,
            supervisingProviderNames,
            excludeChargesLinkedToClaims,
            patientExternalIdRankedSort,
            statusRankedSort,
            chargeExternalIdRankedSort,
            dateOfServiceMinRankedSort,
            dateOfServiceMaxRankedSort,
            searchTerm,
            billableStatus,
            responsibleParty,
            claimIdsRankedSort,
            claimCreationIdsRankedSort,
            billingProviderNpisRankedSort,
            serviceFacilityNameRankedSort,
            primaryPayerIdsRankedSort,
            renderingProviderNpisRankedSort,
            renderingProviderNamesRankedSort,
            supervisingProviderNpisRankedSort,
            supervisingProviderNamesRankedSort,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (sort != null) {
            _queryParams["sort"] = serializers.chargeCapture.v1.ChargeCaptureSortField.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sortDirection != null) {
            _queryParams["sort_direction"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (patientExternalId != null) {
            _queryParams["patient_external_id"] = patientExternalId;
        }

        if (status != null) {
            _queryParams["status"] = serializers.chargeCapture.v1.ChargeCaptureStatus.jsonOrThrow(status, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (chargeExternalId != null) {
            _queryParams["charge_external_id"] = chargeExternalId;
        }

        if (dateOfServiceMin != null) {
            _queryParams["date_of_service_min"] = dateOfServiceMin;
        }

        if (dateOfServiceMax != null) {
            _queryParams["date_of_service_max"] = dateOfServiceMax;
        }

        if (claimIds != null) {
            if (Array.isArray(claimIds)) {
                _queryParams["claim_ids"] = claimIds.map((item) =>
                    serializers.EncounterId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_ids"] = claimIds;
            }
        }

        if (claimCreationIds != null) {
            if (Array.isArray(claimCreationIds)) {
                _queryParams["claim_creation_ids"] = claimCreationIds.map((item) =>
                    serializers.ChargeCaptureClaimCreationId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_creation_ids"] = claimCreationIds;
            }
        }

        if (billingProviderNpis != null) {
            if (Array.isArray(billingProviderNpis)) {
                _queryParams["billing_provider_npis"] = billingProviderNpis.map((item) => item);
            } else {
                _queryParams["billing_provider_npis"] = billingProviderNpis;
            }
        }

        if (serviceFacilityName != null) {
            _queryParams["service_facility_name"] = serviceFacilityName;
        }

        if (primaryPayerIds != null) {
            if (Array.isArray(primaryPayerIds)) {
                _queryParams["primary_payer_ids"] = primaryPayerIds.map((item) => item);
            } else {
                _queryParams["primary_payer_ids"] = primaryPayerIds;
            }
        }

        if (renderingProviderNpis != null) {
            if (Array.isArray(renderingProviderNpis)) {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis.map((item) => item);
            } else {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis;
            }
        }

        if (renderingProviderNames != null) {
            if (Array.isArray(renderingProviderNames)) {
                _queryParams["rendering_provider_names"] = renderingProviderNames.map((item) => item);
            } else {
                _queryParams["rendering_provider_names"] = renderingProviderNames;
            }
        }

        if (supervisingProviderNpis != null) {
            if (Array.isArray(supervisingProviderNpis)) {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis.map((item) => item);
            } else {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis;
            }
        }

        if (supervisingProviderNames != null) {
            if (Array.isArray(supervisingProviderNames)) {
                _queryParams["supervising_provider_names"] = supervisingProviderNames.map((item) => item);
            } else {
                _queryParams["supervising_provider_names"] = supervisingProviderNames;
            }
        }

        if (excludeChargesLinkedToClaims != null) {
            _queryParams["exclude_charges_linked_to_claims"] = excludeChargesLinkedToClaims.toString();
        }

        if (patientExternalIdRankedSort != null) {
            _queryParams["patient_external_id_ranked_sort"] = patientExternalIdRankedSort;
        }

        if (statusRankedSort != null) {
            _queryParams["status_ranked_sort"] = serializers.chargeCapture.v1.ChargeCaptureStatus.jsonOrThrow(
                statusRankedSort,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (chargeExternalIdRankedSort != null) {
            _queryParams["charge_external_id_ranked_sort"] = chargeExternalIdRankedSort;
        }

        if (dateOfServiceMinRankedSort != null) {
            _queryParams["date_of_service_min_ranked_sort"] = dateOfServiceMinRankedSort;
        }

        if (dateOfServiceMaxRankedSort != null) {
            _queryParams["date_of_service_max_ranked_sort"] = dateOfServiceMaxRankedSort;
        }

        if (searchTerm != null) {
            _queryParams["search_term"] = searchTerm;
        }

        if (billableStatus != null) {
            _queryParams["billable_status"] = serializers.encounters.v4.BillableStatusType.jsonOrThrow(billableStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (responsibleParty != null) {
            _queryParams["responsible_party"] = serializers.encounters.v4.ResponsiblePartyType.jsonOrThrow(
                responsibleParty,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (claimIdsRankedSort != null) {
            if (Array.isArray(claimIdsRankedSort)) {
                _queryParams["claim_ids_ranked_sort"] = claimIdsRankedSort.map((item) =>
                    serializers.EncounterId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_ids_ranked_sort"] = claimIdsRankedSort;
            }
        }

        if (claimCreationIdsRankedSort != null) {
            if (Array.isArray(claimCreationIdsRankedSort)) {
                _queryParams["claim_creation_ids_ranked_sort"] = claimCreationIdsRankedSort.map((item) =>
                    serializers.ChargeCaptureClaimCreationId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_creation_ids_ranked_sort"] = claimCreationIdsRankedSort;
            }
        }

        if (billingProviderNpisRankedSort != null) {
            if (Array.isArray(billingProviderNpisRankedSort)) {
                _queryParams["billing_provider_npis_ranked_sort"] = billingProviderNpisRankedSort.map((item) => item);
            } else {
                _queryParams["billing_provider_npis_ranked_sort"] = billingProviderNpisRankedSort;
            }
        }

        if (serviceFacilityNameRankedSort != null) {
            _queryParams["service_facility_name_ranked_sort"] = serviceFacilityNameRankedSort;
        }

        if (primaryPayerIdsRankedSort != null) {
            if (Array.isArray(primaryPayerIdsRankedSort)) {
                _queryParams["primary_payer_ids_ranked_sort"] = primaryPayerIdsRankedSort.map((item) => item);
            } else {
                _queryParams["primary_payer_ids_ranked_sort"] = primaryPayerIdsRankedSort;
            }
        }

        if (renderingProviderNpisRankedSort != null) {
            if (Array.isArray(renderingProviderNpisRankedSort)) {
                _queryParams["rendering_provider_npis_ranked_sort"] = renderingProviderNpisRankedSort.map(
                    (item) => item,
                );
            } else {
                _queryParams["rendering_provider_npis_ranked_sort"] = renderingProviderNpisRankedSort;
            }
        }

        if (renderingProviderNamesRankedSort != null) {
            if (Array.isArray(renderingProviderNamesRankedSort)) {
                _queryParams["rendering_provider_names_ranked_sort"] = renderingProviderNamesRankedSort.map(
                    (item) => item,
                );
            } else {
                _queryParams["rendering_provider_names_ranked_sort"] = renderingProviderNamesRankedSort;
            }
        }

        if (supervisingProviderNpisRankedSort != null) {
            if (Array.isArray(supervisingProviderNpisRankedSort)) {
                _queryParams["supervising_provider_npis_ranked_sort"] = supervisingProviderNpisRankedSort.map(
                    (item) => item,
                );
            } else {
                _queryParams["supervising_provider_npis_ranked_sort"] = supervisingProviderNpisRankedSort;
            }
        }

        if (supervisingProviderNamesRankedSort != null) {
            if (Array.isArray(supervisingProviderNamesRankedSort)) {
                _queryParams["supervising_provider_names_ranked_sort"] = supervisingProviderNamesRankedSort.map(
                    (item) => item,
                );
            } else {
                _queryParams["supervising_provider_names_ranked_sort"] = supervisingProviderNamesRankedSort;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapturePage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.getAll.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.updatePostBilledChanges({
     *         chargeCaptureChangeIds: [CandidApi.ChargeCapturePostBilledChangeId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), CandidApi.ChargeCapturePostBilledChangeId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")],
     *         resolved: true
     *     })
     */
    public async updatePostBilledChanges(
        request: CandidApi.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCapture.v1.ChargeCapturePostBilledChange[],
            CandidApi.chargeCapture.v1.updatePostBilledChanges.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1/changes/",
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.updatePostBilledChanges.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.chargeCapture.v1.updatePostBilledChanges.Error.Raw)?.errorName
            ) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.updatePostBilledChanges.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.updatePostBilledChanges.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.updatePostBilledChanges.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
