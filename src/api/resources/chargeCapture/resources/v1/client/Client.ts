/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    constructor(protected readonly _options: V1.Options = {}) {}

    /**
     * @param {CandidApi.chargeCapture.v1.CreateChargeCaptureRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.create({
     *         data: {},
     *         chargeExternalId: "string",
     *         ehrSourceUrl: "string",
     *         patientExternalId: "string",
     *         status: "planned"
     *     })
     */
    public async create(
        request: CandidApi.chargeCapture.v1.CreateChargeCaptureRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.create.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.CreateChargeCaptureRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCapture.v1.create.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.create.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.create.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.create.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureId} chargeCaptureId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.delete(CandidApi.ChargeCaptureId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async delete(
        chargeCaptureId: CandidApi.ChargeCaptureId,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<void, CandidApi.chargeCapture.v1.delete.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/${encodeURIComponent(serializers.ChargeCaptureId.jsonOrThrow(chargeCaptureId))}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCapture.v1.delete.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.delete.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.delete.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.delete.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureId} chargeCaptureId
     * @param {CandidApi.chargeCapture.v1.ChargeCaptureUpdate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.update(CandidApi.ChargeCaptureId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         data: {},
     *         chargeExternalId: "string",
     *         ehrSourceUrl: "string",
     *         patientExternalId: "string",
     *         status: "planned"
     *     })
     */
    public async update(
        chargeCaptureId: CandidApi.ChargeCaptureId,
        request: CandidApi.chargeCapture.v1.ChargeCaptureUpdate = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.update.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/${encodeURIComponent(serializers.ChargeCaptureId.jsonOrThrow(chargeCaptureId))}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.ChargeCaptureUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.chargeCapture.v1.update.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.update.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.update.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.update.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCaptureId} chargeCaptureId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.get(CandidApi.ChargeCaptureId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async get(
        chargeCaptureId: CandidApi.ChargeCaptureId,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapture, CandidApi.chargeCapture.v1.get.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/${encodeURIComponent(serializers.ChargeCaptureId.jsonOrThrow(chargeCaptureId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapture.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.get.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.chargeCapture.v1.GetAllChargeCapturesRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.getAll({
     *         limit: 1,
     *         sort: "created_at",
     *         sortDirection: "asc",
     *         pageToken: CandidApi.PageToken("eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9"),
     *         patientExternalId: "string",
     *         status: "planned",
     *         chargeExternalId: "string",
     *         dateOfService: "2023-01-15",
     *         claimIds: CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         bundleId: CandidApi.ChargeCaptureBundleId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         bundleIds: CandidApi.ChargeCaptureBundleId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         billingProviderNpis: "string",
     *         serviceFacilityName: "string",
     *         primaryPayerIds: "string",
     *         renderingProviderNpis: "string",
     *         renderingProviderNames: "string",
     *         supervisingProviderNpis: "string",
     *         supervisingProviderNames: "string",
     *         excludeChargesLinkedToClaims: true
     *     })
     */
    public async getAll(
        request: CandidApi.chargeCapture.v1.GetAllChargeCapturesRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.chargeCapture.v1.ChargeCapturePage, CandidApi.chargeCapture.v1.getAll.Error>
    > {
        const {
            limit,
            sort,
            sortDirection,
            pageToken,
            patientExternalId,
            status,
            chargeExternalId,
            dateOfService,
            claimIds,
            bundleId,
            bundleIds,
            billingProviderNpis,
            serviceFacilityName,
            primaryPayerIds,
            renderingProviderNpis,
            renderingProviderNames,
            supervisingProviderNpis,
            supervisingProviderNames,
            excludeChargesLinkedToClaims,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (sort != null) {
            _queryParams["sort"] = serializers.chargeCapture.v1.ChargeCaptureSortField.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sortDirection != null) {
            _queryParams["sort_direction"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (patientExternalId != null) {
            _queryParams["patient_external_id"] = patientExternalId;
        }

        if (status != null) {
            _queryParams["status"] = serializers.chargeCapture.v1.ChargeCaptureStatus.jsonOrThrow(status, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (chargeExternalId != null) {
            _queryParams["charge_external_id"] = chargeExternalId;
        }

        if (dateOfService != null) {
            _queryParams["date_of_service"] = dateOfService;
        }

        if (claimIds != null) {
            if (Array.isArray(claimIds)) {
                _queryParams["claim_ids"] = claimIds.map((item) =>
                    serializers.EncounterId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["claim_ids"] = claimIds;
            }
        }

        if (bundleId != null) {
            _queryParams["bundle_id"] = bundleId;
        }

        if (bundleIds != null) {
            if (Array.isArray(bundleIds)) {
                _queryParams["bundle_ids"] = bundleIds.map((item) =>
                    serializers.ChargeCaptureBundleId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["bundle_ids"] = bundleIds;
            }
        }

        if (billingProviderNpis != null) {
            if (Array.isArray(billingProviderNpis)) {
                _queryParams["billing_provider_npis"] = billingProviderNpis.map((item) => item);
            } else {
                _queryParams["billing_provider_npis"] = billingProviderNpis;
            }
        }

        if (serviceFacilityName != null) {
            _queryParams["service_facility_name"] = serviceFacilityName;
        }

        if (primaryPayerIds != null) {
            if (Array.isArray(primaryPayerIds)) {
                _queryParams["primary_payer_ids"] = primaryPayerIds.map((item) => item);
            } else {
                _queryParams["primary_payer_ids"] = primaryPayerIds;
            }
        }

        if (renderingProviderNpis != null) {
            if (Array.isArray(renderingProviderNpis)) {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis.map((item) => item);
            } else {
                _queryParams["rendering_provider_npis"] = renderingProviderNpis;
            }
        }

        if (renderingProviderNames != null) {
            if (Array.isArray(renderingProviderNames)) {
                _queryParams["rendering_provider_names"] = renderingProviderNames.map((item) => item);
            } else {
                _queryParams["rendering_provider_names"] = renderingProviderNames;
            }
        }

        if (supervisingProviderNpis != null) {
            if (Array.isArray(supervisingProviderNpis)) {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis.map((item) => item);
            } else {
                _queryParams["supervising_provider_npis"] = supervisingProviderNpis;
            }
        }

        if (supervisingProviderNames != null) {
            if (Array.isArray(supervisingProviderNames)) {
                _queryParams["supervising_provider_names"] = supervisingProviderNames.map((item) => item);
            } else {
                _queryParams["supervising_provider_names"] = supervisingProviderNames;
            }
        }

        if (excludeChargesLinkedToClaims != null) {
            _queryParams["exclude_charges_linked_to_claims"] = excludeChargesLinkedToClaims.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/charge_captures/v1",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapturePage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.getAll.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.ChargeCapturePostBilledChangeId} chargeCaptureChangeId
     * @param {CandidApi.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.chargeCapture.v1.updatePostBilledChange(CandidApi.ChargeCapturePostBilledChangeId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         resolved: true
     *     })
     */
    public async updatePostBilledChange(
        chargeCaptureChangeId: CandidApi.ChargeCapturePostBilledChangeId,
        request: CandidApi.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.chargeCapture.v1.ChargeCapturePostBilledChange,
            CandidApi.chargeCapture.v1.updatePostBilledChange.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/charge_captures/v1/changes/${encodeURIComponent(serializers.ChargeCapturePostBilledChangeId.jsonOrThrow(chargeCaptureChangeId))}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.2",
                "User-Agent": "candidhealth/0.42.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.chargeCapture.v1.ChargeCapturePostBilledChangeUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.chargeCapture.v1.ChargeCapturePostBilledChange.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.chargeCapture.v1.updatePostBilledChange.Error.Raw)?.errorName
            ) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: serializers.chargeCapture.v1.updatePostBilledChange.Error.parseOrThrow(
                            _response.error.body as serializers.chargeCapture.v1.updatePostBilledChange.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.chargeCapture.v1.updatePostBilledChange.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
