// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V2 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V2 {
    protected readonly _options: V2.Options;

    constructor(_options: V2.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.contracts.v2.ContractId} contractId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contracts.v2.get(CandidApi.contracts.v2.ContractId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        contractId: CandidApi.contracts.v2.ContractId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.get.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(contractId, requestOptions));
    }

    private async __get(
        contractId: CandidApi.contracts.v2.ContractId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.get.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/contracts/v2/${core.url.encodePathParam(serializers.contracts.v2.ContractId.jsonOrThrow(contractId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.contracts.v2.ContractWithProviders.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.contracts.v2.get.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.contracts.v2.get.Error.parseOrThrow(
                                _response.error.body as serializers.contracts.v2.get.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.contracts.v2.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.contracts.v2.GetMultiContractsRequest} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contracts.v2.getMulti()
     */
    public getMulti(
        request: CandidApi.contracts.v2.GetMultiContractsRequest = {},
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.contracts.v2.ContractsPage, CandidApi.contracts.v2.getMulti.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(request, requestOptions));
    }

    private async __getMulti(
        request: CandidApi.contracts.v2.GetMultiContractsRequest = {},
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.contracts.v2.ContractsPage, CandidApi.contracts.v2.getMulti.Error>
        >
    > {
        const {
            pageToken,
            limit,
            contractingProviderId,
            renderingProviderIds,
            payerNames,
            states,
            contractStatus,
            sort,
            sortDirection,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (contractingProviderId != null) {
            _queryParams.contracting_provider_id = contractingProviderId;
        }

        if (renderingProviderIds != null) {
            if (Array.isArray(renderingProviderIds)) {
                _queryParams.rendering_provider_ids = renderingProviderIds.map((item) =>
                    serializers.contracts.v2.RenderingProviderid.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams.rendering_provider_ids = renderingProviderIds;
            }
        }

        if (payerNames != null) {
            if (Array.isArray(payerNames)) {
                _queryParams.payer_names = payerNames.map((item) => item);
            } else {
                _queryParams.payer_names = payerNames;
            }
        }

        if (states != null) {
            if (Array.isArray(states)) {
                _queryParams.states = states.map((item) =>
                    serializers.State.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams.states = serializers.State.jsonOrThrow(states, { unrecognizedObjectKeys: "strip" });
            }
        }

        if (contractStatus != null) {
            _queryParams.contract_status = serializers.contracts.v2.ContractStatus.jsonOrThrow(contractStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sort != null) {
            _queryParams.sort = serializers.contracts.v2.ContractSortField.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sortDirection != null) {
            _queryParams.sort_direction = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/contracts/v2",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.contracts.v2.ContractsPage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.contracts.v2.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new contract within the user's current organization
     *
     * @param {CandidApi.contracts.v2.ContractCreate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contracts.v2.create({
     *         contractingProviderId: CandidApi.contracts.v2.ContractingProviderId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         renderingProviderIds: new Set([CandidApi.contracts.v2.RenderingProviderid("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")]),
     *         payerUuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *         effectiveDate: CandidApi.Date_("effective_date"),
     *         regions: {
     *             type: "states",
     *             states: ["AA", "AA"]
     *         },
     *         commercialInsuranceTypes: {
     *             type: "allApply"
     *         },
     *         medicareInsuranceTypes: {
     *             type: "allApply"
     *         },
     *         medicaidInsuranceTypes: {
     *             type: "allApply"
     *         }
     *     })
     */
    public create(
        request: CandidApi.contracts.v2.ContractCreate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.create.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.contracts.v2.ContractCreate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.create.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/contracts/v2",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.contracts.v2.ContractCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.contracts.v2.ContractWithProviders.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.contracts.v2.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.contracts.v2.ContractId} contractId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contracts.v2.delete(CandidApi.contracts.v2.ContractId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public delete(
        contractId: CandidApi.contracts.v2.ContractId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.contracts.v2.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(contractId, requestOptions));
    }

    private async __delete(
        contractId: CandidApi.contracts.v2.ContractId,
        requestOptions?: V2.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.contracts.v2.delete.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/contracts/v2/${core.url.encodePathParam(serializers.contracts.v2.ContractId.jsonOrThrow(contractId))}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.contracts.v2.delete.Error.Raw)?.errorName) {
                case "ContractIsLinkedToFeeScheduleHttpError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.contracts.v2.delete.Error.parseOrThrow(
                                _response.error.body as serializers.contracts.v2.delete.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.contracts.v2.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.contracts.v2.ContractId} contractId
     * @param {CandidApi.contracts.v2.ContractUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contracts.v2.update(CandidApi.contracts.v2.ContractId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public update(
        contractId: CandidApi.contracts.v2.ContractId,
        request: CandidApi.contracts.v2.ContractUpdate = {},
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.update.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(contractId, request, requestOptions));
    }

    private async __update(
        contractId: CandidApi.contracts.v2.ContractId,
        request: CandidApi.contracts.v2.ContractUpdate = {},
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.contracts.v2.ContractWithProviders, CandidApi.contracts.v2.update.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/contracts/v2/${core.url.encodePathParam(serializers.contracts.v2.ContractId.jsonOrThrow(contractId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.contracts.v2.ContractUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.contracts.v2.ContractWithProviders.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.contracts.v2.update.Error.Raw)?.errorName) {
                case "UnprocessableEntityError":
                case "ContractInvalidExpirationDateHttpError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.contracts.v2.update.Error.parseOrThrow(
                                _response.error.body as serializers.contracts.v2.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.contracts.v2.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
