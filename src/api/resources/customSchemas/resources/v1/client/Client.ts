// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all custom schemas.
     *
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customSchemas.v1.getMulti()
     */
    public getMulti(
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.customSchemas.v1.SchemaGetMultiResponse, CandidApi.customSchemas.v1.getMulti.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(requestOptions));
    }

    private async __getMulti(
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.customSchemas.v1.SchemaGetMultiResponse,
                CandidApi.customSchemas.v1.getMulti.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/custom-schemas/v1",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.customSchemas.v1.SchemaGetMultiResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.customSchemas.v1.getMulti.Error.Raw)?.errorName) {
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.customSchemas.v1.getMulti.Error.parseOrThrow(
                                _response.error.body as serializers.customSchemas.v1.getMulti.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.customSchemas.v1.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Return a custom schema with a given ID.
     *
     * @param {CandidApi.SchemaId} schemaId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customSchemas.v1.get(CandidApi.SchemaId("ec096b13-f80a-471d-aaeb-54b021c9d582"))
     */
    public get(
        schemaId: CandidApi.SchemaId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.get.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(schemaId, requestOptions));
    }

    private async __get(
        schemaId: CandidApi.SchemaId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.get.Error>>
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/custom-schemas/v1/${core.url.encodePathParam(serializers.SchemaId.jsonOrThrow(schemaId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.customSchemas.v1.Schema.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.customSchemas.v1.get.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.customSchemas.v1.get.Error.parseOrThrow(
                                _response.error.body as serializers.customSchemas.v1.get.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.customSchemas.v1.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Create custom schema with a set of typed keys. Schema keys can be referenced as inputs in user-configurable rules in the Rules
     * Engine, and key-value pairs can be attached to claims via the Encounters API.
     *
     * @param {CandidApi.customSchemas.v1.SchemaCreate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customSchemas.v1.create({
     *         name: "General Medicine",
     *         description: "Values associated with a generic visit",
     *         fields: [{
     *                 key: "provider_category",
     *                 type: "STRING"
     *             }, {
     *                 key: "is_urgent_care",
     *                 type: "BOOLEAN"
     *             }, {
     *                 key: "bmi",
     *                 type: "DOUBLE"
     *             }, {
     *                 key: "age",
     *                 type: "INTEGER"
     *             }]
     *     })
     */
    public create(
        request: CandidApi.customSchemas.v1.SchemaCreate,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.create.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.customSchemas.v1.SchemaCreate,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.create.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/custom-schemas/v1",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.customSchemas.v1.SchemaCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.customSchemas.v1.Schema.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.customSchemas.v1.create.Error.Raw)?.errorName) {
                case "SchemaValidationHttpFailure":
                    return {
                        data: {
                            ok: false,
                            error: serializers.customSchemas.v1.create.Error.parseOrThrow(
                                _response.error.body as serializers.customSchemas.v1.create.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.customSchemas.v1.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Update the name, description, or keys on a preexisting schema.
     *
     * @param {CandidApi.SchemaId} schemaId
     * @param {CandidApi.customSchemas.v1.SchemaUpdate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customSchemas.v1.update(CandidApi.SchemaId("ec096b13-f80a-471d-aaeb-54b021c9d582"), {
     *         name: "General Medicine and Health",
     *         description: "Values collected during all visits",
     *         fieldsToAdd: [{
     *                 key: "visit_type",
     *                 type: "STRING"
     *             }]
     *     })
     */
    public update(
        schemaId: CandidApi.SchemaId,
        request: CandidApi.customSchemas.v1.SchemaUpdate = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.update.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(schemaId, request, requestOptions));
    }

    private async __update(
        schemaId: CandidApi.SchemaId,
        request: CandidApi.customSchemas.v1.SchemaUpdate = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.customSchemas.v1.Schema, CandidApi.customSchemas.v1.update.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/custom-schemas/v1/${core.url.encodePathParam(serializers.SchemaId.jsonOrThrow(schemaId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.customSchemas.v1.SchemaUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.customSchemas.v1.Schema.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.customSchemas.v1.update.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "SchemaValidationHttpFailure":
                    return {
                        data: {
                            ok: false,
                            error: serializers.customSchemas.v1.update.Error.parseOrThrow(
                                _response.error.body as serializers.customSchemas.v1.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.customSchemas.v1.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
