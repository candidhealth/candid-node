/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as CandidApi from "../../../../../index";
import * as core from "../../../../../../core";

export type Error =
    | CandidApi.guarantor.v1.create.Error.EncounterHasExistingGuarantorError
    | CandidApi.guarantor.v1.create.Error.HttpRequestValidationsError
    | CandidApi.guarantor.v1.create.Error._Unknown;

export namespace Error {
    export interface EncounterHasExistingGuarantorError extends _Utils {
        errorName: "EncounterHasExistingGuarantorError";
        content: CandidApi.guarantor.v1.EncounterHasExistingGuarantorErrorType;
    }

    export interface HttpRequestValidationsError extends _Utils {
        errorName: "HttpRequestValidationsError";
        content: CandidApi.RequestValidationError[];
    }

    export interface _Unknown extends _Utils {
        errorName: void;
        content: core.Fetcher.Error;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: CandidApi.guarantor.v1.create.Error._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        encounterHasExistingGuarantorError: (
            value: CandidApi.guarantor.v1.EncounterHasExistingGuarantorErrorType,
        ) => _Result;
        httpRequestValidationsError: (value: CandidApi.RequestValidationError[]) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    encounterHasExistingGuarantorError: (
        value: CandidApi.guarantor.v1.EncounterHasExistingGuarantorErrorType,
    ): CandidApi.guarantor.v1.create.Error.EncounterHasExistingGuarantorError => {
        return {
            content: value,
            errorName: "EncounterHasExistingGuarantorError",
            _visit: function <_Result>(
                this: CandidApi.guarantor.v1.create.Error.EncounterHasExistingGuarantorError,
                visitor: CandidApi.guarantor.v1.create.Error._Visitor<_Result>,
            ) {
                return CandidApi.guarantor.v1.create.Error._visit(this, visitor);
            },
        };
    },

    httpRequestValidationsError: (
        value: CandidApi.RequestValidationError[],
    ): CandidApi.guarantor.v1.create.Error.HttpRequestValidationsError => {
        return {
            content: value,
            errorName: "HttpRequestValidationsError",
            _visit: function <_Result>(
                this: CandidApi.guarantor.v1.create.Error.HttpRequestValidationsError,
                visitor: CandidApi.guarantor.v1.create.Error._Visitor<_Result>,
            ) {
                return CandidApi.guarantor.v1.create.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): CandidApi.guarantor.v1.create.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: CandidApi.guarantor.v1.create.Error._Unknown,
                visitor: CandidApi.guarantor.v1.create.Error._Visitor<_Result>,
            ) {
                return CandidApi.guarantor.v1.create.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: CandidApi.guarantor.v1.create.Error,
        visitor: CandidApi.guarantor.v1.create.Error._Visitor<_Result>,
    ): _Result => {
        switch (value.errorName) {
            case "EncounterHasExistingGuarantorError":
                return visitor.encounterHasExistingGuarantorError(value.content);
            case "HttpRequestValidationsError":
                return visitor.httpRequestValidationsError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
