// This file was auto-generated by Fern from our API Definition.

import type * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";

export type Error =
    /**
     * The encounter already has a referring provider. */
    | CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityConflictError
    | CandidApi.encounterProviders.v2.createReferringProvider.Error.HttpRequestValidationsError
    /**
     * The encounter could not be found. */
    | CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityNotFoundError
    | CandidApi.encounterProviders.v2.createReferringProvider.Error._Unknown;

export namespace Error {
    export interface EntityConflictError extends _Utils {
        errorName: "EntityConflictError";
        content: CandidApi.EntityConflictErrorMessage;
    }

    export interface HttpRequestValidationsError extends _Utils {
        errorName: "HttpRequestValidationsError";
        content: CandidApi.RequestValidationError[];
    }

    export interface EntityNotFoundError extends _Utils {
        errorName: "EntityNotFoundError";
        content: CandidApi.EntityNotFoundErrorMessage;
    }

    export interface _Unknown extends _Utils {
        errorName: void;
        content: core.Fetcher.Error;
    }

    export interface _Utils {
        _visit: <_Result>(
            visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
        ) => _Result;
    }

    export interface _Visitor<_Result> {
        entityConflictError: (value: CandidApi.EntityConflictErrorMessage) => _Result;
        httpRequestValidationsError: (value: CandidApi.RequestValidationError[]) => _Result;
        entityNotFoundError: (value: CandidApi.EntityNotFoundErrorMessage) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    entityConflictError: (
        value: CandidApi.EntityConflictErrorMessage,
    ): CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityConflictError => {
        return {
            content: value,
            errorName: "EntityConflictError",
            _visit: function <_Result>(
                this: CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityConflictError,
                visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
            ) {
                return CandidApi.encounterProviders.v2.createReferringProvider.Error._visit(this, visitor);
            },
        };
    },

    httpRequestValidationsError: (
        value: CandidApi.RequestValidationError[],
    ): CandidApi.encounterProviders.v2.createReferringProvider.Error.HttpRequestValidationsError => {
        return {
            content: value,
            errorName: "HttpRequestValidationsError",
            _visit: function <_Result>(
                this: CandidApi.encounterProviders.v2.createReferringProvider.Error.HttpRequestValidationsError,
                visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
            ) {
                return CandidApi.encounterProviders.v2.createReferringProvider.Error._visit(this, visitor);
            },
        };
    },

    entityNotFoundError: (
        value: CandidApi.EntityNotFoundErrorMessage,
    ): CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityNotFoundError => {
        return {
            content: value,
            errorName: "EntityNotFoundError",
            _visit: function <_Result>(
                this: CandidApi.encounterProviders.v2.createReferringProvider.Error.EntityNotFoundError,
                visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
            ) {
                return CandidApi.encounterProviders.v2.createReferringProvider.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (
        fetcherError: core.Fetcher.Error,
    ): CandidApi.encounterProviders.v2.createReferringProvider.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: CandidApi.encounterProviders.v2.createReferringProvider.Error._Unknown,
                visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
            ) {
                return CandidApi.encounterProviders.v2.createReferringProvider.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: CandidApi.encounterProviders.v2.createReferringProvider.Error,
        visitor: CandidApi.encounterProviders.v2.createReferringProvider.Error._Visitor<_Result>,
    ): _Result => {
        switch (value.errorName) {
            case "EntityConflictError":
                return visitor.entityConflictError(value.content);
            case "HttpRequestValidationsError":
                return visitor.httpRequestValidationsError(value.content);
            case "EntityNotFoundError":
                return visitor.entityNotFoundError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
