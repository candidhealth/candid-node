/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as serializers from "../../../../../../serialization/index";

export declare namespace V2 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class V2 {
    protected readonly _options: V2.Options;

    constructor(_options: V2.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.ReferringProviderUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.updateReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public updateReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.ReferringProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.updateReferringProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__updateReferringProvider(encounterId, request, requestOptions),
        );
    }

    private async __updateReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.ReferringProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.updateReferringProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.ReferringProviderUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.updateReferringProvider.Error.Raw)?.errorName
            ) {
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.updateReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.updateReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.updateReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.InitialReferringProviderUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.updateInitialReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public updateInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.InitialReferringProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.updateInitialReferringProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__updateInitialReferringProvider(encounterId, request, requestOptions),
        );
    }

    private async __updateInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.InitialReferringProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.updateInitialReferringProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/initial-referring-provider`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.InitialReferringProviderUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.updateInitialReferringProvider.Error.Raw)
                    ?.errorName
            ) {
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.updateInitialReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.updateInitialReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.updateInitialReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.SupervisingProviderUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.updateSupervisingProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public updateSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.SupervisingProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.updateSupervisingProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__updateSupervisingProvider(encounterId, request, requestOptions),
        );
    }

    private async __updateSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.SupervisingProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.updateSupervisingProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/supervising-provider`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.SupervisingProviderUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.updateSupervisingProvider.Error.Raw)
                    ?.errorName
            ) {
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.updateSupervisingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.updateSupervisingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.updateSupervisingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.ServiceLineId} serviceLineId
     * @param {CandidApi.encounterProviders.v2.OrderingProviderUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.updateOrderingProvider(CandidApi.ServiceLineId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public updateOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        request: CandidApi.encounterProviders.v2.OrderingProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.updateOrderingProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__updateOrderingProvider(serviceLineId, request, requestOptions),
        );
    }

    private async __updateOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        request: CandidApi.encounterProviders.v2.OrderingProviderUpdate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.updateOrderingProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.ServiceLineId.jsonOrThrow(serviceLineId))}/ordering-provider`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.OrderingProviderUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.updateOrderingProvider.Error.Raw)?.errorName
            ) {
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.updateOrderingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.updateOrderingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.updateOrderingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.ReferringProvider} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.createReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         npi: "npi"
     *     })
     */
    public createReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.ReferringProvider,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.createReferringProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__createReferringProvider(encounterId, request, requestOptions),
        );
    }

    private async __createReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.ReferringProvider,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.createReferringProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/create-referring-provider`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.ReferringProvider.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.createReferringProvider.Error.Raw)?.errorName
            ) {
                case "EntityConflictError":
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.createReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.createReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.createReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.InitialReferringProvider} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.createInitialReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         npi: "npi"
     *     })
     */
    public createInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.InitialReferringProvider,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.createInitialReferringProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__createInitialReferringProvider(encounterId, request, requestOptions),
        );
    }

    private async __createInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.InitialReferringProvider,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.createInitialReferringProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/create-initial-referring-provider`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.InitialReferringProvider.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.createInitialReferringProvider.Error.Raw)
                    ?.errorName
            ) {
                case "EntityConflictError":
                case "UnprocessableEntityError":
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.createInitialReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.createInitialReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.createInitialReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterProviders.v2.SupervisingProvider} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.createSupervisingProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         npi: "npi"
     *     })
     */
    public createSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.SupervisingProvider,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.createSupervisingProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__createSupervisingProvider(encounterId, request, requestOptions),
        );
    }

    private async __createSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterProviders.v2.SupervisingProvider,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.createSupervisingProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/create-supervising-provider`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.SupervisingProvider.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.createSupervisingProvider.Error.Raw)
                    ?.errorName
            ) {
                case "EntityConflictError":
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.createSupervisingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.createSupervisingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.createSupervisingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.ServiceLineId} serviceLineId
     * @param {CandidApi.encounterProviders.v2.OrderingProvider} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.createOrderingProvider(CandidApi.ServiceLineId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         npi: "npi"
     *     })
     */
    public createOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        request: CandidApi.encounterProviders.v2.OrderingProvider,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterProviders.v2.EncounterProvider,
            CandidApi.encounterProviders.v2.createOrderingProvider.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__createOrderingProvider(serviceLineId, request, requestOptions),
        );
    }

    private async __createOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        request: CandidApi.encounterProviders.v2.OrderingProvider,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterProviders.v2.EncounterProvider,
                CandidApi.encounterProviders.v2.createOrderingProvider.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.ServiceLineId.jsonOrThrow(serviceLineId))}/create-ordering-provider`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterProviders.v2.OrderingProvider.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterProviders.v2.EncounterProvider.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.createOrderingProvider.Error.Raw)?.errorName
            ) {
                case "EntityConflictError":
                case "HttpRequestValidationsError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.createOrderingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.createOrderingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.createOrderingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.deleteReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public deleteReferringProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.encounterProviders.v2.deleteReferringProvider.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__deleteReferringProvider(encounterId, requestOptions));
    }

    private async __deleteReferringProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, CandidApi.encounterProviders.v2.deleteReferringProvider.Error>>
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/referring-provider`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.deleteReferringProvider.Error.Raw)?.errorName
            ) {
                case "EntityNotFoundError":
                case "EntityConflictError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.deleteReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.deleteReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.deleteReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.deleteInitialReferringProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public deleteInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<void, CandidApi.encounterProviders.v2.deleteInitialReferringProvider.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__deleteInitialReferringProvider(encounterId, requestOptions));
    }

    private async __deleteInitialReferringProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<void, CandidApi.encounterProviders.v2.deleteInitialReferringProvider.Error>
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/initial-referring-provider`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.deleteInitialReferringProvider.Error.Raw)
                    ?.errorName
            ) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.deleteInitialReferringProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.deleteInitialReferringProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.deleteInitialReferringProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.deleteSupervisingProvider(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public deleteSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<void, CandidApi.encounterProviders.v2.deleteSupervisingProvider.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__deleteSupervisingProvider(encounterId, requestOptions));
    }

    private async __deleteSupervisingProvider(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, CandidApi.encounterProviders.v2.deleteSupervisingProvider.Error>>
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}/supervising-provider`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.deleteSupervisingProvider.Error.Raw)
                    ?.errorName
            ) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.deleteSupervisingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.deleteSupervisingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.deleteSupervisingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.ServiceLineId} serviceLineId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterProviders.v2.deleteOrderingProvider(CandidApi.ServiceLineId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public deleteOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.encounterProviders.v2.deleteOrderingProvider.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__deleteOrderingProvider(serviceLineId, requestOptions));
    }

    private async __deleteOrderingProvider(
        serviceLineId: CandidApi.ServiceLineId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, CandidApi.encounterProviders.v2.deleteOrderingProvider.Error>>
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-providers/v2/${encodeURIComponent(serializers.ServiceLineId.jsonOrThrow(serviceLineId))}/ordering-provider`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounterProviders.v2.deleteOrderingProvider.Error.Raw)?.errorName
            ) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.encounterProviders.v2.deleteOrderingProvider.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.encounterProviders.v2.deleteOrderingProvider.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterProviders.v2.deleteOrderingProvider.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
