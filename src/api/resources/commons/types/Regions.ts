/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { CandidApi } from "";

export type Regions = CandidApi.Regions.States | CandidApi.Regions.National | CandidApi.Regions._Unknown;

export declare namespace Regions {
    interface States extends CandidApi.RegionStates, _Utils {
        type: "states";
    }

    interface National extends CandidApi.RegionNational, _Utils {
        type: "national";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: CandidApi.Regions._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        states: (value: CandidApi.RegionStates) => _Result;
        national: (value: CandidApi.RegionNational) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Regions = {
    states: (value: CandidApi.RegionStates): CandidApi.Regions.States => {
        return {
            ...value,
            type: "states",
            _visit: function <_Result>(this: CandidApi.Regions.States, visitor: CandidApi.Regions._Visitor<_Result>) {
                return CandidApi.Regions._visit(this, visitor);
            },
        };
    },

    national: (value: CandidApi.RegionNational): CandidApi.Regions.National => {
        return {
            ...value,
            type: "national",
            _visit: function <_Result>(this: CandidApi.Regions.National, visitor: CandidApi.Regions._Visitor<_Result>) {
                return CandidApi.Regions._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): CandidApi.Regions._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(this: CandidApi.Regions._Unknown, visitor: CandidApi.Regions._Visitor<_Result>) {
                return CandidApi.Regions._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: CandidApi.Regions, visitor: CandidApi.Regions._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "states":
                return visitor.states(value);
            case "national":
                return visitor.national(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
