// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as environments from "../../../../environments";
import * as serializers from "../../../../serialization/index";
import * as CandidApi from "../../../index";

export declare namespace ServiceFacility {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class ServiceFacility {
    protected readonly _options: ServiceFacility.Options;

    constructor(_options: ServiceFacility.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.ServiceFacilityId} serviceFacilityId
     * @param {CandidApi.EncounterServiceFacilityUpdate} request
     * @param {ServiceFacility.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.serviceFacility.update(CandidApi.ServiceFacilityId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public update(
        serviceFacilityId: CandidApi.ServiceFacilityId,
        request: CandidApi.EncounterServiceFacilityUpdate,
        requestOptions?: ServiceFacility.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.EncounterServiceFacility, CandidApi.serviceFacility.update.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(serviceFacilityId, request, requestOptions));
    }

    private async __update(
        serviceFacilityId: CandidApi.ServiceFacilityId,
        request: CandidApi.EncounterServiceFacilityUpdate,
        requestOptions?: ServiceFacility.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<CandidApi.EncounterServiceFacility, CandidApi.serviceFacility.update.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/service_facility/v2/${core.url.encodePathParam(serializers.ServiceFacilityId.jsonOrThrow(serviceFacilityId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.EncounterServiceFacilityUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.EncounterServiceFacility.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.serviceFacility.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
