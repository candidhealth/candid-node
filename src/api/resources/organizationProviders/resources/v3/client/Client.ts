// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V3 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V3 {
    protected readonly _options: V3.Options;

    constructor(_options: V3.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.organizationProviders.v2.OrganizationProviderId} organizationProviderId
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationProviders.v3.get(CandidApi.organizationProviders.v2.OrganizationProviderId("965A563A-0285-4910-9569-E3739C0F6EAB"))
     */
    public get(
        organizationProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        requestOptions?: V3.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationProviders.v3.OrganizationProviderV2,
            CandidApi.organizationProviders.v3.get.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(organizationProviderId, requestOptions));
    }

    private async __get(
        organizationProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        requestOptions?: V3.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationProviders.v3.OrganizationProviderV2,
                CandidApi.organizationProviders.v3.get.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-providers/v3/${core.url.encodePathParam(serializers.organizationProviders.v2.OrganizationProviderId.jsonOrThrow(organizationProviderId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationProviders.v3.OrganizationProviderV2.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.organizationProviders.v3.get.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationProviders.v3.get.Error.parseOrThrow(
                                _response.error.body as serializers.organizationProviders.v3.get.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationProviders.v3.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationProviders.v3.GetAllOrganizationProvidersRequestV2} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationProviders.v3.getMulti({
     *         limit: 100,
     *         searchTerm: "john",
     *         npi: "1234567890",
     *         isRendering: true,
     *         isBilling: true,
     *         pageToken: CandidApi.PageToken("eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9"),
     *         sort: "provider_name:asc"
     *     })
     */
    public getMulti(
        request: CandidApi.organizationProviders.v3.GetAllOrganizationProvidersRequestV2 = {},
        requestOptions?: V3.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationProviders.v3.OrganizationProviderPageV2,
            CandidApi.organizationProviders.v3.getMulti.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(request, requestOptions));
    }

    private async __getMulti(
        request: CandidApi.organizationProviders.v3.GetAllOrganizationProvidersRequestV2 = {},
        requestOptions?: V3.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationProviders.v3.OrganizationProviderPageV2,
                CandidApi.organizationProviders.v3.getMulti.Error
            >
        >
    > {
        const { limit, searchTerm, npi, isRendering, isBilling, organizationProviderIds, pageToken, sort } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (searchTerm != null) {
            _queryParams.search_term = searchTerm;
        }

        if (npi != null) {
            _queryParams.npi = npi;
        }

        if (isRendering != null) {
            _queryParams.is_rendering = isRendering.toString();
        }

        if (isBilling != null) {
            _queryParams.is_billing = isBilling.toString();
        }

        if (organizationProviderIds != null) {
            if (Array.isArray(organizationProviderIds)) {
                _queryParams.organization_provider_ids = organizationProviderIds.map((item) =>
                    serializers.organizationProviders.v2.OrganizationProviderId.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                    }),
                );
            } else {
                _queryParams.organization_provider_ids = organizationProviderIds;
            }
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (sort != null) {
            _queryParams.sort = serializers.organizationProviders.v2.OrganizationProviderSortOptions.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/organization-providers/v3",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationProviders.v3.OrganizationProviderPageV2.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationProviders.v3.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationProviders.v3.OrganizationProviderCreateV2} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationProviders.v3.create({
     *         npi: "npi",
     *         isRendering: true,
     *         isBilling: true,
     *         providerType: "INDIVIDUAL",
     *         licenseType: "MD",
     *         qualifications: [{
     *                 identifierCode: "MCR",
     *                 identifierValue: {
     *                     type: "medicare_provider_identifier",
     *                     state: "AA",
     *                     providerNumber: "provider_number"
     *                 }
     *             }, {
     *                 identifierCode: "MCR",
     *                 identifierValue: {
     *                     type: "medicare_provider_identifier",
     *                     state: "AA",
     *                     providerNumber: "provider_number"
     *                 }
     *             }]
     *     })
     */
    public create(
        request: CandidApi.organizationProviders.v3.OrganizationProviderCreateV2,
        requestOptions?: V3.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationProviders.v3.OrganizationProviderV2,
            CandidApi.organizationProviders.v3.create.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.organizationProviders.v3.OrganizationProviderCreateV2,
        requestOptions?: V3.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationProviders.v3.OrganizationProviderV2,
                CandidApi.organizationProviders.v3.create.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/organization-providers/v3",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.organizationProviders.v3.OrganizationProviderCreateV2.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationProviders.v3.OrganizationProviderV2.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.organizationProviders.v3.create.Error.Raw)?.errorName) {
                case "HttpRequestValidationError":
                case "UpdatesDisabledDueToExternalSystemIntegrationError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationProviders.v3.create.Error.parseOrThrow(
                                _response.error.body as serializers.organizationProviders.v3.create.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationProviders.v3.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationProviders.v2.OrganizationProviderId} organizationProviderId
     * @param {CandidApi.organizationProviders.v3.OrganizationProviderUpdateV2} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationProviders.v3.update(CandidApi.organizationProviders.v2.OrganizationProviderId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {})
     */
    public update(
        organizationProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        request: CandidApi.organizationProviders.v3.OrganizationProviderUpdateV2,
        requestOptions?: V3.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationProviders.v3.OrganizationProviderV2,
            CandidApi.organizationProviders.v3.update.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(organizationProviderId, request, requestOptions));
    }

    private async __update(
        organizationProviderId: CandidApi.organizationProviders.v2.OrganizationProviderId,
        request: CandidApi.organizationProviders.v3.OrganizationProviderUpdateV2,
        requestOptions?: V3.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationProviders.v3.OrganizationProviderV2,
                CandidApi.organizationProviders.v3.update.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-providers/v3/${core.url.encodePathParam(serializers.organizationProviders.v2.OrganizationProviderId.jsonOrThrow(organizationProviderId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.organizationProviders.v3.OrganizationProviderUpdateV2.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationProviders.v3.OrganizationProviderV2.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.organizationProviders.v3.update.Error.Raw)?.errorName) {
                case "HttpRequestValidationError":
                case "EntityNotFoundError":
                case "UpdatesDisabledDueToExternalSystemIntegrationError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationProviders.v3.update.Error.parseOrThrow(
                                _response.error.body as serializers.organizationProviders.v3.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationProviders.v3.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
