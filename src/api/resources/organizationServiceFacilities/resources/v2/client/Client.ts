// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V2 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V2 {
    protected readonly _options: V2.Options;

    constructor(_options: V2.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId} organizationServiceFacilityId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.get(CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
            CandidApi.organizationServiceFacilities.v2.get.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(organizationServiceFacilityId, requestOptions));
    }

    private async __get(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
                CandidApi.organizationServiceFacilities.v2.get.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-service-facilities/v2/${core.url.encodePathParam(serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityId.jsonOrThrow(organizationServiceFacilityId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacility.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.organizationServiceFacilities.v2.get.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationServiceFacilities.v2.get.Error.parseOrThrow(
                                _response.error.body as serializers.organizationServiceFacilities.v2.get.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationServiceFacilities.v2.GetAllOrganizationServiceFacilitiesRequest} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.getMulti({
     *         limit: 100,
     *         name: "Test Service Facility",
     *         pageToken: CandidApi.PageToken("eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9")
     *     })
     */
    public getMulti(
        request: CandidApi.organizationServiceFacilities.v2.GetAllOrganizationServiceFacilitiesRequest = {},
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityPage,
            CandidApi.organizationServiceFacilities.v2.getMulti.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(request, requestOptions));
    }

    private async __getMulti(
        request: CandidApi.organizationServiceFacilities.v2.GetAllOrganizationServiceFacilitiesRequest = {},
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityPage,
                CandidApi.organizationServiceFacilities.v2.getMulti.Error
            >
        >
    > {
        const { limit, name, organizationServiceFacilityIds, externalIds, placeOfServiceCode, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (name != null) {
            _queryParams.name = name;
        }

        if (organizationServiceFacilityIds != null) {
            if (Array.isArray(organizationServiceFacilityIds)) {
                _queryParams.organization_service_facility_ids = organizationServiceFacilityIds.map((item) =>
                    serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityId.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                    }),
                );
            } else {
                _queryParams.organization_service_facility_ids = organizationServiceFacilityIds;
            }
        }

        if (externalIds != null) {
            if (Array.isArray(externalIds)) {
                _queryParams.external_ids = externalIds.map((item) => item);
            } else {
                _queryParams.external_ids = externalIds;
            }
        }

        if (placeOfServiceCode != null) {
            _queryParams.place_of_service_code = serializers.FacilityTypeCode.jsonOrThrow(placeOfServiceCode, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/organization-service-facilities/v2",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityPage.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Looks up a single organization service facility by its `external_id` field. This can be useful
     * for finding service facilities within Candid which are associated with service facilities in
     * an external system.
     *
     * @param {string} externalId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.getByExternalId("external_id")
     */
    public getByExternalId(
        externalId: string,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
            CandidApi.organizationServiceFacilities.v2.getByExternalId.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getByExternalId(externalId, requestOptions));
    }

    private async __getByExternalId(
        externalId: string,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
                CandidApi.organizationServiceFacilities.v2.getByExternalId.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-service-facilities/v2/external-id/${core.url.encodePathParam(externalId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacility.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.organizationServiceFacilities.v2.getByExternalId.Error.Raw)
                    ?.errorName
            ) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationServiceFacilities.v2.getByExternalId.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.organizationServiceFacilities.v2.getByExternalId.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.getByExternalId.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityCreate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.create({
     *         name: "Test Service Facility",
     *         aliases: ["Test Service Facility Alias"],
     *         description: "Test Service Facility Description",
     *         status: "active",
     *         operationalStatus: "C",
     *         mode: "instance",
     *         type: "DX",
     *         physicalType: "si",
     *         telecoms: ["555-555-5555"],
     *         address: {
     *             address1: "123 Main St",
     *             address2: "Apt 1",
     *             city: "New York",
     *             state: "NY",
     *             zipCode: "10001",
     *             zipPlusFourCode: "1234"
     *         }
     *     })
     */
    public create(
        request: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityCreate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
            CandidApi.organizationServiceFacilities.v2.create.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityCreate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
                CandidApi.organizationServiceFacilities.v2.create.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/organization-service-facilities/v2",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityCreate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacility.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.organizationServiceFacilities.v2.create.Error.Raw)?.errorName
            ) {
                case "HttpRequestValidationError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationServiceFacilities.v2.create.Error.parseOrThrow(
                                _response.error.body as serializers.organizationServiceFacilities.v2.create.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId} organizationServiceFacilityId
     * @param {CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityUpdate} request
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.update(CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId("30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569"), {
     *         name: "Test Service Facility",
     *         aliases: ["Test Service Facility Alias"],
     *         description: "Test Service Facility Description",
     *         status: "active",
     *         operationalStatus: "C",
     *         mode: "instance",
     *         type: "DX",
     *         physicalType: "si",
     *         telecoms: ["555-555-5555"],
     *         address: {
     *             address1: "123 Main St",
     *             address2: "Apt 1",
     *             city: "New York",
     *             state: "NY",
     *             zipCode: "10001",
     *             zipPlusFourCode: "1234"
     *         }
     *     })
     */
    public update(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        request: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityUpdate,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
            CandidApi.organizationServiceFacilities.v2.update.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__update(organizationServiceFacilityId, request, requestOptions),
        );
    }

    private async __update(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        request: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityUpdate,
        requestOptions?: V2.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacility,
                CandidApi.organizationServiceFacilities.v2.update.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-service-facilities/v2/${core.url.encodePathParam(serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityId.jsonOrThrow(organizationServiceFacilityId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.organizationServiceFacilities.v2.OrganizationServiceFacility.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.organizationServiceFacilities.v2.update.Error.Raw)?.errorName
            ) {
                case "HttpRequestValidationError":
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationServiceFacilities.v2.update.Error.parseOrThrow(
                                _response.error.body as serializers.organizationServiceFacilities.v2.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId} organizationServiceFacilityId
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizationServiceFacilities.v2.delete(CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId("30F55EE6-8C0E-43FC-A7FC-DAC00D5BF569"))
     */
    public delete(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.organizationServiceFacilities.v2.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(organizationServiceFacilityId, requestOptions));
    }

    private async __delete(
        organizationServiceFacilityId: CandidApi.organizationServiceFacilities.v2.OrganizationServiceFacilityId,
        requestOptions?: V2.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.organizationServiceFacilities.v2.delete.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/organization-service-facilities/v2/${core.url.encodePathParam(serializers.organizationServiceFacilities.v2.OrganizationServiceFacilityId.jsonOrThrow(organizationServiceFacilityId))}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.organizationServiceFacilities.v2.delete.Error.Raw)?.errorName
            ) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.organizationServiceFacilities.v2.delete.Error.parseOrThrow(
                                _response.error.body as serializers.organizationServiceFacilities.v2.delete.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.organizationServiceFacilities.v2.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
