// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../../../BaseClient";
import * as core from "../../../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers";
import * as environments from "../../../../../../../../environments";
import * as serializers from "../../../../../../../../serialization/index";
import * as CandidApi from "../../../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Gets patients with dependent objects for patients that match the query parameters.
     *
     * @param {CandidApi.preEncounter.lists.v1.PatientListRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.lists.v1.getPatientList()
     */
    public getPatientList(
        request: CandidApi.preEncounter.lists.v1.PatientListRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.lists.v1.PatientListPage,
            CandidApi.preEncounter.lists.v1.getPatientList.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getPatientList(request, requestOptions));
    }

    private async __getPatientList(
        request: CandidApi.preEncounter.lists.v1.PatientListRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.lists.v1.PatientListPage,
                CandidApi.preEncounter.lists.v1.getPatientList.Error
            >
        >
    > {
        const { pageToken, limit, sortField, sortDirection, filters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (sortField != null) {
            _queryParams.sort_field = sortField;
        }

        if (sortDirection != null) {
            _queryParams.sort_direction = serializers.preEncounter.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (filters != null) {
            _queryParams.filters = filters;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/lists/v1/patient",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.lists.v1.PatientListPage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.preEncounter.lists.v1.getPatientList.Error.Raw)?.errorName) {
                case "BadRequestError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.preEncounter.lists.v1.getPatientList.Error.parseOrThrow(
                                _response.error.body as serializers.preEncounter.lists.v1.getPatientList.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.lists.v1.getPatientList.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Searches for appointments that match the query parameters.
     *
     * @param {CandidApi.preEncounter.lists.v1.AppointmentsGetListRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.lists.v1.getAppointmentList()
     */
    public getAppointmentList(
        request: CandidApi.preEncounter.lists.v1.AppointmentsGetListRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.lists.v1.AppointmentListPage,
            CandidApi.preEncounter.lists.v1.getAppointmentList.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAppointmentList(request, requestOptions));
    }

    private async __getAppointmentList(
        request: CandidApi.preEncounter.lists.v1.AppointmentsGetListRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.lists.v1.AppointmentListPage,
                CandidApi.preEncounter.lists.v1.getAppointmentList.Error
            >
        >
    > {
        const { sortField, sortDirection, limit, pageToken, filters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (sortField != null) {
            _queryParams.sort_field = sortField;
        }

        if (sortDirection != null) {
            _queryParams.sort_direction = serializers.preEncounter.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (filters != null) {
            _queryParams.filters = filters;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/lists/v1/appointment",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.lists.v1.AppointmentListPage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.lists.v1.getAppointmentList.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
