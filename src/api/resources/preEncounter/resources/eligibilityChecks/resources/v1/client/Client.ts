// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../../../BaseClient";
import * as core from "../../../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers";
import * as environments from "../../../../../../../../environments";
import * as serializers from "../../../../../../../../serialization/index";
import * as CandidApi from "../../../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Sends real-time eligibility checks to payers through Stedi.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.post({
     *         payerId: "payer_id",
     *         provider: {
     *             npi: "npi"
     *         },
     *         subscriber: {
     *             firstName: "first_name",
     *             lastName: "last_name"
     *         }
     *     })
     */
    public post(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.post.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__post(request, requestOptions));
    }

    private async __post(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.EligibilityResponse,
                CandidApi.preEncounter.eligibilityChecks.v1.post.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.EligibilityRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.EligibilityResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.post.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Sends a batch of eligibility checks to payers through Stedi.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest[]} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.batch([{
     *             payerId: "payer_id",
     *             provider: {
     *                 npi: "npi"
     *             },
     *             subscriber: {
     *                 firstName: "first_name",
     *                 lastName: "last_name"
     *             }
     *         }, {
     *             payerId: "payer_id",
     *             provider: {
     *                 npi: "npi"
     *             },
     *             subscriber: {
     *                 firstName: "first_name",
     *                 lastName: "last_name"
     *             }
     *         }])
     */
    public batch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest[],
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.batch.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__batch(request, requestOptions));
    }

    private async __batch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest[],
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityResponse,
                CandidApi.preEncounter.eligibilityChecks.v1.batch.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/batch",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.batch.Request.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.BatchEligibilityResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.batch.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Polls the status of a batch eligibility check.
     *
     * @param {string} batchId
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityPollRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.pollBatch("batch_id")
     */
    public pollBatch(
        batchId: string,
        request: CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityPollRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityCheckPage,
            CandidApi.preEncounter.eligibilityChecks.v1.pollBatch.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__pollBatch(batchId, request, requestOptions));
    }

    private async __pollBatch(
        batchId: string,
        request: CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityPollRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.EligibilityCheckPage,
                CandidApi.preEncounter.eligibilityChecks.v1.pollBatch.Error
            >
        >
    > {
        const { pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/eligibility-checks/v1/batch/${core.url.encodePathParam(batchId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.EligibilityCheckPage.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.pollBatch.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Searches for payers that match the query parameters.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.payerSearch()
     */
    public payerSearch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.payerSearch.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__payerSearch(request, requestOptions));
    }

    private async __payerSearch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchResponse,
                CandidApi.preEncounter.eligibilityChecks.v1.payerSearch.Error
            >
        >
    > {
        const { pageSize, pageToken, query } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams.page_size = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        if (query != null) {
            _queryParams.query = query;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/payer/search",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.PayerSearchResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.payerSearch.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Gets recommendation for eligibility checks based on the request.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendationRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.recommendation()
     */
    public recommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendationRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation[],
            CandidApi.preEncounter.eligibilityChecks.v1.recommendation.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__recommendation(request, requestOptions));
    }

    private async __recommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendationRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation[],
                CandidApi.preEncounter.eligibilityChecks.v1.recommendation.Error
            >
        >
    > {
        const { filters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (filters != null) {
            _queryParams.filters = filters;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/recommendation",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.recommendation.Response.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.recommendation.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Create an eligibiilty recommendation based on the request.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.createRecommendation({
     *         eligibilityCheckId: "eligibility_check_id",
     *         patient: {},
     *         recommendation: {
     *             type: "MEDICARE_ADVANTAGE",
     *             payload: {}
     *         }
     *     })
     */
    public createRecommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation,
            CandidApi.preEncounter.eligibilityChecks.v1.createRecommendation.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__createRecommendation(request, requestOptions));
    }

    private async __createRecommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation,
                CandidApi.preEncounter.eligibilityChecks.v1.createRecommendation.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/recommendation",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest.jsonOrThrow(
                request,
                { unrecognizedObjectKeys: "strip" },
            ),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.EligibilityRecommendation.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.eligibilityChecks.v1.createRecommendation.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
