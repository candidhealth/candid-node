/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as CandidApi from "../../../../../../../index";
import * as serializers from "../../../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    constructor(protected readonly _options: V1.Options = {}) {}

    /**
     * Sends real-time eligibility checks to payers through Stedi.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.post({
     *         payerId: "payer_id",
     *         provider: {
     *             npi: "npi"
     *         },
     *         subscriber: {
     *             firstName: "first_name",
     *             lastName: "last_name"
     *         }
     *     })
     */
    public async post(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.post.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.EligibilityRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.EligibilityResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.post.Error._unknown(_response.error),
        };
    }

    /**
     * Sends a batch of eligibility checks to payers through Stedi.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest[]} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.batch([{
     *             payerId: "payer_id",
     *             provider: {
     *                 npi: "npi"
     *             },
     *             subscriber: {
     *                 firstName: "first_name",
     *                 lastName: "last_name"
     *             }
     *         }, {
     *             payerId: "payer_id",
     *             provider: {
     *                 npi: "npi"
     *             },
     *             subscriber: {
     *                 firstName: "first_name",
     *                 lastName: "last_name"
     *             }
     *         }])
     */
    public async batch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRequest[],
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.batch.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/batch",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.batch.Request.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.BatchEligibilityResponse.parseOrThrow(
                    _response.body,
                    {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    },
                ),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.batch.Error._unknown(_response.error),
        };
    }

    /**
     * Polls the status of a batch eligibility check.
     *
     * @param {string} batchId
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityPollRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.pollBatch("batch_id")
     */
    public async pollBatch(
        batchId: string,
        request: CandidApi.preEncounter.eligibilityChecks.v1.BatchEligibilityPollRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityCheckPage,
            CandidApi.preEncounter.eligibilityChecks.v1.pollBatch.Error
        >
    > {
        const { pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/eligibility-checks/v1/batch/${encodeURIComponent(batchId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.EligibilityCheckPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.pollBatch.Error._unknown(_response.error),
        };
    }

    /**
     * Searches for payers that match the query parameters.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.payerSearch()
     */
    public async payerSearch(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.PayerSearchResponse,
            CandidApi.preEncounter.eligibilityChecks.v1.payerSearch.Error
        >
    > {
        const { pageSize, pageToken, query } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (query != null) {
            _queryParams["query"] = query;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/payer/search",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.PayerSearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.payerSearch.Error._unknown(_response.error),
        };
    }

    /**
     * Gets recommendation for eligibility checks based on the request.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendationRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.recommendation()
     */
    public async recommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendationRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation[],
            CandidApi.preEncounter.eligibilityChecks.v1.recommendation.Error
        >
    > {
        const { filters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (filters != null) {
            _queryParams["filters"] = filters;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/recommendation",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.recommendation.Response.parseOrThrow(
                    _response.body,
                    {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    },
                ),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.recommendation.Error._unknown(_response.error),
        };
    }

    /**
     * Create an eligibiilty recommendation based on the request.
     *
     * @param {CandidApi.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.eligibilityChecks.v1.createRecommendation({
     *         eligibilityCheckId: "eligibility_check_id",
     *         patient: {},
     *         recommendation: {
     *             type: "MEDICARE_ADVANTAGE",
     *             payload: {}
     *         }
     *     })
     */
    public async createRecommendation(
        request: CandidApi.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityRecommendation,
            CandidApi.preEncounter.eligibilityChecks.v1.createRecommendation.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/eligibility-checks/v1/recommendation",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.8.1",
                "User-Agent": "candidhealth/1.8.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.eligibilityChecks.v1.PostEligibilityRecommendationRequest.jsonOrThrow(
                request,
                { unrecognizedObjectKeys: "strip" },
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.eligibilityChecks.v1.EligibilityRecommendation.parseOrThrow(
                    _response.body,
                    {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    },
                ),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.eligibilityChecks.v1.createRecommendation.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
