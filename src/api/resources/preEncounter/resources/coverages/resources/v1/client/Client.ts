/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as CandidApi from "../../../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers";
import * as serializers from "../../../../../../../../serialization/index";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Creates a new Coverage. A Coverage provides the high-level identifiers and descriptors of a specific insurance plan for a specific individual - typically the information you can find on an insurance card. Additionally a coverage will include detailed benefits information covered by the specific plan for the individual.
     *
     * @param {CandidApi.preEncounter.coverages.v1.MutableCoverage} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.create({
     *         status: "ACTIVE",
     *         subscriber: {
     *             name: {
     *                 family: "family",
     *                 given: ["given", "given"],
     *                 use: "USUAL"
     *             },
     *             biologicalSex: "FEMALE"
     *         },
     *         relationship: "SELF",
     *         patient: CandidApi.preEncounter.PatientId("patient"),
     *         insurancePlan: {
     *             memberId: "member_id",
     *             payerId: CandidApi.preEncounter.PayerId("payer_id"),
     *             payerName: "payer_name"
     *         },
     *         verified: true
     *     })
     */
    public create(
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.create.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage,
                CandidApi.preEncounter.coverages.v1.create.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.MutableCoverage.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates a Coverage. The path must contain the next version number to prevent race conditions. For example, if the current version of the coverage is n, you will need to send a request to this endpoint with `/{id}/n+1` to update the coverage. Updating historic versions is not supported.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {string} version
     * @param {CandidApi.preEncounter.coverages.v1.MutableCoverage} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.update(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), "version", {
     *         status: "ACTIVE",
     *         subscriber: {
     *             name: {
     *                 family: "family",
     *                 given: ["given", "given"],
     *                 use: "USUAL"
     *             },
     *             biologicalSex: "FEMALE"
     *         },
     *         relationship: "SELF",
     *         patient: CandidApi.preEncounter.PatientId("patient"),
     *         insurancePlan: {
     *             memberId: "member_id",
     *             payerId: CandidApi.preEncounter.PayerId("payer_id"),
     *             payerName: "payer_name"
     *         },
     *         verified: true
     *     })
     */
    public update(
        id: CandidApi.preEncounter.CoverageId,
        version: string,
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.update.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(id, version, request, requestOptions));
    }

    private async __update(
        id: CandidApi.preEncounter.CoverageId,
        version: string,
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage,
                CandidApi.preEncounter.coverages.v1.update.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/${encodeURIComponent(version)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.MutableCoverage.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.preEncounter.coverages.v1.update.Error.Raw)?.errorName) {
                case "NotFoundError":
                case "VersionConflictError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.preEncounter.coverages.v1.update.Error.parseOrThrow(
                                _response.error.body as serializers.preEncounter.coverages.v1.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns a page of Coverages based on the search criteria.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageGetMultiPaginatedRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getMultiPaginated()
     */
    public getMultiPaginated(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiPaginatedRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.CoveragesPage,
            CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMultiPaginated(request, requestOptions));
    }

    private async __getMultiPaginated(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiPaginatedRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.CoveragesPage,
                CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error
            >
        >
    > {
        const { patientId, payerPlanGroupId, pageToken, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (patientId != null) {
            _queryParams["patient_id"] = patientId;
        }

        if (payerPlanGroupId != null) {
            _queryParams["payer_plan_group_id"] = payerPlanGroupId;
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1/get-multi-paginated",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.CoveragesPage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.preEncounter.coverages.v1.getMultiPaginated.Error.Raw)?.errorName
            ) {
                case "BadRequestError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.preEncounter.coverages.v1.getMultiPaginated.Error.parseOrThrow(
                                _response.error
                                    .body as serializers.preEncounter.coverages.v1.getMultiPaginated.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * gets a specific Coverage
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.get(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.get.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage,
                CandidApi.preEncounter.coverages.v1.get.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Gets a coverage along with it's full history.  The return list is ordered by version ascending.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getHistory(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public getHistory(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.Coverage[],
            CandidApi.preEncounter.coverages.v1.getHistory.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getHistory(id, requestOptions));
    }

    private async __getHistory(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage[],
                CandidApi.preEncounter.coverages.v1.getHistory.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/history`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.getHistory.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.preEncounter.coverages.v1.getHistory.Error.Raw)?.errorName) {
                case "NotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.preEncounter.coverages.v1.getHistory.Error.parseOrThrow(
                                _response.error.body as serializers.preEncounter.coverages.v1.getHistory.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.getHistory.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns a list of Coverages based on the search criteria.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageGetMultiRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getMulti()
     */
    public getMulti(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.Coverage[],
            CandidApi.preEncounter.coverages.v1.getMulti.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(request, requestOptions));
    }

    private async __getMulti(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage[],
                CandidApi.preEncounter.coverages.v1.getMulti.Error
            >
        >
    > {
        const { patientId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (patientId != null) {
            _queryParams["patient_id"] = patientId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.getMulti.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Scans up to 100 coverage updates.  The since query parameter is inclusive, and the result list is ordered by updatedAt ascending.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageScanRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.scan({
     *         since: new Date("2024-01-15T09:30:00.000Z")
     *     })
     */
    public scan(
        request: CandidApi.preEncounter.coverages.v1.CoverageScanRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage[], CandidApi.preEncounter.coverages.v1.scan.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__scan(request, requestOptions));
    }

    private async __scan(
        request: CandidApi.preEncounter.coverages.v1.CoverageScanRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.Coverage[],
                CandidApi.preEncounter.coverages.v1.scan.Error
            >
        >
    > {
        const { since } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["since"] = since.toISOString();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1/updates/scan",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.scan.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.scan.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Finds all coverages associated with the given ppg_id and updates the ppg_fields for each coverage.
     *
     * @param {CandidApi.preEncounter.PayerPlanGroupId} ppgId
     * @param {CandidApi.preEncounter.coverages.v1.PayerPlanGroupFields} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.batchUpdatePpg(CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         payerPlanGroupId: CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         payerId: CandidApi.preEncounter.PayerId("payer_id"),
     *         payerName: "payer_name",
     *         planType: "09"
     *     })
     */
    public batchUpdatePpg(
        ppgId: CandidApi.preEncounter.PayerPlanGroupId,
        request: CandidApi.preEncounter.coverages.v1.PayerPlanGroupFields,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.preEncounter.coverages.v1.batchUpdatePpg.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__batchUpdatePpg(ppgId, request, requestOptions));
    }

    private async __batchUpdatePpg(
        ppgId: CandidApi.preEncounter.PayerPlanGroupId,
        request: CandidApi.preEncounter.coverages.v1.PayerPlanGroupFields,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.preEncounter.coverages.v1.batchUpdatePpg.Error>>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/batch-update-ppg/${encodeURIComponent(serializers.preEncounter.PayerPlanGroupId.jsonOrThrow(ppgId))}`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.PayerPlanGroupFields.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.batchUpdatePpg.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Initiates an eligibility check. Returns the metadata of the check if successfully initiated.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {CandidApi.preEncounter.coverages.v1.CheckEligibilityRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.checkEligibility(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         serviceCode: "1",
     *         dateOfService: "2023-01-15",
     *         npi: "npi"
     *     })
     */
    public checkEligibility(
        id: CandidApi.preEncounter.CoverageId,
        request: CandidApi.preEncounter.coverages.v1.CheckEligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.eligibilityChecks.v1.EligibilityCheckMetadata,
            CandidApi.preEncounter.coverages.v1.checkEligibility.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__checkEligibility(id, request, requestOptions));
    }

    private async __checkEligibility(
        id: CandidApi.preEncounter.CoverageId,
        request: CandidApi.preEncounter.coverages.v1.CheckEligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.eligibilityChecks.v1.EligibilityCheckMetadata,
                CandidApi.preEncounter.coverages.v1.checkEligibility.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/eligibility`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.CheckEligibilityRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.eligibilityChecks.v1.EligibilityCheckMetadata.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.checkEligibility.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Gets the eligibility of a patient for a specific coverage if successful.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {string} checkId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getEligibility(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), "check_id")
     */
    public getEligibility(
        id: CandidApi.preEncounter.CoverageId,
        checkId: string,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.CoverageEligibilityCheckResponse,
            CandidApi.preEncounter.coverages.v1.getEligibility.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getEligibility(id, checkId, requestOptions));
    }

    private async __getEligibility(
        id: CandidApi.preEncounter.CoverageId,
        checkId: string,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.preEncounter.coverages.v1.CoverageEligibilityCheckResponse,
                CandidApi.preEncounter.coverages.v1.getEligibility.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/eligibility/${encodeURIComponent(checkId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.preEncounter.coverages.v1.CoverageEligibilityCheckResponse.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.preEncounter.coverages.v1.getEligibility.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
