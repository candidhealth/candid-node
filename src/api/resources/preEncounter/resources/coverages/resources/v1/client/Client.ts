/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as CandidApi from "../../../../../../../index";
import * as serializers from "../../../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    constructor(protected readonly _options: V1.Options = {}) {}

    /**
     * Creates a new Coverage. A Coverage provides the high-level identifiers and descriptors of a specific insurance plan for a specific individual - typically the information you can find on an insurance card. Additionally a coverage will include detailed benefits information covered by the specific plan for the individual.
     *
     * @param {CandidApi.preEncounter.coverages.v1.MutableCoverage} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.create({
     *         status: "ACTIVE",
     *         subscriber: {
     *             name: {
     *                 family: "string",
     *                 given: ["string"],
     *                 use: "USUAL",
     *                 period: {},
     *                 suffix: "string"
     *             },
     *             dateOfBirth: "2023-01-15",
     *             biologicalSex: "FEMALE",
     *             address: {
     *                 use: "HOME",
     *                 line: ["string"],
     *                 city: "string",
     *                 state: "string",
     *                 postalCode: "string",
     *                 country: "string",
     *                 period: {}
     *             }
     *         },
     *         relationship: "SELF",
     *         patient: CandidApi.preEncounter.PatientId("string"),
     *         insurancePlan: {
     *             memberId: "string",
     *             payerId: CandidApi.preEncounter.PayerId("string"),
     *             payerName: "string",
     *             additionalPayerInformation: {},
     *             groupNumber: "string",
     *             name: "string",
     *             planType: "09",
     *             type: "01",
     *             period: {},
     *             insuranceCardImageLocator: "string",
     *             payerPlanGroupId: CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *         },
     *         verified: true,
     *         eligibilityChecks: [],
     *         latestEligibilityCheck: {
     *             checkId: "string",
     *             status: "ACTIVE",
     *             initiatedAt: "2024-01-15T09:30:00Z"
     *         },
     *         benefits: {}
     *     })
     */
    public async create(
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.create.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.MutableCoverage.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.create.Error._unknown(_response.error),
        };
    }

    /**
     * Updates a Coverage. The path must contain the most recent version to prevent race conditions. Updating historic versions is not supported.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {string} version
     * @param {CandidApi.preEncounter.coverages.v1.MutableCoverage} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.update(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), "string", {
     *         status: "ACTIVE",
     *         subscriber: {
     *             name: {
     *                 family: "string",
     *                 given: ["string"],
     *                 use: "USUAL",
     *                 period: {},
     *                 suffix: "string"
     *             },
     *             dateOfBirth: "2023-01-15",
     *             biologicalSex: "FEMALE",
     *             address: {
     *                 use: "HOME",
     *                 line: ["string"],
     *                 city: "string",
     *                 state: "string",
     *                 postalCode: "string",
     *                 country: "string",
     *                 period: {}
     *             }
     *         },
     *         relationship: "SELF",
     *         patient: CandidApi.preEncounter.PatientId("string"),
     *         insurancePlan: {
     *             memberId: "string",
     *             payerId: CandidApi.preEncounter.PayerId("string"),
     *             payerName: "string",
     *             additionalPayerInformation: {},
     *             groupNumber: "string",
     *             name: "string",
     *             planType: "09",
     *             type: "01",
     *             period: {},
     *             insuranceCardImageLocator: "string",
     *             payerPlanGroupId: CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *         },
     *         verified: true,
     *         eligibilityChecks: [],
     *         latestEligibilityCheck: {
     *             checkId: "string",
     *             status: "ACTIVE",
     *             initiatedAt: "2024-01-15T09:30:00Z"
     *         },
     *         benefits: {}
     *     })
     */
    public async update(
        id: CandidApi.preEncounter.CoverageId,
        version: string,
        request: CandidApi.preEncounter.coverages.v1.MutableCoverage,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.update.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/${encodeURIComponent(version)}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.MutableCoverage.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.preEncounter.coverages.v1.update.Error.Raw)?.errorName) {
                case "NotFoundError":
                case "VersionConflictError":
                    return {
                        ok: false,
                        error: serializers.preEncounter.coverages.v1.update.Error.parseOrThrow(
                            _response.error.body as serializers.preEncounter.coverages.v1.update.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.update.Error._unknown(_response.error),
        };
    }

    /**
     * Returns a page of Coverages based on the search criteria.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageGetMultiPaginatedRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getMultiPaginated({
     *         patientId: "string",
     *         payerPlanGroupId: "string",
     *         pageToken: CandidApi.preEncounter.PageToken("string"),
     *         limit: 1
     *     })
     */
    public async getMultiPaginated(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiPaginatedRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.CoveragesPage,
            CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error
        >
    > {
        const { patientId, payerPlanGroupId, pageToken, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (patientId != null) {
            _queryParams["patient_id"] = patientId;
        }

        if (payerPlanGroupId != null) {
            _queryParams["payer_plan_group_id"] = payerPlanGroupId;
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1/get-multi-paginated",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.CoveragesPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.preEncounter.coverages.v1.getMultiPaginated.Error.Raw)?.errorName
            ) {
                case "BadRequestError":
                    return {
                        ok: false,
                        error: serializers.preEncounter.coverages.v1.getMultiPaginated.Error.parseOrThrow(
                            _response.error.body as serializers.preEncounter.coverages.v1.getMultiPaginated.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.getMultiPaginated.Error._unknown(_response.error),
        };
    }

    /**
     * gets a specific Coverage
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.get(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async get(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage, CandidApi.preEncounter.coverages.v1.get.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.Coverage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.get.Error._unknown(_response.error),
        };
    }

    /**
     * Gets a coverage along with it's full history. The return list is ordered by version ascending.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getHistory(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async getHistory(
        id: CandidApi.preEncounter.CoverageId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.Coverage[],
            CandidApi.preEncounter.coverages.v1.getHistory.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/history`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.getHistory.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.preEncounter.coverages.v1.getHistory.Error.Raw)?.errorName) {
                case "NotFoundError":
                    return {
                        ok: false,
                        error: serializers.preEncounter.coverages.v1.getHistory.Error.parseOrThrow(
                            _response.error.body as serializers.preEncounter.coverages.v1.getHistory.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.getHistory.Error._unknown(_response.error),
        };
    }

    /**
     * Returns a list of Coverages based on the search criteria.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageGetMultiRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getMulti({
     *         patientId: "string"
     *     })
     */
    public async getMulti(
        request: CandidApi.preEncounter.coverages.v1.CoverageGetMultiRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.Coverage[],
            CandidApi.preEncounter.coverages.v1.getMulti.Error
        >
    > {
        const { patientId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (patientId != null) {
            _queryParams["patient_id"] = patientId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.getMulti.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.getMulti.Error._unknown(_response.error),
        };
    }

    /**
     * Scans up to 100 coverage updates. The since query parameter is inclusive, and the result list is ordered by updatedAt ascending.
     *
     * @param {CandidApi.preEncounter.coverages.v1.CoverageScanRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.scan({
     *         since: "2024-01-15T09:30:00Z"
     *     })
     */
    public async scan(
        request: CandidApi.preEncounter.coverages.v1.CoverageScanRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.preEncounter.coverages.v1.Coverage[], CandidApi.preEncounter.coverages.v1.scan.Error>
    > {
        const { since } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["since"] = since.toISOString();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                "/coverages/v1/updates/scan",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.scan.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.scan.Error._unknown(_response.error),
        };
    }

    /**
     * Finds all coverages associated with the given ppg_id and updates the ppg_fields for each coverage.
     *
     * @param {CandidApi.preEncounter.PayerPlanGroupId} ppgId
     * @param {CandidApi.preEncounter.coverages.v1.PayerPlanGroupFields} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.batchUpdatePpg(CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         payerPlanGroupId: CandidApi.preEncounter.PayerPlanGroupId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         payerId: CandidApi.preEncounter.PayerId("string"),
     *         payerName: "string",
     *         planType: "09"
     *     })
     */
    public async batchUpdatePpg(
        ppgId: CandidApi.preEncounter.PayerPlanGroupId,
        request: CandidApi.preEncounter.coverages.v1.PayerPlanGroupFields,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.APIResponse<void, CandidApi.preEncounter.coverages.v1.batchUpdatePpg.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/batch-update-ppg/${encodeURIComponent(serializers.preEncounter.PayerPlanGroupId.jsonOrThrow(ppgId))}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.PayerPlanGroupFields.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.batchUpdatePpg.Error._unknown(_response.error),
        };
    }

    /**
     * Initiates an eligibility check. Returns the metadata of the check if successfully initiated.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {CandidApi.preEncounter.coverages.v1.CheckEligibilityRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.checkEligibility(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         serviceCode: "1",
     *         dateOfService: "2023-01-15",
     *         npi: "string"
     *     })
     */
    public async checkEligibility(
        id: CandidApi.preEncounter.CoverageId,
        request: CandidApi.preEncounter.coverages.v1.CheckEligibilityRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.EligibilityCheckMetadata,
            CandidApi.preEncounter.coverages.v1.checkEligibility.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/eligibility`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.preEncounter.coverages.v1.CheckEligibilityRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.EligibilityCheckMetadata.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.checkEligibility.Error._unknown(_response.error),
        };
    }

    /**
     * Gets the eligibility of a patient for a specific coverage if successful.
     *
     * @param {CandidApi.preEncounter.CoverageId} id
     * @param {string} checkId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.preEncounter.coverages.v1.getEligibility(CandidApi.preEncounter.CoverageId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), "string")
     */
    public async getEligibility(
        id: CandidApi.preEncounter.CoverageId,
        checkId: string,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.APIResponse<
            CandidApi.preEncounter.coverages.v1.CoverageEligibilityCheckResponse,
            CandidApi.preEncounter.coverages.v1.getEligibility.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).preEncounter,
                `/coverages/v1/${encodeURIComponent(serializers.preEncounter.CoverageId.jsonOrThrow(id))}/eligibility/${encodeURIComponent(checkId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.42.4",
                "User-Agent": "candidhealth/0.42.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.preEncounter.coverages.v1.CoverageEligibilityCheckResponse.parseOrThrow(
                    _response.body,
                    {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    },
                ),
            };
        }

        return {
            ok: false,
            error: CandidApi.preEncounter.coverages.v1.getEligibility.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
