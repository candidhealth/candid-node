// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as environments from "../../../../../../environments";
import * as serializers from "../../../../../../serialization/index";
import * as CandidApi from "../../../../../index";

export declare namespace V1 {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all non-insurance payer payments
     *
     * @param {CandidApi.nonInsurancePayerPayments.v1.GetMultiNonInsurancePayerPaymentRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nonInsurancePayerPayments.v1.getMulti()
     */
    public getMulti(
        request: CandidApi.nonInsurancePayerPayments.v1.GetMultiNonInsurancePayerPaymentRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentsPage,
            CandidApi.nonInsurancePayerPayments.v1.getMulti.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getMulti(request, requestOptions));
    }

    private async __getMulti(
        request: CandidApi.nonInsurancePayerPayments.v1.GetMultiNonInsurancePayerPaymentRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentsPage,
                CandidApi.nonInsurancePayerPayments.v1.getMulti.Error
            >
        >
    > {
        const { limit, nonInsurancePayerId, checkNumber, invoiceId, sort, sortDirection, pageToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        if (nonInsurancePayerId != null) {
            _queryParams.non_insurance_payer_id = nonInsurancePayerId;
        }

        if (checkNumber != null) {
            if (Array.isArray(checkNumber)) {
                _queryParams.check_number = checkNumber.map((item) => item);
            } else {
                _queryParams.check_number = checkNumber;
            }
        }

        if (invoiceId != null) {
            _queryParams.invoice_id = invoiceId;
        }

        if (sort != null) {
            _queryParams.sort = serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentSortField.jsonOrThrow(
                sort,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (sortDirection != null) {
            _queryParams.sort_direction = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams.page_token = pageToken;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/non-insurance-payer-payments/v1",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentsPage.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.nonInsurancePayerPayments.v1.getMulti.Error.Raw)?.errorName) {
                case "UnprocessableEntityError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.nonInsurancePayerPayments.v1.getMulti.Error.parseOrThrow(
                                _response.error.body as serializers.nonInsurancePayerPayments.v1.getMulti.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.nonInsurancePayerPayments.v1.getMulti.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Retrieves a previously created non-insurance payer payment by its `non_insurance_payer_payment_id`.
     *
     * @param {CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId} nonInsurancePayerPaymentId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nonInsurancePayerPayments.v1.get(CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
            CandidApi.nonInsurancePayerPayments.v1.get.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(nonInsurancePayerPaymentId, requestOptions));
    }

    private async __get(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
                CandidApi.nonInsurancePayerPayments.v1.get.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/non-insurance-payer-payments/v1/${core.url.encodePathParam(serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId.jsonOrThrow(nonInsurancePayerPaymentId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPayment.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.nonInsurancePayerPayments.v1.get.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.nonInsurancePayerPayments.v1.get.Error.parseOrThrow(
                                _response.error.body as serializers.nonInsurancePayerPayments.v1.get.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.nonInsurancePayerPayments.v1.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentCreate} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nonInsurancePayerPayments.v1.create({
     *         nonInsurancePayerId: CandidApi.nonInsurancePayers.v1.NonInsurancePayerId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         amountCents: 1,
     *         allocations: [{
     *                 amountCents: 1,
     *                 target: {
     *                     type: "service_line_by_id",
     *                     value: CandidApi.ServiceLineId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *                 }
     *             }, {
     *                 amountCents: 1,
     *                 target: {
     *                     type: "service_line_by_id",
     *                     value: CandidApi.ServiceLineId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *                 }
     *             }]
     *     })
     */
    public create(
        request: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentCreate,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
            CandidApi.nonInsurancePayerPayments.v1.create.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentCreate,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
                CandidApi.nonInsurancePayerPayments.v1.create.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/non-insurance-payer-payments/v1",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentCreate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPayment.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.nonInsurancePayerPayments.v1.create.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnprocessableEntityError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.nonInsurancePayerPayments.v1.create.Error.parseOrThrow(
                                _response.error.body as serializers.nonInsurancePayerPayments.v1.create.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.nonInsurancePayerPayments.v1.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId} nonInsurancePayerPaymentId
     * @param {CandidApi.nonInsurancePayerPayments.v1.UpdateNonInsurancePayerPaymentRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nonInsurancePayerPayments.v1.update(CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public update(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        request: CandidApi.nonInsurancePayerPayments.v1.UpdateNonInsurancePayerPaymentRequest = {},
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
            CandidApi.nonInsurancePayerPayments.v1.update.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(nonInsurancePayerPaymentId, request, requestOptions));
    }

    private async __update(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        request: CandidApi.nonInsurancePayerPayments.v1.UpdateNonInsurancePayerPaymentRequest = {},
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPayment,
                CandidApi.nonInsurancePayerPayments.v1.update.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/non-insurance-payer-payments/v1/${core.url.encodePathParam(serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId.jsonOrThrow(nonInsurancePayerPaymentId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.nonInsurancePayerPayments.v1.UpdateNonInsurancePayerPaymentRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPayment.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.nonInsurancePayerPayments.v1.update.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnprocessableEntityError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.nonInsurancePayerPayments.v1.update.Error.parseOrThrow(
                                _response.error.body as serializers.nonInsurancePayerPayments.v1.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.nonInsurancePayerPayments.v1.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes the non-insurance payer payment record matching the provided `non_insurance_payer_payment_id`.
     *
     * @param {CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId} nonInsurancePayerPaymentId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nonInsurancePayerPayments.v1.delete(CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public delete(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.nonInsurancePayerPayments.v1.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nonInsurancePayerPaymentId, requestOptions));
    }

    private async __delete(
        nonInsurancePayerPaymentId: CandidApi.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.nonInsurancePayerPayments.v1.delete.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/non-insurance-payer-payments/v1/${core.url.encodePathParam(serializers.nonInsurancePayerPayments.v1.NonInsurancePayerPaymentId.jsonOrThrow(nonInsurancePayerPaymentId))}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.nonInsurancePayerPayments.v1.delete.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "UnprocessableEntityError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.nonInsurancePayerPayments.v1.delete.Error.parseOrThrow(
                                _response.error.body as serializers.nonInsurancePayerPayments.v1.delete.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.nonInsurancePayerPayments.v1.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
