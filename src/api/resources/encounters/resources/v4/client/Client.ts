/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";

export declare namespace V4 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V4 {
    constructor(protected readonly _options: V4.Options = {}) {}

    /**
     * @param {CandidApi.encounters.v4.GetAllEncountersRequest} request
     * @param {V4.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounters.v4.getAll({
     *         limit: 100,
     *         claimStatus: "biller_received",
     *         sort: "created_at:asc",
     *         pageToken: CandidApi.PageToken("eyJ0b2tlbiI6IjEiLCJwYWdlX3Rva2VuIjoiMiJ9"),
     *         dateOfServiceMin: "2019-08-24",
     *         dateOfServiceMax: "2019-08-25",
     *         primaryPayerNames: "Medicare,Medicaid",
     *         searchTerm: "doe",
     *         externalId: CandidApi.EncounterExternalId("123456"),
     *         diagnosesUpdatedSince: "2019-08-24T14:15:22Z"
     *     })
     */
    public async getAll(
        request: CandidApi.encounters.v4.GetAllEncountersRequest = {},
        requestOptions?: V4.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.encounters.v4.EncounterPage, CandidApi.encounters.v4.getAll.Error>> {
        const {
            limit,
            claimStatus,
            sort,
            pageToken,
            dateOfServiceMin,
            dateOfServiceMax,
            primaryPayerNames,
            searchTerm,
            externalId,
            diagnosesUpdatedSince,
            tagIds,
            workQueueId,
            billableStatus,
            responsibleParty,
            ownerOfNextAction,
            patientExternalId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (claimStatus != null) {
            _queryParams["claim_status"] = serializers.ClaimStatus.jsonOrThrow(claimStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sort != null) {
            _queryParams["sort"] = serializers.encounters.v4.EncounterSortOptions.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (dateOfServiceMin != null) {
            _queryParams["date_of_service_min"] = dateOfServiceMin;
        }

        if (dateOfServiceMax != null) {
            _queryParams["date_of_service_max"] = dateOfServiceMax;
        }

        if (primaryPayerNames != null) {
            _queryParams["primary_payer_names"] = primaryPayerNames;
        }

        if (searchTerm != null) {
            _queryParams["search_term"] = searchTerm;
        }

        if (externalId != null) {
            _queryParams["external_id"] = externalId;
        }

        if (diagnosesUpdatedSince != null) {
            _queryParams["diagnoses_updated_since"] = diagnosesUpdatedSince.toISOString();
        }

        if (tagIds != null) {
            if (Array.isArray(tagIds)) {
                _queryParams["tag_ids"] = tagIds.map((item) =>
                    serializers.TagId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["tag_ids"] = tagIds;
            }
        }

        if (workQueueId != null) {
            _queryParams["work_queue_id"] = workQueueId;
        }

        if (billableStatus != null) {
            _queryParams["billable_status"] = serializers.encounters.v4.BillableStatusType.jsonOrThrow(billableStatus, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (responsibleParty != null) {
            _queryParams["responsible_party"] = serializers.encounters.v4.ResponsiblePartyType.jsonOrThrow(
                responsibleParty,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (ownerOfNextAction != null) {
            _queryParams["owner_of_next_action"] = serializers.encounters.v4.EncounterOwnerOfNextActionType.jsonOrThrow(
                ownerOfNextAction,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (patientExternalId != null) {
            _queryParams["patient_external_id"] = patientExternalId;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/encounters/v4",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.encounters.v4.EncounterPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.encounters.v4.getAll.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {V4.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounters.v4.get(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async get(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V4.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.encounters.v4.Encounter, CandidApi.encounters.v4.get.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounters/v4/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.encounters.v4.Encounter.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.encounters.v4.get.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.encounters.v4.EncounterCreate} request
     * @param {V4.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounters.v4.create({
     *         patient: {
     *             firstName: "first_name",
     *             lastName: "last_name",
     *             gender: "male",
     *             externalId: "external_id",
     *             dateOfBirth: "2023-01-15",
     *             address: {
     *                 address1: "address1",
     *                 city: "city",
     *                 state: "AA",
     *                 zipCode: "zip_code"
     *             }
     *         },
     *         billingProvider: {
     *             address: {
     *                 address1: "address1",
     *                 city: "city",
     *                 state: "AA",
     *                 zipCode: "zip_code",
     *                 zipPlusFourCode: "zip_plus_four_code"
     *             },
     *             taxId: "tax_id",
     *             npi: "npi"
     *         },
     *         renderingProvider: {
     *             npi: "npi"
     *         },
     *         responsibleParty: "INSURANCE_PAY",
     *         diagnoses: [{
     *                 codeType: "ABF",
     *                 code: "code"
     *             }, {
     *                 codeType: "ABF",
     *                 code: "code"
     *             }],
     *         placeOfServiceCode: "01"
     *     })
     */
    public async create(
        request: CandidApi.encounters.v4.EncounterCreate,
        requestOptions?: V4.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.encounters.v4.Encounter, CandidApi.encounters.v4.create.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/encounters/v4",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.encounters.v4.EncounterCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.encounters.v4.Encounter.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.encounters.v4.create.Error.Raw)?.errorName) {
                case "EncounterExternalIdUniquenessError":
                case "EncounterPatientControlNumberUniquenessError":
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "EncounterGuarantorMissingContactInfoError":
                case "HttpRequestValidationsError":
                case "CashPayPayerError":
                case "SchemaInstanceValidationHttpFailure":
                case "InvalidTagNamesError":
                case "HttpRequestValidationError":
                case "PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError":
                    return {
                        ok: false,
                        error: serializers.encounters.v4.create.Error.parseOrThrow(
                            _response.error.body as serializers.encounters.v4.create.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.encounters.v4.create.Error._unknown(_response.error),
        };
    }

    /**
     * Create an encounter from a pre-encounter patient and appointment. This endpoint is intended to be used by consumers who are managing
     * patients and appointments in the pre-encounter service and is currently under development. Consumers who are not taking advantage
     * of the pre-encounter service should use the standard create endpoint.
     *
     * The endpoint will create an encounter from the provided fields, pulling information from the provided patient and appointment objects
     * where applicable. In particular, the following fields are populated from the patient and appointment objects:
     *   - Patient
     *   - Referring Provider
     *   - Subscriber Primary
     *   - Subscriber Secondary
     *   - Referral Number
     *   - Responsible Party
     *   - Guarantor
     *
     * Utilizing this endpoint opts you into automatic updating of the encounter when the patient or appointment is updated, assuming the
     * encounter has not already been submitted or adjudicated.
     *
     * @param {CandidApi.encounters.v4.EncounterCreateFromPreEncounter} request
     * @param {V4.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounters.v4.createFromPreEncounterPatient({
     *         externalId: CandidApi.EncounterExternalId("external_id"),
     *         patientAuthorizedRelease: true,
     *         benefitsAssignedToProvider: true,
     *         providerAcceptsAssignment: true,
     *         billableStatus: "BILLABLE",
     *         preEncounterPatientId: CandidApi.PreEncounterPatientId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         preEncounterAppointmentIds: [CandidApi.PreEncounterAppointmentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), CandidApi.PreEncounterAppointmentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")],
     *         billingProvider: {
     *             address: {
     *                 address1: "address1",
     *                 city: "city",
     *                 state: "AA",
     *                 zipCode: "zip_code",
     *                 zipPlusFourCode: "zip_plus_four_code"
     *             },
     *             taxId: "tax_id",
     *             npi: "npi"
     *         },
     *         renderingProvider: {
     *             npi: "npi"
     *         },
     *         diagnoses: [{
     *                 codeType: "ABF",
     *                 code: "code"
     *             }, {
     *                 codeType: "ABF",
     *                 code: "code"
     *             }],
     *         placeOfServiceCode: "01"
     *     })
     */
    public async createFromPreEncounterPatient(
        request: CandidApi.encounters.v4.EncounterCreateFromPreEncounter,
        requestOptions?: V4.RequestOptions,
    ): Promise<
        core.APIResponse<CandidApi.encounters.v4.Encounter, CandidApi.encounters.v4.createFromPreEncounterPatient.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/encounters/v4/create-from-pre-encounter",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.encounters.v4.EncounterCreateFromPreEncounter.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.encounters.v4.Encounter.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch (
                (_response.error.body as serializers.encounters.v4.createFromPreEncounterPatient.Error.Raw)?.errorName
            ) {
                case "EncounterExternalIdUniquenessError":
                case "EncounterPatientControlNumberUniquenessError":
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "HttpRequestValidationError":
                case "PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError":
                    return {
                        ok: false,
                        error: serializers.encounters.v4.createFromPreEncounterPatient.Error.parseOrThrow(
                            _response.error.body as serializers.encounters.v4.createFromPreEncounterPatient.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.encounters.v4.createFromPreEncounterPatient.Error._unknown(_response.error),
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounters.v4.EncounterUpdate} request
     * @param {V4.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounters.v4.update(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public async update(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounters.v4.EncounterUpdate = {},
        requestOptions?: V4.RequestOptions,
    ): Promise<core.APIResponse<CandidApi.encounters.v4.Encounter, CandidApi.encounters.v4.update.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounters/v4/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "1.7.0",
                "User-Agent": "candidhealth/1.7.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.encounters.v4.EncounterUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: serializers.encounters.v4.Encounter.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.encounters.v4.update.Error.Raw)?.errorName) {
                case "EncounterExternalIdUniquenessError":
                case "EntityNotFoundError":
                case "UnauthorizedError":
                case "HttpRequestValidationsError":
                case "SchemaInstanceValidationHttpFailure":
                case "UnprocessableEntityError":
                case "InvalidTagNamesError":
                case "PayerPlanGroupPayerDoesNotMatchInsuranceCardHttpError":
                    return {
                        ok: false,
                        error: serializers.encounters.v4.update.Error.parseOrThrow(
                            _response.error.body as serializers.encounters.v4.update.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            },
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.encounters.v4.update.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
