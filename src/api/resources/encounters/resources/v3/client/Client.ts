/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core";
import { CandidApi } from "";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace V3 {
    interface Options {
        environment: string;
        token: core.Supplier<core.BearerToken>;
    }
}

export class V3 {
    constructor(private readonly options: V3.Options) {}

    public async getAll(
        request: CandidApi.encounters.v3.GetAllEncountersRequest = {}
    ): Promise<CandidApi.encounters.v3.EncounterPage> {
        const {
            limit,
            claimStatus,
            sort,
            pageToken,
            dateOfServiceMin,
            dateOfServiceMax,
            primaryPayerNames,
            searchTerm,
            externalId,
            diagnosesUpdatedSince,
            tagIds,
            doNotBill,
        } = request;
        const _queryParams = new URLSearchParams();
        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (claimStatus != null) {
            _queryParams.append("claim_status", claimStatus);
        }

        if (sort != null) {
            _queryParams.append("sort", sort);
        }

        if (pageToken != null) {
            _queryParams.append("page_token", pageToken);
        }

        if (dateOfServiceMin != null) {
            _queryParams.append("date_of_service_min", dateOfServiceMin);
        }

        if (dateOfServiceMax != null) {
            _queryParams.append("date_of_service_max", dateOfServiceMax);
        }

        if (primaryPayerNames != null) {
            _queryParams.append("primary_payer_names", primaryPayerNames);
        }

        if (searchTerm != null) {
            _queryParams.append("search_term", searchTerm);
        }

        if (externalId != null) {
            _queryParams.append("external_id", externalId);
        }

        if (diagnosesUpdatedSince != null) {
            _queryParams.append("diagnoses_updated_since", diagnosesUpdatedSince.toISOString());
        }

        if (tagIds != null) {
            if (Array.isArray(tagIds)) {
                for (const _item of tagIds) {
                    _queryParams.append("tag_ids", _item);
                }
            } else {
                _queryParams.append("tag_ids", tagIds);
            }
        }

        if (doNotBill != null) {
            _queryParams.append("do_not_bill", doNotBill.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/encounters/v3"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.encounters.v3.EncounterPage.parseOrThrow(
                _response.body as serializers.encounters.v3.EncounterPage.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async get(encounterId: CandidApi.EncounterId): Promise<CandidApi.encounters.v3.Encounter> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(encounterId)}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.encounters.v3.Encounter.parseOrThrow(
                _response.body as serializers.encounters.v3.Encounter.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async create(request: CandidApi.encounters.v3.EncounterCreate): Promise<CandidApi.encounters.v3.Encounter> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/encounters/v3"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.encounters.v3.EncounterCreate.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.encounters.v3.Encounter.parseOrThrow(
                _response.body as serializers.encounters.v3.Encounter.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async update(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounters.v3.EncounterUpdate = {}
    ): Promise<CandidApi.encounters.v3.Encounter> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(encounterId)}`
            ),
            method: "PATCH",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.encounters.v3.EncounterUpdate.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.encounters.v3.Encounter.parseOrThrow(
                _response.body as serializers.encounters.v3.Encounter.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getAttachments(
        encounterId: CandidApi.EncounterId
    ): Promise<CandidApi.encounters.v3.EncounterAttachment[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(encounterId)}/attachments`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.encounters.v3.getAttachments.Response.parseOrThrow(
                _response.body as serializers.encounters.v3.getAttachments.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async generateClinicalNotesPdf(
        encounterId: CandidApi.EncounterId
    ): Promise<CandidApi.encounters.v3.GenerateClinicalNotesPdfResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(
                    encounterId
                )}/clinical-notes-pdf/generate`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.encounters.v3.GenerateClinicalNotesPdfResponse.parseOrThrow(
                _response.body as serializers.encounters.v3.GenerateClinicalNotesPdfResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Initiates a re-calculation of the contracting status
     */
    public async recomputeNetworkStatusResults(
        encounterId: CandidApi.EncounterId
    ): Promise<CandidApi.encounters.v3.NetworkStatusComputationResults> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(encounterId)}/network-status-results`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.encounters.v3.NetworkStatusComputationResults.parseOrThrow(
                _response.body as serializers.encounters.v3.NetworkStatusComputationResults.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async markAsNotBillable(
        encounterId: CandidApi.EncounterId
    ): Promise<CandidApi.encounters.v3.MarkAsNotBillableResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/api/encounters/v3/${await serializers.EncounterId.jsonOrThrow(encounterId)}/mark-as-not-billable`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.encounters.v3.MarkAsNotBillableResponse.parseOrThrow(
                _response.body as serializers.encounters.v3.MarkAsNotBillableResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CandidApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CandidApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CandidApiTimeoutError();
            case "unknown":
                throw new errors.CandidApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
