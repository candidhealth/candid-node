/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../..";
import * as serializers from "../../../../../../serialization";
import urlJoin from "url-join";
import URLSearchParams from "@ungap/url-search-params";

export declare namespace V3 {
    interface Options {
        environment?: environments.CandidApiEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class V3 {
    constructor(protected readonly options: V3.Options) {}

    /**
     * Gets the rate that matches a service line. No result means no rate exists matching the service line's dimensions.
     */
    public async getMatch(
        serviceLineId: CandidApi.ServiceLineId
    ): Promise<
        core.APIResponse<CandidApi.feeSchedules.v3.MatchResult | undefined, CandidApi.feeSchedules.v3.getMatch.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                `/api/fee-schedules/v3/service-line/${await serializers.ServiceLineId.jsonOrThrow(serviceLineId)}/match`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.getMatch.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.getMatch.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "FailedToBuildServiceLineDimensions":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.getMatch.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.getMatch.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getMatch.Error._unknown(_response.error),
        };
    }

    /**
     * Tests a service line against a rate to see if it matches.
     */
    public async testMatch(
        serviceLineId: CandidApi.ServiceLineId,
        rateId: CandidApi.RateId
    ): Promise<core.APIResponse<CandidApi.feeSchedules.v3.MatchTestResult, CandidApi.feeSchedules.v3.testMatch.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                `/api/fee-schedules/v3/service-line/${await serializers.ServiceLineId.jsonOrThrow(
                    serviceLineId
                )}/match/${await serializers.RateId.jsonOrThrow(rateId)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.MatchTestResult.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.testMatch.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "FailedToBuildServiceLineDimensions":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.testMatch.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.testMatch.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.testMatch.Error._unknown(_response.error),
        };
    }

    /**
     * Gets a list of dimensions with their rates. The rates returned will always be the most recent versions of those rates.
     */
    public async getMulti(
        request: CandidApi.feeSchedules.v3.GetMultiRequest = {}
    ): Promise<core.APIResponse<CandidApi.feeSchedules.v3.RatesPage, CandidApi.feeSchedules.v3.getMulti.Error>> {
        const {
            pageToken,
            limit,
            activeDate,
            payerUuid,
            organizationBillingProviderId,
            states,
            zipCodes,
            licenseTypes,
            facilityTypeCodes,
            networkTypes,
            cptCode,
            modifiers,
        } = request;
        const _queryParams = new URLSearchParams();
        if (pageToken != null) {
            _queryParams.append("page_token", pageToken);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (activeDate != null) {
            _queryParams.append("active_date", activeDate);
        }

        if (payerUuid != null) {
            _queryParams.append("payer_uuid", payerUuid);
        }

        if (organizationBillingProviderId != null) {
            _queryParams.append("organization_billing_provider_id", organizationBillingProviderId);
        }

        if (states != null) {
            if (Array.isArray(states)) {
                for (const _item of states) {
                    _queryParams.append("states", _item);
                }
            } else {
                _queryParams.append("states", states);
            }
        }

        if (zipCodes != null) {
            if (Array.isArray(zipCodes)) {
                for (const _item of zipCodes) {
                    _queryParams.append("zip_codes", _item);
                }
            } else {
                _queryParams.append("zip_codes", zipCodes);
            }
        }

        if (licenseTypes != null) {
            if (Array.isArray(licenseTypes)) {
                for (const _item of licenseTypes) {
                    _queryParams.append("license_types", _item);
                }
            } else {
                _queryParams.append("license_types", licenseTypes);
            }
        }

        if (facilityTypeCodes != null) {
            if (Array.isArray(facilityTypeCodes)) {
                for (const _item of facilityTypeCodes) {
                    _queryParams.append("facility_type_codes", _item);
                }
            } else {
                _queryParams.append("facility_type_codes", facilityTypeCodes);
            }
        }

        if (networkTypes != null) {
            if (Array.isArray(networkTypes)) {
                for (const _item of networkTypes) {
                    _queryParams.append("network_types", _item);
                }
            } else {
                _queryParams.append("network_types", networkTypes);
            }
        }

        if (cptCode != null) {
            _queryParams.append("cpt_code", cptCode);
        }

        if (modifiers != null) {
            if (Array.isArray(modifiers)) {
                for (const _item of modifiers) {
                    _queryParams.append("modifiers", _item);
                }
            } else {
                _queryParams.append("modifiers", modifiers);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                "/api/fee-schedules/v3"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.RatesPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getMulti.Error._unknown(_response.error),
        };
    }

    /**
     * Gets unique values for a dimension based on other selection criteria. The response is a list of dimensions with your criteria and the unique values populated. This API is useful for driving pivots on dimension values.
     */
    public async getUniqueValuesForDimension(
        request: CandidApi.feeSchedules.v3.GetUniqueDimensionValuesRequest
    ): Promise<
        core.APIResponse<
            CandidApi.feeSchedules.v3.DimensionsPage,
            CandidApi.feeSchedules.v3.getUniqueValuesForDimension.Error
        >
    > {
        const {
            pageToken,
            limit,
            pivotDimension,
            payerUuid,
            organizationBillingProviderId,
            states,
            zipCodes,
            licenseTypes,
            facilityTypeCodes,
            networkTypes,
            cptCode,
            modifiers,
        } = request;
        const _queryParams = new URLSearchParams();
        if (pageToken != null) {
            _queryParams.append("page_token", pageToken);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        _queryParams.append("pivot_dimension", pivotDimension);
        if (payerUuid != null) {
            _queryParams.append("payer_uuid", payerUuid);
        }

        if (organizationBillingProviderId != null) {
            _queryParams.append("organization_billing_provider_id", organizationBillingProviderId);
        }

        if (states != null) {
            if (Array.isArray(states)) {
                for (const _item of states) {
                    _queryParams.append("states", _item);
                }
            } else {
                _queryParams.append("states", states);
            }
        }

        if (zipCodes != null) {
            if (Array.isArray(zipCodes)) {
                for (const _item of zipCodes) {
                    _queryParams.append("zip_codes", _item);
                }
            } else {
                _queryParams.append("zip_codes", zipCodes);
            }
        }

        if (licenseTypes != null) {
            if (Array.isArray(licenseTypes)) {
                for (const _item of licenseTypes) {
                    _queryParams.append("license_types", _item);
                }
            } else {
                _queryParams.append("license_types", licenseTypes);
            }
        }

        if (facilityTypeCodes != null) {
            if (Array.isArray(facilityTypeCodes)) {
                for (const _item of facilityTypeCodes) {
                    _queryParams.append("facility_type_codes", _item);
                }
            } else {
                _queryParams.append("facility_type_codes", facilityTypeCodes);
            }
        }

        if (networkTypes != null) {
            if (Array.isArray(networkTypes)) {
                for (const _item of networkTypes) {
                    _queryParams.append("network_types", _item);
                }
            } else {
                _queryParams.append("network_types", networkTypes);
            }
        }

        if (cptCode != null) {
            _queryParams.append("cpt_code", cptCode);
        }

        if (modifiers != null) {
            if (Array.isArray(modifiers)) {
                for (const _item of modifiers) {
                    _queryParams.append("modifiers", _item);
                }
            } else {
                _queryParams.append("modifiers", modifiers);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                "/api/fee-schedules/v3/unique-dimension-values"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.DimensionsPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getUniqueValuesForDimension.Error._unknown(_response.error),
        };
    }

    /**
     * Gets every version of a rate.
     */
    public async getRateHistory(
        rateId: CandidApi.RateId
    ): Promise<core.APIResponse<CandidApi.feeSchedules.v3.Rate[], CandidApi.feeSchedules.v3.getRateHistory.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                `/api/fee-schedules/v3/${await serializers.RateId.jsonOrThrow(rateId)}/history`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.getRateHistory.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.getRateHistory.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.getRateHistory.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.getRateHistory.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getRateHistory.Error._unknown(_response.error),
        };
    }

    /**
     * Uploads a new fee schedule.\n Each rate may either be totally new as qualified by it's dimensions or a new version for an existing rate.\n If adding a new version to an existing rate, the rate must be posted with the next version number (previous version + 1) or a EntityConflictError will be returned.\n Use the dry run flag to discover already existing rates and to run validations. If validations for any rate fail, no rates will be saved to the system.
     */
    public async uploadFeeSchedule(
        request: CandidApi.feeSchedules.v3.FeeScheduleUploadRequest
    ): Promise<core.APIResponse<CandidApi.feeSchedules.v3.Rate[], CandidApi.feeSchedules.v3.uploadFeeSchedule.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                "/api/fee-schedules/v3"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            body: await serializers.feeSchedules.v3.FeeScheduleUploadRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.uploadFeeSchedule.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.uploadFeeSchedule.Error.Raw)?.errorName) {
                case "FeeScheduleValidationHttpError":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.uploadFeeSchedule.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.uploadFeeSchedule.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.uploadFeeSchedule.Error._unknown(_response.error),
        };
    }

    /**
     * Soft deletes a rate from the system. Only the most recent version of a rate can be deleted.
     */
    public async deleteRate(
        rateId: CandidApi.RateId,
        version: number
    ): Promise<core.APIResponse<void, CandidApi.feeSchedules.v3.deleteRate.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                `/api/fee-schedules/v3/${await serializers.RateId.jsonOrThrow(rateId)}/${version}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.deleteRate.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                case "EntityConflictError":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.deleteRate.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.deleteRate.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.deleteRate.Error._unknown(_response.error),
        };
    }

    /**
     * Gets the default payer threshold
     */
    public async getPayerThresholdsDefault(): Promise<
        core.APIResponse<
            CandidApi.feeSchedules.v3.PayerThreshold,
            CandidApi.feeSchedules.v3.getPayerThresholdsDefault.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                "/api/fee-schedules/v3/payer-threshold/default"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.PayerThreshold.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getPayerThresholdsDefault.Error._unknown(_response.error),
        };
    }

    /**
     * Gets a list of payers and thresholds by their uuids
     */
    public async getPayerThresholds(
        request: CandidApi.feeSchedules.v3.PayerThresholdGetRequest
    ): Promise<
        core.APIResponse<
            CandidApi.feeSchedules.v3.PayerThresholdsPage,
            CandidApi.feeSchedules.v3.getPayerThresholds.Error
        >
    > {
        const { payerUuids } = request;
        const _queryParams = new URLSearchParams();
        if (Array.isArray(payerUuids)) {
            for (const _item of payerUuids) {
                _queryParams.append("payer_uuids", _item);
            }
        } else {
            _queryParams.append("payer_uuids", payerUuids);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                "/api/fee-schedules/v3/payer-threshold"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.PayerThresholdsPage.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.getPayerThresholds.Error._unknown(_response.error),
        };
    }

    /**
     * Sets the threshold information for a payer
     */
    public async setPayerThreshold(
        payerUuid: CandidApi.payers.v3.PayerUuid,
        request: CandidApi.feeSchedules.v3.PayerThreshold
    ): Promise<
        core.APIResponse<CandidApi.feeSchedules.v3.PayerThreshold, CandidApi.feeSchedules.v3.setPayerThreshold.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CandidApiEnvironment.Production,
                `/api/fee-schedules/v3/payer-threshold/${await serializers.payers.v3.PayerUuid.jsonOrThrow(payerUuid)}`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "candidhealth",
                "X-Fern-SDK-Version": "0.18.2",
            },
            contentType: "application/json",
            body: await serializers.feeSchedules.v3.PayerThreshold.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.feeSchedules.v3.PayerThreshold.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.feeSchedules.v3.setPayerThreshold.Error.Raw)?.errorName) {
                case "EntityNotFoundError":
                    return {
                        ok: false,
                        error: await serializers.feeSchedules.v3.setPayerThreshold.Error.parseOrThrow(
                            _response.error.body as serializers.feeSchedules.v3.setPayerThreshold.Error.Raw,
                            {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: CandidApi.feeSchedules.v3.setPayerThreshold.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this.options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
