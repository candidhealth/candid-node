// This file was auto-generated by Fern from our API Definition.

import type * as core from "../../../../core";
import * as CandidApi from "../../../index";

export type Error =
    | CandidApi.diagnoses.delete.Error.DiagnosisNotFoundHttpError
    | CandidApi.diagnoses.delete.Error.ServiceLinesMustHaveAtLeastOneDiagnosisHttpError
    | CandidApi.diagnoses.delete.Error._Unknown;

export namespace Error {
    export interface DiagnosisNotFoundHttpError extends _Utils {
        errorName: "DiagnosisNotFoundHTTPError";
        content: CandidApi.DiagnosisNotFoundError;
    }

    export interface ServiceLinesMustHaveAtLeastOneDiagnosisHttpError extends _Utils {
        errorName: "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError";
        content: CandidApi.ServiceLinesMustHaveAtLeastOneDiagnosisError;
    }

    export interface _Unknown extends _Utils {
        errorName: void;
        content: core.Fetcher.Error;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: CandidApi.diagnoses.delete.Error._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        diagnosisNotFoundHttpError: (value: CandidApi.DiagnosisNotFoundError) => _Result;
        serviceLinesMustHaveAtLeastOneDiagnosisHttpError: (
            value: CandidApi.ServiceLinesMustHaveAtLeastOneDiagnosisError,
        ) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    diagnosisNotFoundHttpError: (
        value: CandidApi.DiagnosisNotFoundError,
    ): CandidApi.diagnoses.delete.Error.DiagnosisNotFoundHttpError => {
        return {
            content: value,
            errorName: "DiagnosisNotFoundHTTPError",
            _visit: function <_Result>(
                this: CandidApi.diagnoses.delete.Error.DiagnosisNotFoundHttpError,
                visitor: CandidApi.diagnoses.delete.Error._Visitor<_Result>,
            ) {
                return CandidApi.diagnoses.delete.Error._visit(this, visitor);
            },
        };
    },

    serviceLinesMustHaveAtLeastOneDiagnosisHttpError: (
        value: CandidApi.ServiceLinesMustHaveAtLeastOneDiagnosisError,
    ): CandidApi.diagnoses.delete.Error.ServiceLinesMustHaveAtLeastOneDiagnosisHttpError => {
        return {
            content: value,
            errorName: "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError",
            _visit: function <_Result>(
                this: CandidApi.diagnoses.delete.Error.ServiceLinesMustHaveAtLeastOneDiagnosisHttpError,
                visitor: CandidApi.diagnoses.delete.Error._Visitor<_Result>,
            ) {
                return CandidApi.diagnoses.delete.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): CandidApi.diagnoses.delete.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: CandidApi.diagnoses.delete.Error._Unknown,
                visitor: CandidApi.diagnoses.delete.Error._Visitor<_Result>,
            ) {
                return CandidApi.diagnoses.delete.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: CandidApi.diagnoses.delete.Error,
        visitor: CandidApi.diagnoses.delete.Error._Visitor<_Result>,
    ): _Result => {
        switch (value.errorName) {
            case "DiagnosisNotFoundHTTPError":
                return visitor.diagnosisNotFoundHttpError(value.content);
            case "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError":
                return visitor.serviceLinesMustHaveAtLeastOneDiagnosisHttpError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
