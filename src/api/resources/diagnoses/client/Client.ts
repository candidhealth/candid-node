// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as environments from "../../../../environments";
import * as serializers from "../../../../serialization/index";
import * as CandidApi from "../../../index";

export declare namespace Diagnoses {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Diagnoses {
    protected readonly _options: Diagnoses.Options;

    constructor(_options: Diagnoses.Options = {}) {
        this._options = _options;
    }

    /**
     * Creates a new diagnosis for an encounter
     *
     * @param {CandidApi.StandaloneDiagnosisCreate} request
     * @param {Diagnoses.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.diagnoses.create({
     *         encounterId: CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         codeType: "ABF",
     *         code: "code"
     *     })
     */
    public create(
        request: CandidApi.StandaloneDiagnosisCreate,
        requestOptions?: Diagnoses.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<CandidApi.Diagnosis, CandidApi.diagnoses.create.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CandidApi.StandaloneDiagnosisCreate,
        requestOptions?: Diagnoses.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<CandidApi.Diagnosis, CandidApi.diagnoses.create.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                "/api/diagnoses/v2",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.StandaloneDiagnosisCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.Diagnosis.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.diagnoses.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates the diagnosis record matching the provided `diagnosis_id`
     *
     * @param {CandidApi.DiagnosisId} diagnosisId
     * @param {CandidApi.DiagnosisUpdate} request
     * @param {Diagnoses.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.diagnoses.update(CandidApi.DiagnosisId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public update(
        diagnosisId: CandidApi.DiagnosisId,
        request: CandidApi.DiagnosisUpdate = {},
        requestOptions?: Diagnoses.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<CandidApi.Diagnosis, CandidApi.diagnoses.update.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__update(diagnosisId, request, requestOptions));
    }

    private async __update(
        diagnosisId: CandidApi.DiagnosisId,
        request: CandidApi.DiagnosisUpdate = {},
        requestOptions?: Diagnoses.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<CandidApi.Diagnosis, CandidApi.diagnoses.update.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/diagnoses/v2/${core.url.encodePathParam(serializers.DiagnosisId.jsonOrThrow(diagnosisId))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.DiagnosisUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.Diagnosis.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.diagnoses.update.Error.Raw)?.errorName) {
                case "DiagnosisNotFoundHTTPError":
                case "DisallowMultiplePrimaryDiagnosisHTTPError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.diagnoses.update.Error.parseOrThrow(
                                _response.error.body as serializers.diagnoses.update.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.diagnoses.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes the diagnosis record associated with the provided `diagnosis_id`
     *
     * @param {CandidApi.DiagnosisId} diagnosisId
     * @param {Diagnoses.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.diagnoses.delete(CandidApi.DiagnosisId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public delete(
        diagnosisId: CandidApi.DiagnosisId,
        requestOptions?: Diagnoses.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.diagnoses.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(diagnosisId, requestOptions));
    }

    private async __delete(
        diagnosisId: CandidApi.DiagnosisId,
        requestOptions?: Diagnoses.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.diagnoses.delete.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/diagnoses/v2/${core.url.encodePathParam(serializers.DiagnosisId.jsonOrThrow(diagnosisId))}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as serializers.diagnoses.delete.Error.Raw)?.errorName) {
                case "DiagnosisNotFoundHTTPError":
                case "ServiceLinesMustHaveAtLeastOneDiagnosisHTTPError":
                    return {
                        data: {
                            ok: false,
                            error: serializers.diagnoses.delete.Error.parseOrThrow(
                                _response.error.body as serializers.diagnoses.delete.Error.Raw,
                                {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                },
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: CandidApi.diagnoses.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
