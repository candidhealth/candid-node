/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as CandidApi from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as serializers from "../../../../../../serialization/index";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace V1 {
    export interface Options {
        environment?: core.Supplier<environments.CandidApiEnvironment | environments.CandidApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class V1 {
    protected readonly _options: V1.Options;

    constructor(_options: V1.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterAttachments.v1.get(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"))
     */
    public get(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            CandidApi.encounterAttachments.v1.EncounterAttachment[],
            CandidApi.encounterAttachments.v1.get.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(encounterId, requestOptions));
    }

    private async __get(
        encounterId: CandidApi.EncounterId,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterAttachments.v1.EncounterAttachment[],
                CandidApi.encounterAttachments.v1.get.Error
            >
        >
    > {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-attachments/v1/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterAttachments.v1.get.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterAttachments.v1.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Uploads a file to the encounter. The file will be stored in the
     * encounter's attachments.
     *
     * @param {File | fs.ReadStream | Blob} attachmentFile
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterAttachments.v1.CreateAttachmentRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     */
    public create(
        attachmentFile: File | fs.ReadStream | Blob,
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterAttachments.v1.CreateAttachmentRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<CandidApi.encounterAttachments.v1.AttachmentId, CandidApi.encounterAttachments.v1.create.Error>
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__create(attachmentFile, encounterId, request, requestOptions),
        );
    }

    private async __create(
        attachmentFile: File | fs.ReadStream | Blob,
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterAttachments.v1.CreateAttachmentRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                CandidApi.encounterAttachments.v1.AttachmentId,
                CandidApi.encounterAttachments.v1.create.Error
            >
        >
    > {
        const _request = await core.newFormData();
        await _request.appendFile("attachment_file", attachmentFile);
        _request.append(
            "attachment_type",
            serializers.encounterAttachments.v1.EncounterAttachmentType.jsonOrThrow(request.attachmentType, {
                unrecognizedObjectKeys: "strip",
            }),
        );
        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-attachments/v1/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "PUT",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.encounterAttachments.v1.AttachmentId.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterAttachments.v1.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {CandidApi.EncounterId} encounterId
     * @param {CandidApi.encounterAttachments.v1.DeleteAttachmentRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.encounterAttachments.v1.delete(CandidApi.EncounterId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"), {
     *         attachmentId: CandidApi.encounterAttachments.v1.AttachmentId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *     })
     */
    public delete(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterAttachments.v1.DeleteAttachmentRequest,
        requestOptions?: V1.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, CandidApi.encounterAttachments.v1.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(encounterId, request, requestOptions));
    }

    private async __delete(
        encounterId: CandidApi.EncounterId,
        request: CandidApi.encounterAttachments.v1.DeleteAttachmentRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, CandidApi.encounterAttachments.v1.delete.Error>>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.CandidApiEnvironment.Production
                    ).candidApi,
                `/api/encounter-attachments/v1/${encodeURIComponent(serializers.EncounterId.jsonOrThrow(encounterId))}`,
            ),
            method: "DELETE",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.encounterAttachments.v1.DeleteAttachmentRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: CandidApi.encounterAttachments.v1.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
